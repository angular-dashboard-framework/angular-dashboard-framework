{"version":3,"sources":["adf.module.js","angular-dashboard-framework.tpl.js","services/widget.service.js","services/adf-utils.service.js","services/adf-structure-preview.service.js","services/adf-dashboard.service.js","filters/adf-order-by-object-key.filter.js","directives/adf-widget.directive.js","angular-dashboard-framework-tpls.min.js","directives/adf-widget-content.directive.js","directives/adf-structure-preview.directive.js","directives/adf-dashboard.directive.js","directives/adf-dashboard-row.directive.js","directives/adf-dashboard-column.directive.js","dashboard.provider.js","adf.locale.module.js","adf.locale.constants.js","angular-dashboard-framework-tpls.js"],"names":["window","undefined","angular","module","value","run","$templateCache","put","factory","$http","$q","$sce","dashboard","parseUrl","url","parsedUrl","indexOf","replace","widgetsPath","substring","exposed","getTemplate","widget","deferred","defer","template","resolve","templateUrl","tpl","get","getTrustedResourceUrl","then","response","data","reject","promise","stringToBoolean","string","isString","toLowerCase","Boolean","split","object","size","arr","i","forEach","key","index","service","adjustRowHeight","container","rows","length","height","row","style","columns","column","$log","$rootScope","_copyWidgets","source","target","widgets","w","shift","push","_fillStructure","root","counter","isDefined","isUndefined","_readColumns","col","hasOwnProperty","changeStructure","model","structure","copy","createConfiguration","type","cfg","config","_findFirstWidgetColumn","isArray","error","j","addNewWidgetToModel","name","unshift","$broadcast","isEditModeImmediate","edit","immediate","createCategories","categories","category","_tests","filter","$filter","item","array","objectKey","directive","$injector","$uibModal","adfTemplatePath","preLink","$scope","definition","translate","title","titleTemplateUrl","editTemplateUrl","frameless","styleClass","wid","id","fromJson","widgetState","isCollapsed","collapsed","warn","debug","postLink","$element","deleteWidget","splice","remove","options","enableConfirmDelete","deleteScope","$new","deleteTemplateUrl","opts","scope","windowClass","backdrop","instance","open","closeDialog","close","$destroy","deleteDialog","reload","createApplyPromise","result","when","editScope","adfEditTemplatePath","saveDialog","validationError","applyFn","apply","locals","invoke","extend","err","controller","$on","event","args","collapseExpandStatus","idEquals","widgetClasses","classes","editMode","openFullScreen","fullScreenScope","modalSize","$inject","restrict","transclude","customWidgetTemplatePath","adfModel","compile","pre","post","widgetService","$compile","$controller","renderError","msg","html","messageTemplate","compileWidget","currentScope","content","newScope","renderWidget","loadingTemplate","templateScope","base","resolvers","$tpl","all","resolveAs","templateCtrl","controllerAs","children","contents","reason","link","adfStructurePreviewService","preview","selected","$timeout","adfDashboardService","adfUtilsService","_openEditMode","getNewModalScope","widgetFilter","structureName","$watch","oldVal","newVal","adfWidgetFilter","structures","editClass","toggleEditMode","continuousEditMode","modelCopy","collapseAll","cancelEditMode","editDashboardDialog","editDashboardScope","info","addWidgetDialog","addScope","isFunction","adfAddTemplatePath","addTemplateUrl","adfAddWidgetModalOptions","merge","addWidget","$attr","editable","maximizable","collapsible","columnTemplate","cloned","append","rowTemplate","moveWidgetInColumn","evt","$apply","newIndex","oldIndex","findWidget","findColumn","r","c","cid","getId","el","getAttribute","addWidgetToColumn","targetColumn","from","sourceColumn","removeWidgetFromColumn","applySortable","sortable","Sortable","create","group","handle","ghostClass","animation","onAdd","onRemove","onUpdate","on","destroy","provider","adfLocale","getLocales","locales","getActiveLocale","activeLocale","label","translation","defaultApplyFunction","defaultLocale","frameworkLocales","this","path","templatePath","setLocale","locale","Error","addLocale","translations","isObject","$get","Date","getTime","other","toString","constant","en-GB","ADF_COMMON_CLOSE","ADF_COMMON_DELETE","ADF_COMMON_TITLE","ADF_COMMON_CANCEL","ADF_COMMON_APPLY","ADF_COMMON_EDIT_DASHBOARD","ADF_EDIT_DASHBOARD_STRUCTURE_LABEL","ADF_DASHBOARD_TITLE_TOOLTIP_ADD","ADF_DASHBOARD_TITLE_TOOLTIP_SAVE","ADF_DASHBOARD_TITLE_TOOLTIP_EDIT_MODE","ADF_DASHBOARD_TITLE_TOOLTIP_UNDO","ADF_WIDGET_ADD_HEADER","ADF_WIDGET_DELETE_CONFIRM_MESSAGE","ADF_WIDGET_TOOLTIP_REFRESH","ADF_WIDGET_TOOLTIP_MOVE","ADF_WIDGET_TOOLTIP_COLLAPSE","ADF_WIDGET_TOOLTIP_EXPAND","ADF_WIDGET_TOOLTIP_EDIT","ADF_WIDGET_TOOLTIP_FULLSCREEN","ADF_WIDGET_TOOLTIP_REMOVE","sv-SE"],"mappings":"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","file":"angular-dashboard-framework-tpls.min.js","sourcesContent":["/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\nangular.module('adf', ['adf.provider', 'adf.locale', 'ui.bootstrap'])\n  .value('adfTemplatePath', '../src/templates/')\n  .value('rowTemplate', '<adf-dashboard-row row=\"row\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"row in column.rows\" />')\n  .value('columnTemplate', '<adf-dashboard-column column=\"column\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"column in row.columns\" />')\n  .value('adfVersion', '<<adfVersion>>');\n",null,"\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n/**\n * The widget service provide helper functions to render widgets and their content.\n */\nangular.module('adf')\n  .factory('widgetService', function($http, $q, $sce, $templateCache, dashboard) {\n    'use strict';\n\n    function parseUrl(url) {\n      var parsedUrl = url;\n      if (url.indexOf('{widgetsPath}') >= 0) {\n        parsedUrl = url.replace('{widgetsPath}', dashboard.widgetsPath)\n                .replace('//', '/');\n        if (parsedUrl.indexOf('/') === 0) {\n          parsedUrl = parsedUrl.substring(1);\n        }\n      }\n      return parsedUrl;\n    }\n\n    var exposed = {};\n\n    exposed.getTemplate = function(widget){\n      var deferred = $q.defer();\n\n      if (widget.template) {\n        deferred.resolve(widget.template);\n      } else if (widget.templateUrl) {\n        // try to fetch template from cache\n        var tpl = $templateCache.get(widget.templateUrl);\n        if (tpl) {\n          deferred.resolve(tpl);\n        } else {\n          var url = $sce.getTrustedResourceUrl(parseUrl(widget.templateUrl));\n          $http.get(url)\n               .then(function(response) {\n                 return response.data;\n               })\n               .then(function(data) {\n                 // put response to cache, with unmodified url as key\n                 $templateCache.put(widget.templateUrl, data);\n                 deferred.resolve(data);\n               })\n               .catch(function() {\n                 deferred.reject('could not load template');\n               });\n        }\n      }\n\n      return deferred.promise;\n    };\n\n    return exposed;\n  });\n","/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nangular.module('adf')\n  .factory('adfUtilsService', function () {\n    'use strict';\n\n    var service = {\n      stringToBoolean: stringToBoolean,\n      split: split\n    };\n    return service;\n\n    function stringToBoolean(string){\n      switch(angular.isString(string) ? string.toLowerCase() : null){\n        case 'true': case 'yes': case '1': return true;\n        case 'false': case 'no': case '0': case null: return false;\n        default: return Boolean(string);\n      }\n    }\n\n    /**\n     * Splits an object into an array multiple objects inside.\n     *\n     * @param object source object\n     * @param size size of array\n     *\n     * @return array of splitted objects\n     */\n    function split(object, size) {\n      var arr = [];\n      var i = 0;\n      angular.forEach(object, function(value, key){\n        var index = i++ % size;\n        if (!arr[index]){\n          arr[index] = {};\n        }\n        arr[index][key] = value;\n      });\n      return arr;\n    }\n  });\n","/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nangular.module('adf')\n  .factory('adfStructurePreviewService', function () {\n    'use strict';\n\n    var service = {\n      adjustRowHeight: adjustRowHeight\n    };\n    return service;\n\n    function adjustRowHeight(container){\n      if (container.rows && container.rows.length > 0){\n        var height = 100 / container.rows.length;\n        angular.forEach(container.rows, function(row){\n          row.style = {\n            height: height + '%'\n          }\n\n          if (row.columns){\n            angular.forEach(row.columns, function(column){\n              adjustRowHeight(column);\n            });\n          }\n        });\n      }\n    }\n  });\n","/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nangular.module('adf')\n  .factory('adfDashboardService', function ($log, dashboard, $rootScope) {\n    'use strict';\n\n    var service = {\n      changeStructure: changeStructure,\n      createConfiguration: createConfiguration,\n      addNewWidgetToModel: addNewWidgetToModel,\n      isEditModeImmediate: isEditModeImmediate,\n      createCategories: createCategories,\n\n      // expose internal functions for testing purposes\n      // TODO find a nicer way\n      _tests: {\n        _readColumns: _readColumns\n      }\n    };\n    return service;\n\n    function _copyWidgets(source, target) {\n      if ( source.widgets && source.widgets.length > 0 ){\n        var w = source.widgets.shift();\n        while (w){\n          target.widgets.push(w);\n          w = source.widgets.shift();\n        }\n      }\n    }\n\n    /**\n    * Copy widget from old columns to the new model\n    * @param object root the model\n    * @param array of columns\n    * @param counter\n    */\n    function _fillStructure(root, columns, counter) {\n      counter = counter || 0;\n\n      if (angular.isDefined(root.rows)) {\n        angular.forEach(root.rows, function (row) {\n          angular.forEach(row.columns, function (column) {\n            // if the widgets prop doesn't exist, create a new array for it.\n            // this allows ui.sortable to do it's thing without error\n            if (!column.widgets) {\n              column.widgets = [];\n            }\n\n            // if a column exist at the counter index, copy over the column\n            if (angular.isDefined(columns[counter])) {\n              // do not add widgets to a column, which uses nested rows\n              if (angular.isUndefined(column.rows)){\n                _copyWidgets(columns[counter], column);\n                counter++;\n              }\n            }\n\n            // run fillStructure again for any sub rows/columns\n            counter = _fillStructure(column, columns, counter);\n          });\n        });\n      }\n      return counter;\n    }\n\n    /**\n    * Read Columns: recursively searches an object for the 'columns' property\n    * @param object model\n    * @param array  an array of existing columns; used when recursion happens\n    */\n    function _readColumns(root, columns) {\n      columns = columns || [];\n\n      if (angular.isDefined(root.rows)) {\n        angular.forEach(root.rows, function (row) {\n          angular.forEach(row.columns, function (col) {\n            if (!col.hasOwnProperty('rows')) {\n              columns.push(col);\n            }\n            // keep reading columns until we can't any more\n            _readColumns(col, columns);\n          });\n        });\n      }\n\n      return columns;\n    }\n\n    function changeStructure(model, structure){\n      var columns = _readColumns(model);\n      var counter = 0;\n\n      model.rows = angular.copy(structure.rows);\n\n      while ( counter < columns.length ){\n        counter = _fillStructure(model, columns, counter);\n      }\n    }\n\n    function createConfiguration(type){\n      var cfg = {};\n      var config = dashboard.widgets[type].config;\n      if (config){\n        cfg = angular.copy(config);\n      }\n      return cfg;\n    }\n\n    /**\n     * Find first widget column in model.\n     *\n     * @param dashboard model\n     */\n    function _findFirstWidgetColumn(model){\n      var column = null;\n      if (!angular.isArray(model.rows)){\n        $log.error('model does not have any rows');\n        return null;\n      }\n      for (var i=0; i<model.rows.length; i++){\n        var row = model.rows[i];\n        if (angular.isArray(row.columns)){\n          for (var j=0; j<row.columns.length; j++){\n            var col = row.columns[j];\n            if (!col.rows){\n              column = col;\n              break;\n            }\n          }\n        }\n        if (column){\n          break;\n        }\n      }\n      return column;\n    }\n\n    /**\n     * Adds the widget to first column of the model.\n     *\n     * @param dashboard model\n     * @param widget to add to model\n     * @param name name of the dashboard\n     */\n    function addNewWidgetToModel(model, widget, name){\n      if (model){\n        var column = _findFirstWidgetColumn(model);\n        if (column){\n          if (!column.widgets){\n            column.widgets = [];\n          }\n          column.widgets.unshift(widget);\n\n          $rootScope.$broadcast('adfWidgetAdded', name, model, widget);\n        } else {\n          $log.error('could not find first widget column');\n        }\n      } else {\n        $log.error('model is undefined');\n      }\n    }\n\n    /**\n     * Checks if the edit mode of the widget should be opened immediately.\n     *\n     * @param widget type\n     */\n    function isEditModeImmediate(type){\n      var widget = dashboard.widgets[type];\n      return widget && widget.edit && widget.edit.immediate;\n    }\n\n    /**\n     * Creates object with the category name as key and an array of widgets as value.\n     *\n     * @param widgets array of widgets\n     *\n     * @return array of categories\n     */\n    function createCategories(widgets){\n      var categories = {};\n      angular.forEach(widgets, function(widget, key){\n        var category = widget.category;\n        // if the widget has no category use a default one\n        if (!category){\n          category = 'Miscellaneous';\n        }\n        // push widget to category array\n        if (angular.isUndefined(categories[category])){\n          categories[category] = {widgets: {}};\n        }\n        categories[category].widgets[key] = widget;\n      });\n      return categories;\n    }\n  });\n","/*\n* The MIT License\n*\n* Copyright (c) 2015, Sebastian Sdorra\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in\n* all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\n\n/* global angular */\nangular.module('adf')\n  .filter('adfOrderByObjectKey', function($filter) {\n    'use strict';\n\n    return function(item, key){\n      var array = [];\n      angular.forEach(item, function(value, objectKey){\n        value[key] = objectKey;\n        array.push(value);\n      });\n      return $filter('orderBy')(array, key);\n    };\n  });\n","/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\nangular.module('adf')\n  .directive('adfWidget', function($injector, $q, $log, $uibModal, $rootScope, dashboard, adfTemplatePath) {\n\n    return {\n      replace: true,\n      restrict: 'EA',\n      transclude: false,\n      templateUrl: dashboard.customWidgetTemplatePath ? dashboard.customWidgetTemplatePath : adfTemplatePath + 'widget.html',\n      scope: {\n        adfModel: '=',\n        definition: '=',\n        col: '=column',\n        editMode: '=',\n        options: '=',\n        widgetState: '='\n      },\n      controller: controller,\n      compile: function() {\n\n        /**\n         * use pre link, because link of widget-content\n         * is executed before post link widget\n         */\n        return {\n          pre: preLink,\n          post: postLink\n        };\n      }\n    };\n\n    function preLink($scope) {\n      var definition = $scope.definition;\n\n      //passs translate function from dashboard so we can translate labels inside html templates\n      $scope.translate = dashboard.translate;\n\n      if (definition) {\n        var w = dashboard.widgets[definition.type];\n        if (w) {\n          // pass title\n          if (!definition.title) {\n            definition.title = w.title;\n          }\n\n          if (!definition.titleTemplateUrl) {\n            definition.titleTemplateUrl = adfTemplatePath + 'widget-title.html';\n            if (w.titleTemplateUrl) {\n              definition.titleTemplateUrl = w.titleTemplateUrl;\n            }\n          }\n\n          if (!definition.editTemplateUrl) {\n            definition.editTemplateUrl = adfTemplatePath + 'widget-edit.html';\n            if (w.editTemplateUrl) {\n              definition.editTemplateUrl = w.editTemplateUrl;\n            }\n          }\n\n          if (!definition.titleTemplateUrl) {\n            definition.frameless = w.frameless;\n          }\n\n          if (!definition.styleClass) {\n            definition.styleClass = w.styleClass;\n          }\n\n          // set id for sortable\n          if (!definition.wid) {\n            definition.wid = dashboard.id();\n          }\n\n          // pass copy of widget to scope\n          $scope.widget = angular.copy(w);\n\n          // create config object\n          var config = definition.config;\n          if (config) {\n            if (angular.isString(config)) {\n              config = angular.fromJson(config);\n            }\n          } else {\n            config = {};\n          }\n\n          // pass config to scope\n          $scope.config = config;\n\n          // collapse exposed $scope.widgetState property\n          if (!$scope.widgetState) {\n            $scope.widgetState = {};\n            $scope.widgetState.isCollapsed= (w.collapsed === true) ? w.collapsed : false;\n          }\n\n        } else {\n          $log.warn('could not find widget ' + definition.type);\n        }\n      } else {\n        $log.debug('definition not specified, widget was probably removed');\n      }\n    }\n\n    function postLink($scope, $element) {\n      var definition = $scope.definition;\n      if (definition) {\n        // bind close function\n\n        var deleteWidget = function() {\n          var column = $scope.col;\n          if (column) {\n            var index = column.widgets.indexOf(definition);\n            if (index >= 0) {\n              column.widgets.splice(index, 1);\n            }\n          }\n          $element.remove();\n          $rootScope.$broadcast('adfWidgetRemovedFromColumn', definition);\n        };\n\n        $scope.remove = function() {\n          if ($scope.options.enableConfirmDelete) {\n            var deleteScope = $scope.$new();\n            deleteScope.translate = dashboard.translate;\n\n            var deleteTemplateUrl = adfTemplatePath + 'widget-delete.html';\n            if (definition.deleteTemplateUrl) {\n              deleteTemplateUrl = definition.deleteTemplateUrl;\n            }\n            var opts = {\n              scope: deleteScope,\n              templateUrl: deleteTemplateUrl,\n              windowClass: 'adf-remove-widget-modal',\n              backdrop: 'static'\n            };\n            var instance = $uibModal.open(opts);\n\n            deleteScope.closeDialog = function() {\n              instance.close();\n              deleteScope.$destroy();\n            };\n            deleteScope.deleteDialog = function() {\n              deleteWidget();\n              deleteScope.closeDialog();\n            };\n          } else {\n            deleteWidget();\n          }\n        };\n\n        // bind reload function\n        $scope.reload = function() {\n          $scope.$broadcast('widgetReload');\n        };\n\n        // bind edit function\n        $scope.edit = function() {\n          var editScope = $scope.$new();\n          editScope.translate = dashboard.translate;\n          editScope.definition = angular.copy(definition);\n\n          var adfEditTemplatePath = adfTemplatePath + 'widget-edit.html';\n          if (definition.editTemplateUrl) {\n            adfEditTemplatePath = definition.editTemplateUrl;\n          }\n\n          var opts = {\n            scope: editScope,\n            templateUrl: adfEditTemplatePath,\n            windowClass: 'adf-edit-widget-modal',\n            backdrop: 'static'\n          };\n\n          var instance = $uibModal.open(opts);\n\n          editScope.closeDialog = function() {\n            instance.close();\n            editScope.$destroy();\n          };\n\n          // TODO create util method\n          function createApplyPromise(result){\n            var promise;\n            if (typeof result === 'boolean'){\n              var deferred = $q.defer();\n              if (result){\n                deferred.resolve();\n              } else {\n                deferred.reject();\n              }\n              promise = deferred.promise;\n            } else {\n              promise = $q.when(result);\n            }\n            return promise;\n          }\n\n          editScope.saveDialog = function() {\n            // clear validation error\n            editScope.validationError = null;\n\n            // build injection locals\n            var widget = $scope.widget;\n\n            // create a default apply method for widgets\n            // without edit mode\n            // see issue https://goo.gl/KHPQLZ\n            var applyFn;\n            if (widget.edit){\n              applyFn = widget.edit.apply;\n            } else {\n              applyFn = function(){\n                return true;\n              };\n            }\n\n            // injection locals\n            var locals = {\n              widget: widget,\n              definition: editScope.definition,\n              config: editScope.definition.config\n            };\n\n            // invoke apply function and apply if success\n            var result = $injector.invoke(applyFn, applyFn, locals);\n            createApplyPromise(result).then(function(){\n              definition.title = editScope.definition.title;\n              angular.extend(definition.config, editScope.definition.config);\n              if (widget.edit && widget.edit.reload) {\n                // reload content after edit dialog is closed\n                $scope.$broadcast('widgetConfigChanged');\n              }\n              editScope.closeDialog();\n            }, function(err){\n              if (err){\n                editScope.validationError = err;\n              } else {\n                editScope.validationError = 'Validation durring apply failed';\n              }\n            });\n          };\n\n        };\n      } else {\n        $log.debug('widget not found');\n      }\n    }\n\n    function controller($scope){\n\n      $scope.$on('adfDashboardCollapseExpand', function(event, args) {\n        $scope.widgetState.isCollapsed = args.collapseExpandStatus;\n      });\n\n      $scope.$on('adfWidgetEnterEditMode', function(event, widget){\n        if (dashboard.idEquals($scope.definition.wid, widget.wid)){\n          $scope.edit();\n        }\n      });\n\n      $scope.widgetClasses = function(w, definition){\n        var classes = definition.styleClass || '';\n        // w is undefined, if the type of the widget is unknown\n        // see issue #216\n        if (!w || !w.frameless || $scope.editMode){\n          classes += ' panel panel-default';\n        }\n        return classes;\n      };\n\n      $scope.openFullScreen = function() {\n        var definition = $scope.definition;\n        var fullScreenScope = $scope.$new();\n        var opts = {\n          scope: fullScreenScope,\n          templateUrl: adfTemplatePath + 'widget-fullscreen.html',\n          size: definition.modalSize || 'lg', // 'sm', 'lg'\n          backdrop: 'static',\n          windowClass: (definition.fullScreen) ? 'dashboard-modal widget-fullscreen' : 'dashboard-modal'\n        };\n\n        var instance = $uibModal.open(opts);\n        fullScreenScope.closeDialog = function() {\n          instance.close();\n          fullScreenScope.$destroy();\n        };\n      };\n    }\n\n  });\n","(function(window, undefined) {'use strict';\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\nangular.module('adf', ['adf.provider', 'adf.locale', 'ui.bootstrap'])\n  .value('adfTemplatePath', '../src/templates/')\n  .value('rowTemplate', '<adf-dashboard-row row=\"row\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"row in column.rows\" />')\n  .value('columnTemplate', '<adf-dashboard-column column=\"column\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"column in row.columns\" />')\n  .value('adfVersion', '0.13.0-SNAPSHOT');\n\nangular.module(\"adf\").run([\"$templateCache\", function($templateCache) {$templateCache.put(\"../src/templates/dashboard-column.html\",\"<div adf-id={{column.cid}} class=column ng-class=column.styleClass ng-model=column.widgets> <adf-widget ng-repeat=\\\"definition in column.widgets\\\" adf-model=adfModel definition=definition column=column edit-mode=editMode options=options widget-state=widgetState>  </adf-widget></div> \");\n$templateCache.put(\"../src/templates/dashboard-edit.html\",\"<div class=modal-header> <button type=button class=close ng-click=closeDialog() aria-hidden=true>&times;</button> <h4 class=modal-title ng-bind=\\\"translate(\\'ADF_COMMON_EDIT_DASHBOARD\\')\\\">Edit Dashboard</h4> </div> <div class=modal-body> <form role=form> <div class=form-group> <label for=dashboardTitle ng-bind=\\\"translate(\\'ADF_COMMON_TITLE\\')\\\">Title</label> <input type=text class=form-control id=dashboardTitle ng-model=copy.title required> </div> <div class=form-group> <label ng-bind=\\\"translate(\\'ADF_EDIT_DASHBOARD_STRUCTURE_LABEL\\')\\\">Structure</label> <div class=row ng-init=\\\"splitted = split(structures, 3)\\\"> <div class=col-lg-4 ng-repeat=\\\"structureColumn in splitted\\\"> <div class=radio ng-repeat=\\\"(key, structure) in structureColumn\\\"> <div class=row> <div class=col-sm-2> <label> <input type=radio value={{key}} ng-model=model.structure ng-change=\\\"changeStructure(key, structure)\\\"> </label> </div> <div class=col-sm-9 ng-click=\\\"changeStructure(key, structure)\\\"> <adf-structure-preview name=key structure=structure selected=\\\"model.structure == key\\\"> </adf-structure-preview> </div> </div> </div> </div> </div> </div> </form> </div> <div class=modal-footer> <button type=button class=\\\"btn btn-primary\\\" ng-click=closeDialog() ng-bind=\\\"translate(\\'ADF_COMMON_CLOSE\\')\\\">Close</button> </div> \");\n$templateCache.put(\"../src/templates/dashboard-row.html\",\"<div class=row ng-class=row.styleClass ng-style=row.style>  </div> \");\n$templateCache.put(\"../src/templates/dashboard-title.html\",\"<h1> {{model.title}} <span style=\\\"font-size: 16px\\\" class=pull-right> <a href ng-if=editMode title=\\\"{{ translate(\\'ADF_DASHBOARD_TITLE_TOOLTIP_ADD\\') }}\\\" ng-click=addWidgetDialog()> <i class=\\\"glyphicon glyphicon-plus-sign\\\"></i> </a> <a href ng-if=editMode title=\\\"{{ translate(\\'ADF_COMMON_EDIT_DASHBOARD\\') }}\\\" ng-click=editDashboardDialog()> <i class=\\\"glyphicon glyphicon-cog\\\"></i> </a> <a href ng-if=options.editable title=\\\"{{editMode ? translate(\\'ADF_DASHBOARD_TITLE_TOOLTIP_SAVE\\') : translate(\\'ADF_DASHBOARD_TITLE_TOOLTIP_EDIT_MODE\\') }}\\\" ng-click=toggleEditMode()> <i class=glyphicon x-ng-class=\\\"{\\'glyphicon-edit\\' : !editMode, \\'glyphicon-save\\' : editMode}\\\">{{!editMode ? \\'Edit\\' : \\'Save\\' }}</i> </a> <a href ng-if=editMode title=\\\"{{ translate(\\'ADF_DASHBOARD_TITLE_TOOLTIP_UNDO\\') }}\\\" ng-click=cancelEditMode()> <i class=\\\"glyphicon glyphicon-repeat adf-flip\\\"></i> </a> </span> </h1> \");\n$templateCache.put(\"../src/templates/dashboard.html\",\"<div class=dashboard-container> <div ng-include src=model.titleTemplateUrl></div> <div class=dashboard x-ng-class=\\\"{\\'edit\\' : editMode}\\\"> <adf-dashboard-row row=row adf-model=model options=options ng-repeat=\\\"row in model.rows\\\" edit-mode=editMode continuous-edit-mode=continuousEditMode> </adf-dashboard-row></div> </div> \");\n$templateCache.put(\"../src/templates/structure-preview.html\",\"<div class=structure-preview ng-class=\\\"{selected: selected}\\\"> <h4>{{name}}</h4> <adf-dashboard-row ng-repeat=\\\"row in preview.rows\\\" row=row> </adf-dashboard-row></div> \");\n$templateCache.put(\"../src/templates/widget-add.html\",\"<div class=modal-header> <button type=button class=close ng-click=closeDialog() aria-hidden=true>&times;</button> <h4 class=modal-title ng-bind=\\\"translate(\\'ADF_WIDGET_ADD_HEADER\\')\\\">Add new widget</h4> </div> <div class=modal-body>  <div ng-if=createCategories> <uib-accordion ng-init=\\\"categorized = createCategories(widgets)\\\"> <uib-accordion-group heading={{category.name}} ng-repeat=\\\"category in categorized | adfOrderByObjectKey: \\'name\\'\\\"> <dl class=dl-horizontal> <dt ng-repeat-start=\\\"widget in category.widgets | adfOrderByObjectKey: \\'key\\'\\\"> <a href ng-click=addWidget(widget.key)> {{widget.title}} </a> </dt> <dd ng-repeat-end ng-if=widget.description> {{widget.description}} </dd> </dl> </uib-accordion-group> </uib-accordion> </div>  <div style=\\\"display: inline-block;\\\" ng-if=!createCategories> <dl class=dl-horizontal> <dt ng-repeat-start=\\\"widget in widgets | adfOrderByObjectKey: \\'key\\'\\\"> <a href ng-click=addWidget(widget.key)> {{widget.title}} </a> </dt> <dd ng-repeat-end ng-if=widget.description> {{widget.description}} </dd> </dl> </div> </div> <div class=modal-footer> <button type=button class=\\\"btn btn-primary\\\" ng-click=closeDialog() ng-bind=\\\"translate(\\'ADF_COMMON_CLOSE\\')\\\">Close</button> </div> \");\n$templateCache.put(\"../src/templates/widget-delete.html\",\"<div class=modal-header> <h4 class=modal-title><span ng-bind=\\\"translate(\\'ADF_COMMON_DELETE\\')\\\">Delete</span> {{widget.title}}</h4> </div> <div class=modal-body> <form role=form> <div class=form-group> <label for=widgetTitle ng-bind=\\\"translate(\\'ADF_WIDGET_DELETE_CONFIRM_MESSAGE\\')\\\">Are you sure you want to delete this widget ?</label> </div> </form> </div> <div class=modal-footer> <button type=button class=\\\"btn btn-default\\\" ng-click=closeDialog() ng-bind=\\\"translate(\\'ADF_COMMON_CLOSE\\')\\\">Close</button> <button type=button class=\\\"btn btn-primary\\\" ng-click=deleteDialog() ng-bind=\\\"translate(\\'ADF_COMMON_DELETE\\')\\\">Delete</button> </div> \");\n$templateCache.put(\"../src/templates/widget-edit.html\",\"<form name=widgetEditForm novalidate role=form ng-submit=saveDialog()> <div class=modal-header> <button type=button class=close ng-click=closeDialog() aria-hidden=true>&times;</button> <h4 class=modal-title>{{widget.title}}</h4> </div> <div class=modal-body> <div class=\\\"alert alert-danger\\\" role=alert ng-show=validationError> <strong>Apply error:</strong> {{validationError}} </div> <div class=form-group> <label for=widgetTitle ng-bind=\\\"translate(\\'ADF_COMMON_TITLE\\')\\\">Title</label> <input type=text class=form-control id=widgetTitle ng-model=definition.title placeholder=\\\"Enter title\\\" required> </div> <div ng-if=widget.edit> <adf-widget-content adf-model=adfModel model=definition content=widget.edit> </adf-widget-content></div> </div> <div class=modal-footer> <button type=button class=\\\"btn btn-default\\\" ng-click=closeDialog() ng-bind=\\\"translate(\\'ADF_COMMON_CANCEL\\')\\\">Cancel</button> <input type=submit class=\\\"btn btn-primary\\\" ng-disabled=widgetEditForm.$invalid ng-value=\\\"translate(\\'ADF_COMMON_APPLY\\')\\\"> </div> </form> \");\n$templateCache.put(\"../src/templates/widget-fullscreen.html\",\"<div class=modal-header> <div class=\\\"pull-right widget-icons\\\"> <a href title=\\\"{{ translate(\\'ADF_WIDGET_TOOLTIP_REFRESH\\') }}\\\" ng-if=widget.reload ng-click=reload()> <i class=\\\"glyphicon glyphicon-refresh\\\"></i> </a> <a href title=close ng-click=closeDialog()> <i class=\\\"glyphicon glyphicon-remove\\\"></i> </a> </div> <h4 class=modal-title>{{definition.title}}</h4> </div> <div class=modal-body> <adf-widget-content adf-model=adfModel model=definition content=widget> </adf-widget-content></div> <div class=modal-footer> <button type=button class=\\\"btn btn-primary\\\" ng-click=closeDialog() ng-bind=\\\"translate(\\'ADF_COMMON_CLOSE\\')\\\">Close</button> </div> \");\n$templateCache.put(\"../src/templates/widget-title.html\",\"<h3 class=panel-title> {{definition.title}} <span class=pull-right> <a href title=\\\"{{ translate(\\'ADF_WIDGET_TOOLTIP_REFRESH\\') }}\\\" ng-if=widget.reload ng-click=reload()> <i class=\\\"glyphicon glyphicon-refresh\\\"></i> </a>  <a href title=\\\"{{ translate(\\'ADF_WIDGET_TOOLTIP_MOVE\\') }}\\\" class=adf-move ng-if=editMode> <i class=\\\"glyphicon glyphicon-move\\\"></i> </a>  <a href title=\\\"{{ translate(\\'ADF_WIDGET_TOOLTIP_COLLAPSE\\') }}\\\" ng-show=\\\"options.collapsible && !widgetState.isCollapsed\\\" ng-click=\\\"widgetState.isCollapsed = !widgetState.isCollapsed\\\"> <i class=\\\"glyphicon glyphicon-minus\\\"></i> </a>  <a href title=\\\"{{ translate(\\'ADF_WIDGET_TOOLTIP_EXPAND\\') }}\\\" ng-show=\\\"options.collapsible && widgetState.isCollapsed\\\" ng-click=\\\"widgetState.isCollapsed = !widgetState.isCollapsed\\\"> <i class=\\\"glyphicon glyphicon-plus\\\"></i> </a>  <a href title=\\\"{{ translate(\\'ADF_WIDGET_TOOLTIP_EDIT\\') }}\\\" ng-click=edit() ng-if=editMode> <i class=\\\"glyphicon glyphicon-cog\\\"></i> </a> <a href title=\\\"{{ translate(\\'ADF_WIDGET_TOOLTIP_FULLSCREEN\\') }}\\\" ng-click=openFullScreen() ng-show=options.maximizable> <i class=\\\"glyphicon glyphicon-fullscreen\\\"></i> </a>  <a href title=\\\"{{ translate(\\'ADF_WIDGET_TOOLTIP_REMOVE\\') }}\\\" ng-click=remove() ng-if=editMode> <i class=\\\"glyphicon glyphicon-remove\\\"></i> </a> </span> </h3> \");\n$templateCache.put(\"../src/templates/widget.html\",\"<div adf-id={{definition.wid}} adf-widget-type={{definition.type}} ng-class=\\\"widgetClasses(widget, definition)\\\" class=widget> <div class=\\\"panel-heading clearfix\\\" ng-if=\\\"!widget.frameless || editMode\\\"> <div ng-include src=definition.titleTemplateUrl></div> </div> <div ng-class=\\\"{\\'panel-body\\':!widget.frameless || editMode}\\\" uib-collapse=widgetState.isCollapsed> <adf-widget-content adf-model=adfModel model=definition content=widget> </adf-widget-content></div> </div> \");}]);\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n/**\n * The widget service provide helper functions to render widgets and their content.\n */\nangular.module('adf')\n  .factory('widgetService', [\"$http\", \"$q\", \"$sce\", \"$templateCache\", \"dashboard\", function($http, $q, $sce, $templateCache, dashboard) {\n    \n\n    function parseUrl(url) {\n      var parsedUrl = url;\n      if (url.indexOf('{widgetsPath}') >= 0) {\n        parsedUrl = url.replace('{widgetsPath}', dashboard.widgetsPath)\n                .replace('//', '/');\n        if (parsedUrl.indexOf('/') === 0) {\n          parsedUrl = parsedUrl.substring(1);\n        }\n      }\n      return parsedUrl;\n    }\n\n    var exposed = {};\n\n    exposed.getTemplate = function(widget){\n      var deferred = $q.defer();\n\n      if (widget.template) {\n        deferred.resolve(widget.template);\n      } else if (widget.templateUrl) {\n        // try to fetch template from cache\n        var tpl = $templateCache.get(widget.templateUrl);\n        if (tpl) {\n          deferred.resolve(tpl);\n        } else {\n          var url = $sce.getTrustedResourceUrl(parseUrl(widget.templateUrl));\n          $http.get(url)\n               .then(function(response) {\n                 return response.data;\n               })\n               .then(function(data) {\n                 // put response to cache, with unmodified url as key\n                 $templateCache.put(widget.templateUrl, data);\n                 deferred.resolve(data);\n               })\n               .catch(function() {\n                 deferred.reject('could not load template');\n               });\n        }\n      }\n\n      return deferred.promise;\n    };\n\n    return exposed;\n  }]);\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nangular.module('adf')\n  .factory('adfUtilsService', function () {\n    \n\n    var service = {\n      stringToBoolean: stringToBoolean,\n      split: split\n    };\n    return service;\n\n    function stringToBoolean(string){\n      switch(angular.isString(string) ? string.toLowerCase() : null){\n        case 'true': case 'yes': case '1': return true;\n        case 'false': case 'no': case '0': case null: return false;\n        default: return Boolean(string);\n      }\n    }\n\n    /**\n     * Splits an object into an array multiple objects inside.\n     *\n     * @param object source object\n     * @param size size of array\n     *\n     * @return array of splitted objects\n     */\n    function split(object, size) {\n      var arr = [];\n      var i = 0;\n      angular.forEach(object, function(value, key){\n        var index = i++ % size;\n        if (!arr[index]){\n          arr[index] = {};\n        }\n        arr[index][key] = value;\n      });\n      return arr;\n    }\n  });\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nangular.module('adf')\n  .factory('adfStructurePreviewService', function () {\n    \n\n    var service = {\n      adjustRowHeight: adjustRowHeight\n    };\n    return service;\n\n    function adjustRowHeight(container){\n      if (container.rows && container.rows.length > 0){\n        var height = 100 / container.rows.length;\n        angular.forEach(container.rows, function(row){\n          row.style = {\n            height: height + '%'\n          }\n\n          if (row.columns){\n            angular.forEach(row.columns, function(column){\n              adjustRowHeight(column);\n            });\n          }\n        });\n      }\n    }\n  });\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nangular.module('adf')\n  .factory('adfDashboardService', [\"$log\", \"dashboard\", \"$rootScope\", function ($log, dashboard, $rootScope) {\n    \n\n    var service = {\n      changeStructure: changeStructure,\n      createConfiguration: createConfiguration,\n      addNewWidgetToModel: addNewWidgetToModel,\n      isEditModeImmediate: isEditModeImmediate,\n      createCategories: createCategories,\n\n      // expose internal functions for testing purposes\n      // TODO find a nicer way\n      _tests: {\n        _readColumns: _readColumns\n      }\n    };\n    return service;\n\n    function _copyWidgets(source, target) {\n      if ( source.widgets && source.widgets.length > 0 ){\n        var w = source.widgets.shift();\n        while (w){\n          target.widgets.push(w);\n          w = source.widgets.shift();\n        }\n      }\n    }\n\n    /**\n    * Copy widget from old columns to the new model\n    * @param object root the model\n    * @param array of columns\n    * @param counter\n    */\n    function _fillStructure(root, columns, counter) {\n      counter = counter || 0;\n\n      if (angular.isDefined(root.rows)) {\n        angular.forEach(root.rows, function (row) {\n          angular.forEach(row.columns, function (column) {\n            // if the widgets prop doesn't exist, create a new array for it.\n            // this allows ui.sortable to do it's thing without error\n            if (!column.widgets) {\n              column.widgets = [];\n            }\n\n            // if a column exist at the counter index, copy over the column\n            if (angular.isDefined(columns[counter])) {\n              // do not add widgets to a column, which uses nested rows\n              if (angular.isUndefined(column.rows)){\n                _copyWidgets(columns[counter], column);\n                counter++;\n              }\n            }\n\n            // run fillStructure again for any sub rows/columns\n            counter = _fillStructure(column, columns, counter);\n          });\n        });\n      }\n      return counter;\n    }\n\n    /**\n    * Read Columns: recursively searches an object for the 'columns' property\n    * @param object model\n    * @param array  an array of existing columns; used when recursion happens\n    */\n    function _readColumns(root, columns) {\n      columns = columns || [];\n\n      if (angular.isDefined(root.rows)) {\n        angular.forEach(root.rows, function (row) {\n          angular.forEach(row.columns, function (col) {\n            if (!col.hasOwnProperty('rows')) {\n              columns.push(col);\n            }\n            // keep reading columns until we can't any more\n            _readColumns(col, columns);\n          });\n        });\n      }\n\n      return columns;\n    }\n\n    function changeStructure(model, structure){\n      var columns = _readColumns(model);\n      var counter = 0;\n\n      model.rows = angular.copy(structure.rows);\n\n      while ( counter < columns.length ){\n        counter = _fillStructure(model, columns, counter);\n      }\n    }\n\n    function createConfiguration(type){\n      var cfg = {};\n      var config = dashboard.widgets[type].config;\n      if (config){\n        cfg = angular.copy(config);\n      }\n      return cfg;\n    }\n\n    /**\n     * Find first widget column in model.\n     *\n     * @param dashboard model\n     */\n    function _findFirstWidgetColumn(model){\n      var column = null;\n      if (!angular.isArray(model.rows)){\n        $log.error('model does not have any rows');\n        return null;\n      }\n      for (var i=0; i<model.rows.length; i++){\n        var row = model.rows[i];\n        if (angular.isArray(row.columns)){\n          for (var j=0; j<row.columns.length; j++){\n            var col = row.columns[j];\n            if (!col.rows){\n              column = col;\n              break;\n            }\n          }\n        }\n        if (column){\n          break;\n        }\n      }\n      return column;\n    }\n\n    /**\n     * Adds the widget to first column of the model.\n     *\n     * @param dashboard model\n     * @param widget to add to model\n     * @param name name of the dashboard\n     */\n    function addNewWidgetToModel(model, widget, name){\n      if (model){\n        var column = _findFirstWidgetColumn(model);\n        if (column){\n          if (!column.widgets){\n            column.widgets = [];\n          }\n          column.widgets.unshift(widget);\n\n          $rootScope.$broadcast('adfWidgetAdded', name, model, widget);\n        } else {\n          $log.error('could not find first widget column');\n        }\n      } else {\n        $log.error('model is undefined');\n      }\n    }\n\n    /**\n     * Checks if the edit mode of the widget should be opened immediately.\n     *\n     * @param widget type\n     */\n    function isEditModeImmediate(type){\n      var widget = dashboard.widgets[type];\n      return widget && widget.edit && widget.edit.immediate;\n    }\n\n    /**\n     * Creates object with the category name as key and an array of widgets as value.\n     *\n     * @param widgets array of widgets\n     *\n     * @return array of categories\n     */\n    function createCategories(widgets){\n      var categories = {};\n      angular.forEach(widgets, function(widget, key){\n        var category = widget.category;\n        // if the widget has no category use a default one\n        if (!category){\n          category = 'Miscellaneous';\n        }\n        // push widget to category array\n        if (angular.isUndefined(categories[category])){\n          categories[category] = {widgets: {}};\n        }\n        categories[category].widgets[key] = widget;\n      });\n      return categories;\n    }\n  }]);\n\n/*\n* The MIT License\n*\n* Copyright (c) 2015, Sebastian Sdorra\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in\n* all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\n\n/* global angular */\nangular.module('adf')\n  .filter('adfOrderByObjectKey', [\"$filter\", function($filter) {\n    \n\n    return function(item, key){\n      var array = [];\n      angular.forEach(item, function(value, objectKey){\n        value[key] = objectKey;\n        array.push(value);\n      });\n      return $filter('orderBy')(array, key);\n    };\n  }]);\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\nangular.module('adf')\n  .directive('adfWidget', [\"$injector\", \"$q\", \"$log\", \"$uibModal\", \"$rootScope\", \"dashboard\", \"adfTemplatePath\", function($injector, $q, $log, $uibModal, $rootScope, dashboard, adfTemplatePath) {\n\n    controller.$inject = [\"$scope\"];\n    return {\n      replace: true,\n      restrict: 'EA',\n      transclude: false,\n      templateUrl: dashboard.customWidgetTemplatePath ? dashboard.customWidgetTemplatePath : adfTemplatePath + 'widget.html',\n      scope: {\n        adfModel: '=',\n        definition: '=',\n        col: '=column',\n        editMode: '=',\n        options: '=',\n        widgetState: '='\n      },\n      controller: controller,\n      compile: function() {\n\n        /**\n         * use pre link, because link of widget-content\n         * is executed before post link widget\n         */\n        return {\n          pre: preLink,\n          post: postLink\n        };\n      }\n    };\n\n    function preLink($scope) {\n      var definition = $scope.definition;\n\n      //passs translate function from dashboard so we can translate labels inside html templates\n      $scope.translate = dashboard.translate;\n\n      if (definition) {\n        var w = dashboard.widgets[definition.type];\n        if (w) {\n          // pass title\n          if (!definition.title) {\n            definition.title = w.title;\n          }\n\n          if (!definition.titleTemplateUrl) {\n            definition.titleTemplateUrl = adfTemplatePath + 'widget-title.html';\n            if (w.titleTemplateUrl) {\n              definition.titleTemplateUrl = w.titleTemplateUrl;\n            }\n          }\n\n          if (!definition.editTemplateUrl) {\n            definition.editTemplateUrl = adfTemplatePath + 'widget-edit.html';\n            if (w.editTemplateUrl) {\n              definition.editTemplateUrl = w.editTemplateUrl;\n            }\n          }\n\n          if (!definition.titleTemplateUrl) {\n            definition.frameless = w.frameless;\n          }\n\n          if (!definition.styleClass) {\n            definition.styleClass = w.styleClass;\n          }\n\n          // set id for sortable\n          if (!definition.wid) {\n            definition.wid = dashboard.id();\n          }\n\n          // pass copy of widget to scope\n          $scope.widget = angular.copy(w);\n\n          // create config object\n          var config = definition.config;\n          if (config) {\n            if (angular.isString(config)) {\n              config = angular.fromJson(config);\n            }\n          } else {\n            config = {};\n          }\n\n          // pass config to scope\n          $scope.config = config;\n\n          // collapse exposed $scope.widgetState property\n          if (!$scope.widgetState) {\n            $scope.widgetState = {};\n            $scope.widgetState.isCollapsed= (w.collapsed === true) ? w.collapsed : false;\n          }\n\n        } else {\n          $log.warn('could not find widget ' + definition.type);\n        }\n      } else {\n        $log.debug('definition not specified, widget was probably removed');\n      }\n    }\n\n    function postLink($scope, $element) {\n      var definition = $scope.definition;\n      if (definition) {\n        // bind close function\n\n        var deleteWidget = function() {\n          var column = $scope.col;\n          if (column) {\n            var index = column.widgets.indexOf(definition);\n            if (index >= 0) {\n              column.widgets.splice(index, 1);\n            }\n          }\n          $element.remove();\n          $rootScope.$broadcast('adfWidgetRemovedFromColumn', definition);\n        };\n\n        $scope.remove = function() {\n          if ($scope.options.enableConfirmDelete) {\n            var deleteScope = $scope.$new();\n            deleteScope.translate = dashboard.translate;\n\n            var deleteTemplateUrl = adfTemplatePath + 'widget-delete.html';\n            if (definition.deleteTemplateUrl) {\n              deleteTemplateUrl = definition.deleteTemplateUrl;\n            }\n            var opts = {\n              scope: deleteScope,\n              templateUrl: deleteTemplateUrl,\n              windowClass: 'adf-remove-widget-modal',\n              backdrop: 'static'\n            };\n            var instance = $uibModal.open(opts);\n\n            deleteScope.closeDialog = function() {\n              instance.close();\n              deleteScope.$destroy();\n            };\n            deleteScope.deleteDialog = function() {\n              deleteWidget();\n              deleteScope.closeDialog();\n            };\n          } else {\n            deleteWidget();\n          }\n        };\n\n        // bind reload function\n        $scope.reload = function() {\n          $scope.$broadcast('widgetReload');\n        };\n\n        // bind edit function\n        $scope.edit = function() {\n          var editScope = $scope.$new();\n          editScope.translate = dashboard.translate;\n          editScope.definition = angular.copy(definition);\n\n          var adfEditTemplatePath = adfTemplatePath + 'widget-edit.html';\n          if (definition.editTemplateUrl) {\n            adfEditTemplatePath = definition.editTemplateUrl;\n          }\n\n          var opts = {\n            scope: editScope,\n            templateUrl: adfEditTemplatePath,\n            windowClass: 'adf-edit-widget-modal',\n            backdrop: 'static'\n          };\n\n          var instance = $uibModal.open(opts);\n\n          editScope.closeDialog = function() {\n            instance.close();\n            editScope.$destroy();\n          };\n\n          // TODO create util method\n          function createApplyPromise(result){\n            var promise;\n            if (typeof result === 'boolean'){\n              var deferred = $q.defer();\n              if (result){\n                deferred.resolve();\n              } else {\n                deferred.reject();\n              }\n              promise = deferred.promise;\n            } else {\n              promise = $q.when(result);\n            }\n            return promise;\n          }\n\n          editScope.saveDialog = function() {\n            // clear validation error\n            editScope.validationError = null;\n\n            // build injection locals\n            var widget = $scope.widget;\n\n            // create a default apply method for widgets\n            // without edit mode\n            // see issue https://goo.gl/KHPQLZ\n            var applyFn;\n            if (widget.edit){\n              applyFn = widget.edit.apply;\n            } else {\n              applyFn = function(){\n                return true;\n              };\n            }\n\n            // injection locals\n            var locals = {\n              widget: widget,\n              definition: editScope.definition,\n              config: editScope.definition.config\n            };\n\n            // invoke apply function and apply if success\n            var result = $injector.invoke(applyFn, applyFn, locals);\n            createApplyPromise(result).then(function(){\n              definition.title = editScope.definition.title;\n              angular.extend(definition.config, editScope.definition.config);\n              if (widget.edit && widget.edit.reload) {\n                // reload content after edit dialog is closed\n                $scope.$broadcast('widgetConfigChanged');\n              }\n              editScope.closeDialog();\n            }, function(err){\n              if (err){\n                editScope.validationError = err;\n              } else {\n                editScope.validationError = 'Validation durring apply failed';\n              }\n            });\n          };\n\n        };\n      } else {\n        $log.debug('widget not found');\n      }\n    }\n\n    function controller($scope){\n\n      $scope.$on('adfDashboardCollapseExpand', function(event, args) {\n        $scope.widgetState.isCollapsed = args.collapseExpandStatus;\n      });\n\n      $scope.$on('adfWidgetEnterEditMode', function(event, widget){\n        if (dashboard.idEquals($scope.definition.wid, widget.wid)){\n          $scope.edit();\n        }\n      });\n\n      $scope.widgetClasses = function(w, definition){\n        var classes = definition.styleClass || '';\n        // w is undefined, if the type of the widget is unknown\n        // see issue #216\n        if (!w || !w.frameless || $scope.editMode){\n          classes += ' panel panel-default';\n        }\n        return classes;\n      };\n\n      $scope.openFullScreen = function() {\n        var definition = $scope.definition;\n        var fullScreenScope = $scope.$new();\n        var opts = {\n          scope: fullScreenScope,\n          templateUrl: adfTemplatePath + 'widget-fullscreen.html',\n          size: definition.modalSize || 'lg', // 'sm', 'lg'\n          backdrop: 'static',\n          windowClass: (definition.fullScreen) ? 'dashboard-modal widget-fullscreen' : 'dashboard-modal'\n        };\n\n        var instance = $uibModal.open(opts);\n        fullScreenScope.closeDialog = function() {\n          instance.close();\n          fullScreenScope.$destroy();\n        };\n      };\n    }\n\n  }]);\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\nangular.module('adf')\n  .directive('adfWidgetContent', [\"$log\", \"$q\", \"widgetService\", \"$compile\", \"$controller\", \"$injector\", \"dashboard\", function($log, $q, widgetService, $compile, $controller, $injector, dashboard) {\n\n    return {\n      replace: true,\n      restrict: 'EA',\n      transclude: false,\n      scope: {\n        adfModel: '=',\n        model: '=',\n        content: '='\n      },\n      link: link\n    };\n\n    function renderError($element, msg){\n        $log.warn(msg);\n        $element.html(dashboard.messageTemplate.replace(/{}/g, msg));\n    }\n\n    function compileWidget($scope, $element, currentScope) {\n      var model = $scope.model;\n      var content = $scope.content;\n\n      var newScope = currentScope;\n      if (!model){\n        renderError($element, 'model is undefined')\n      } else if (!content){\n        var msg = 'widget content is undefined, please have a look at your browser log';\n        renderError($element, msg);\n      } else {\n        newScope = renderWidget($scope, $element, currentScope, model, content);\n      }\n      return newScope;\n    }\n\n    function renderWidget($scope, $element, currentScope, model, content) {\n      // display loading template\n      $element.html(dashboard.loadingTemplate);\n\n      // create new scope\n      var templateScope = $scope.$new();\n\n      // pass config object to scope\n      if (!model.config) {\n        model.config = {};\n      }\n\n      templateScope.config = model.config;\n\n      // local injections\n      var base = {\n        $scope: templateScope,\n        widget: model,\n        config: model.config\n      };\n\n      // get resolve promises from content object\n      var resolvers = {};\n      resolvers.$tpl = widgetService.getTemplate(content);\n      if (content.resolve) {\n        angular.forEach(content.resolve, function(promise, key) {\n          if (angular.isString(promise)) {\n            resolvers[key] = $injector.get(promise);\n          } else {\n            resolvers[key] = $injector.invoke(promise, promise, base);\n          }\n        });\n      }\n\n      // resolve all resolvers\n      $q.all(resolvers).then(function(locals) {\n        angular.extend(locals, base);\n\n        // pass resolve map to template scope as defined in resolveAs\n        if (content.resolveAs){\n          templateScope[content.resolveAs] = locals;\n        }\n\n        // compile & render template\n        var template = locals.$tpl;\n        $element.html(template);\n        if (content.controller) {\n          var templateCtrl = $controller(content.controller, locals);\n          if (content.controllerAs) {\n            templateScope[content.controllerAs] = templateCtrl;\n          }\n          $element.children().data('$ngControllerController', templateCtrl);\n        }\n        $compile($element.contents())(templateScope);\n      }, function(reason) {\n        // handle promise rejection\n        var msg = 'Could not resolve all promises';\n        if (reason) {\n          msg += ': ' + reason;\n        }\n        renderError($element, msg);\n      });\n\n      // destroy old scope\n      if (currentScope) {\n        currentScope.$destroy();\n      }\n\n      return templateScope;\n    }\n\n    function link($scope, $element) {\n      var currentScope = compileWidget($scope, $element, null);\n      $scope.$on('widgetConfigChanged', function() {\n        currentScope = compileWidget($scope, $element, currentScope);\n      });\n      $scope.$on('widgetReload', function() {\n        currentScope = compileWidget($scope, $element, currentScope);\n      });\n    }\n\n  }]);\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\n/* global angular */\nangular.module('adf')\n  .directive('adfStructurePreview', [\"adfTemplatePath\", \"adfStructurePreviewService\", function(adfTemplatePath, adfStructurePreviewService) {\n\n    return {\n      restrict: 'E',\n      replace: true,\n      scope: {\n        name: '=',\n        structure: '=',\n        selected: '='\n      },\n      templateUrl: adfTemplatePath + 'structure-preview.html',\n      link: link\n    };\n\n    function link($scope){\n      var structure = angular.copy($scope.structure);\n      adfStructurePreviewService.adjustRowHeight(structure);\n      $scope.preview = structure;\n    }\n\n  }]);\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/**\n * @ngdoc directive\n * @name adf.directive:adfDashboard\n * @element div\n * @restrict EA\n * @scope\n * @description\n *\n * `adfDashboard` is a directive which renders the dashboard with all its\n * components. The directive requires a name attribute. The name of the\n * dashboard can be used to store the model.\n *\n * @param {string} name name of the dashboard. This attribute is required.\n * @param {boolean=} editable false to disable the editmode of the dashboard.\n * @param {boolean=} collapsible true to make widgets collapsible on the dashboard.\n * @param {boolean=} maximizable true to add a button for open widgets in a large modal panel.\n * @param {boolean=} enableConfirmDelete true to ask before remove an widget from the dashboard.\n * @param {string=} structure the default structure of the dashboard.\n * @param {object=} adfModel model object of the dashboard.\n * @param {object=} adfAddWidgetModalOptions options to provide to the add-widget modal\n * @param {function=} adfWidgetFilter function to filter widgets on the add dialog.\n * @param {boolean=} continuousEditMode enable continuous edit mode, to fire add/change/remove\n *                   events during edit mode not reset it if edit mode is exited.\n * @param {boolean=} categories enable categories for the add widget dialog.\n */\n\nangular.module('adf')\n  .directive('adfDashboard', [\"$rootScope\", \"$log\", \"$timeout\", \"$uibModal\", \"dashboard\", \"adfTemplatePath\", \"adfDashboardService\", \"adfUtilsService\", function ($rootScope, $log, $timeout, $uibModal, dashboard, adfTemplatePath, adfDashboardService, adfUtilsService) {\n    \n\n    controller.$inject = [\"$scope\"];\n    return {\n      replace: true,\n      restrict: 'EA',\n      transclude : false,\n      scope: {\n        structure: '@',\n        name: '@',\n        collapsible: '@',\n        editable: '@',\n        editMode: '@',\n        continuousEditMode: '=',\n        maximizable: '@',\n        adfModel: '=',\n        adfAddWidgetModalOptions: '=',\n        adfWidgetFilter: '=',\n        categories: '@'\n      },\n      controller: controller,\n      link: link,\n      templateUrl: adfTemplatePath + 'dashboard.html'\n    };\n\n    /**\n     * Opens the edit mode of the specified widget.\n     *\n     * @param dashboard scope\n     * @param widget\n     */\n    function _openEditMode($scope, widget){\n      // wait some time before fire enter edit mode event\n      $timeout(function(){\n        $scope.$broadcast('adfWidgetEnterEditMode', widget);\n      }, 200);\n    }\n\n    /**\n     * Directive controller function.\n     *\n     * @param dashboard scope\n     */\n    function controller($scope){\n      var model = {};\n      var structure = {};\n      var widgetFilter = null;\n      var structureName = {};\n      var name = $scope.name;\n\n      // Watching for changes on adfModel\n      $scope.$watch('adfModel', function(oldVal, newVal) {\n       // has model changed or is the model attribute not set\n       if (newVal !== null || (oldVal === null && newVal === null)) {\n         model = $scope.adfModel;\n         widgetFilter = $scope.adfWidgetFilter;\n         if ( ! model || ! model.rows ){\n           structureName = $scope.structure;\n           structure = dashboard.structures[structureName];\n           if (structure){\n             if (model){\n               model.rows = angular.copy(structure).rows;\n             } else {\n               model = angular.copy(structure);\n             }\n             model.structure = structureName;\n           } else {\n             $log.error( 'could not find structure ' + structureName);\n           }\n         }\n\n         if (model) {\n           if (!model.title){\n             model.title = 'Dashboard';\n           }\n           if (!model.titleTemplateUrl) {\n             model.titleTemplateUrl = adfTemplatePath + 'dashboard-title.html';\n           }\n           $scope.model = model;\n         } else {\n           $log.error('could not find or create model');\n         }\n       }\n      }, true);\n\n      // edit mode\n      $scope.editMode = false;\n      $scope.editClass = '';\n\n      //passs translate function from dashboard so we can translate labels inside html templates\n      $scope.translate = dashboard.translate;\n\n      function getNewModalScope() {\n       var scope = $scope.$new();\n       //pass translate function to the new scope so we can translate the labels inside the modal dialog\n       scope.translate = dashboard.translate;\n       return scope;\n      }\n\n      $scope.toggleEditMode = function(){\n       $scope.editMode = ! $scope.editMode;\n       if ($scope.editMode){\n         if (!$scope.continuousEditMode) {\n           $scope.modelCopy = angular.copy($scope.adfModel, {});\n           $rootScope.$broadcast('adfIsEditMode');\n         }\n       }\n\n       if (!$scope.editMode){\n         $rootScope.$broadcast('adfDashboardChanged', name, model);\n       }\n      };\n\n      $scope.$on('adfToggleEditMode', function() {\n         $scope.toggleEditMode();\n      });\n\n      $scope.collapseAll = function(collapseExpandStatus){\n       $rootScope.$broadcast('adfDashboardCollapseExpand',{collapseExpandStatus : collapseExpandStatus});\n      };\n\n      $scope.cancelEditMode = function(){\n       $scope.editMode = false;\n       if (!$scope.continuousEditMode) {\n         $scope.modelCopy = angular.copy($scope.modelCopy, $scope.adfModel);\n       }\n       $rootScope.$broadcast('adfDashboardEditsCancelled');\n      };\n\n      // edit dashboard settings\n      $scope.editDashboardDialog = function(){\n       var editDashboardScope = getNewModalScope();\n       // create a copy of the title, to avoid changing the title to\n       // \"dashboard\" if the field is empty\n       editDashboardScope.copy = {\n         title: model.title\n       };\n\n       // pass dashboard structure to scope\n       editDashboardScope.structures = dashboard.structures;\n\n       // pass split function to scope, to be able to display structures in multiple columns\n       editDashboardScope.split = adfUtilsService.split;\n\n       var adfEditTemplatePath = adfTemplatePath + 'dashboard-edit.html';\n       if(model.editTemplateUrl) {\n         adfEditTemplatePath = model.editTemplateUrl;\n       }\n       var instance = $uibModal.open({\n         scope: editDashboardScope,\n         templateUrl: adfEditTemplatePath,\n         backdrop: 'static',\n         windowClass: 'adf-edit-dashboard-modal',\n         size: 'lg'\n       });\n       editDashboardScope.changeStructure = function(name, structure){\n         $log.info('change structure to ' + name);\n         adfDashboardService.changeStructure(model, structure);\n         if (model.structure !== name){\n           model.structure = name;\n         }\n         $rootScope.$broadcast('adfDashboardStructureChange');\n       };\n       editDashboardScope.closeDialog = function(){\n         // copy the new title back to the model\n         model.title = editDashboardScope.copy.title;\n         // close modal and destroy the scope\n         instance.close();\n         editDashboardScope.$destroy();\n       };\n      };\n\n      // add widget dialog\n      $scope.addWidgetDialog = function(){\n       var addScope = getNewModalScope();\n       var model = $scope.model;\n       var widgets;\n       if (angular.isFunction(widgetFilter)){\n         widgets = {};\n         angular.forEach(dashboard.widgets, function(widget, type){\n           if (widgetFilter(widget, type, model)){\n             widgets[type] = widget;\n           }\n         });\n       } else {\n         widgets = dashboard.widgets;\n       }\n       addScope.widgets = widgets;\n\n       //pass translate function to the new scope so we can translate the labels inside the modal dialog\n       addScope.translate = $scope.translate;\n\n       // pass createCategories function to scope, if categories option is enabled\n       if ($scope.options.categories){\n         $scope.createCategories = adfDashboardService.createCategories;\n       }\n\n       var adfAddTemplatePath = adfTemplatePath + 'widget-add.html';\n       if(model.addTemplateUrl) {\n         adfAddTemplatePath = model.addTemplateUrl;\n       }\n\n       var opts = {\n         scope: addScope,\n         templateUrl: adfAddTemplatePath,\n         windowClass: 'adf-add-widget-modal',\n         backdrop: 'static'\n       };\n\n       if (angular.isDefined($scope.adfAddWidgetModalOptions)) {\n          opts = angular.merge(opts, $scope.adfAddWidgetModalOptions);\n       }\n\n       var instance = $uibModal.open(opts);\n       addScope.addWidget = function(widget){\n         var w = {\n           type: widget,\n           config: adfDashboardService.createConfiguration(widget)\n         };\n         adfDashboardService.addNewWidgetToModel(model, w, name);\n         // close and destroy\n         instance.close();\n         addScope.$destroy();\n\n         // check for open edit mode immediately\n         if (adfDashboardService.isEditModeImmediate(widget)){\n           _openEditMode($scope, w);\n         }\n       };\n       addScope.closeDialog = function(){\n         // close and destroy\n         instance.close();\n         addScope.$destroy();\n       };\n      };\n\n      $scope.addNewWidgetToModel = adfDashboardService.addNewWidgetToModel;\n    }\n\n    /**\n     * Directive link function.\n     *\n     * @param dashboard scope\n     * @param directive DOM element\n     * @param directive attributes\n     */\n    function link($scope, $element, $attr) {\n      // pass options to scope\n      var options = {\n        name: $attr.name,\n        editable: true,\n        enableConfirmDelete: adfUtilsService.stringToBoolean($attr.enableConfirmDelete),\n        maximizable: adfUtilsService.stringToBoolean($attr.maximizable),\n        collapsible: adfUtilsService.stringToBoolean($attr.collapsible),\n        categories: adfUtilsService.stringToBoolean($attr.categories)\n      };\n      if (angular.isDefined($attr.editable)){\n        options.editable = adfUtilsService.stringToBoolean($attr.editable);\n      }\n      $scope.options = options;\n    }\n  }]);\n\n/*\n* The MIT License\n*\n* Copyright (c) 2015, Sebastian Sdorra\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in\n* all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\n\n/* global angular */\nangular.module('adf')\n  .directive('adfDashboardRow', [\"$compile\", \"adfTemplatePath\", \"columnTemplate\", function ($compile, adfTemplatePath, columnTemplate) {\n    \n\n    return {\n      restrict: 'E',\n      replace: true,\n      scope: {\n        row: '=',\n        adfModel: '=',\n        editMode: '=',\n        continuousEditMode: '=',\n        options: '='\n      },\n      templateUrl: adfTemplatePath + 'dashboard-row.html',\n      link: link\n    };\n\n    function link($scope, $element) {\n      if (angular.isDefined($scope.row.columns) && angular.isArray($scope.row.columns)) {\n        $compile(columnTemplate)($scope, function(cloned) {\n          $element.append(cloned);\n        });\n      }\n    }\n  }]);\n\n/*\n* The MIT License\n*\n* Copyright (c) 2015, Sebastian Sdorra\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in\n* all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\n\n/* global angular */\nangular.module('adf')\n  .directive('adfDashboardColumn', [\"$log\", \"$compile\", \"$rootScope\", \"adfTemplatePath\", \"rowTemplate\", \"dashboard\", function ($log, $compile, $rootScope, adfTemplatePath, rowTemplate, dashboard) {\n    \n\n    return {\n      restrict: 'E',\n      replace: true,\n      scope: {\n        column: '=',\n        editMode: '=',\n        continuousEditMode: '=',\n        adfModel: '=',\n        options: '='\n      },\n      templateUrl: adfTemplatePath + 'dashboard-column.html',\n      link: link\n    };\n\n    /**\n     * moves a widget in between a column\n     */\n    function moveWidgetInColumn($scope, column, evt){\n      var widgets = column.widgets;\n      // move widget and apply to scope\n      $scope.$apply(function(){\n        widgets.splice(evt.newIndex, 0, widgets.splice(evt.oldIndex, 1)[0]);\n        $rootScope.$broadcast('adfWidgetMovedInColumn');\n      });\n    }\n\n    /**\n     * finds a widget by its id in the column\n     */\n    function findWidget(column, index){\n      var widget = null;\n      for (var i=0; i<column.widgets.length; i++){\n        var w = column.widgets[i];\n        if (dashboard.idEquals(w.wid,index)){\n          widget = w;\n          break;\n        }\n      }\n      return widget;\n    }\n\n    /**\n     * finds a column by its id in the model\n     */\n    function findColumn(model, index){\n      var column = null;\n      for (var i=0; i<model.rows.length; i++){\n        var r = model.rows[i];\n        for (var j=0; j<r.columns.length; j++){\n          var c = r.columns[j];\n          if (dashboard.idEquals(c.cid, index)){\n            column = c;\n            break;\n          } else if (c.rows){\n            column = findColumn(c, index);\n          }\n        }\n        if (column){\n          break;\n        }\n      }\n      return column;\n    }\n\n    /**\n     * get the adf id from an html element\n     */\n    function getId(el){\n      var id = el.getAttribute('adf-id');\n      return id ? id : '-1';\n    }\n\n    /**\n     * adds a widget to a column\n     */\n    function addWidgetToColumn($scope, model, targetColumn, evt){\n      // find source column\n      var cid = getId(evt.from);\n      var sourceColumn = findColumn(model, cid);\n\n      if (sourceColumn){\n        // find moved widget\n        var wid = getId(evt.item);\n        var widget = findWidget(sourceColumn, wid);\n\n        if (widget){\n          // add new item and apply to scope\n          $scope.$apply(function(){\n            if (!targetColumn.widgets) {\n              targetColumn.widgets = [];\n            }\n            targetColumn.widgets.splice(evt.newIndex, 0, widget);\n\n            $rootScope.$broadcast('adfWidgetAddedToColumn');\n          });\n        } else {\n          $log.warn('could not find widget with id ' + wid);\n        }\n      } else {\n        $log.warn('could not find column with id ' + cid);\n      }\n    }\n\n    /**\n     * removes a widget from a column\n     */\n    function removeWidgetFromColumn($scope, column, evt){\n      // remove old item and apply to scope\n      $scope.$apply(function(){\n        column.widgets.splice(evt.oldIndex, 1);\n        $rootScope.$broadcast('adfWidgetRemovedFromColumn');\n      });\n    }\n\n    /**\n     * enable sortable\n     */\n    function applySortable($scope, $element, model, column){\n      // enable drag and drop\n      var el = $element[0];\n      var sortable = Sortable.create(el, {\n        group: 'widgets',\n        handle: '.adf-move',\n        ghostClass: 'placeholder',\n        animation: 150,\n        onAdd: function(evt){\n          addWidgetToColumn($scope, model, column, evt);\n        },\n        onRemove: function(evt){\n          removeWidgetFromColumn($scope, column, evt);\n        },\n        onUpdate: function(evt){\n          moveWidgetInColumn($scope, column, evt);\n        }\n      });\n\n      // destroy sortable on column destroy event\n      $element.on('$destroy', function () {\n        // check sortable element, before calling destroy\n        // see https://github.com/sdorra/angular-dashboard-framework/issues/118\n        if (sortable.el){\n          sortable.destroy();\n        }\n      });\n    }\n\n    function link($scope, $element) {\n      // set id\n      var col = $scope.column;\n      if (!col.cid){\n        col.cid = dashboard.id();\n      }\n\n      if (angular.isDefined(col.rows) && angular.isArray(col.rows)) {\n        // be sure to tell Angular about the injected directive and push the new row directive to the column\n        $compile(rowTemplate)($scope, function(cloned) {\n          $element.append(cloned);\n        });\n      } else {\n        // enable drag and drop for widget only columns\n        applySortable($scope, $element, $scope.adfModel, col);\n      }\n    }\n\n  }]);\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\n/**\n * @ngdoc object\n * @name adf.dashboardProvider\n * @description\n *\n * The dashboardProvider can be used to register structures and widgets.\n */\nangular.module('adf.provider', ['adf.locale'])\n  .provider('dashboard', [\"adfLocale\", function(adfLocale){\n\n    var widgets = {};\n    var widgetsPath = '';\n    var structures = {};\n    var messageTemplate = '<div class=\"alert alert-danger\">{}</div>';\n    var loadingTemplate = '\\\n      <div class=\"progress progress-striped active\">\\n\\\n        <div class=\"progress-bar\" role=\"progressbar\" style=\"width: 100%\">\\n\\\n          <span class=\"sr-only\">loading ...</span>\\n\\\n        </div>\\n\\\n      </div>';\n    var customWidgetTemplatePath = null;\n\n    // default apply function of widget.edit.apply\n    var defaultApplyFunction = function(){\n      return true;\n    };\n\n    var activeLocale = adfLocale.defaultLocale;\n    var locales = adfLocale.frameworkLocales;\n\n    function getLocales() {\n      return locales;\n    }\n\n    function getActiveLocale() {\n      return activeLocale;\n    }\n\n    function translate(label) {\n      var translation = locales[activeLocale][label];\n      return translation ? translation : label;\n    }\n\n   /**\n    * @ngdoc method\n    * @name adf.dashboardProvider#widget\n    * @methodOf adf.dashboardProvider\n    * @description\n    *\n    * Registers a new widget.\n    *\n    * @param {string} name of the widget\n    * @param {object} widget to be registered.\n    *\n    *   Object properties:\n    *\n    *   - `title` - `{string=}` - The title of the widget.\n    *   - `description` - `{string=}` - Description of the widget.\n    *   - `category` - `{string=}` - Category of the widget.\n    *   - `collapsed` - `{boolean=}` - true if the widget should be in collapsed state. Default is false.\n    *   - `config` - `{object}` - Predefined widget configuration.\n    *   - `controller` - `{string=|function()=}` - Controller fn that should be\n    *      associated with newly created scope of the widget or the name of a\n    *      {@link http://docs.angularjs.org/api/angular.Module#controller registered controller}\n    *      if passed as a string.\n    *   - `controllerAs` - `{string=}` - A controller alias name. If present the controller will be\n    *      published to scope under the `controllerAs` name.\n    *   - `frameless` - `{boolean=}` - false if the widget should be shown in frameless mode. The default is false.\n    *   - `styleClass` - `{object}` - space delimited string or map of classes bound to the widget.\n    *   - `template` - `{string=|function()=}` - html template as a string.\n    *   - `templateUrl` - `{string=}` - path to an html template.\n    *   - `reload` - `{boolean=}` - true if the widget could be reloaded. The default is false.\n    *   - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\n    *      be injected into the controller. If any of these dependencies are promises, the widget\n    *      will wait for them all to be resolved or one to be rejected before the controller is\n    *      instantiated.\n    *      If all the promises are resolved successfully, the values of the resolved promises are\n    *      injected.\n    *\n    *      The map object is:\n    *      - `key` – `{string}`: a name of a dependency to be injected into the controller.\n    *      - `factory` - `{string|function}`: If `string` then it is an alias for a service.\n    *        Otherwise if function, then it is {@link http://docs.angularjs.org/api/AUTO.$injector#invoke injected}\n    *        and the return value is treated as the dependency. If the result is a promise, it is\n    *        resolved before its value is injected into the controller.\n    *   - `resolveAs` - `{string=}` - The name under which the resolve map will be available\n    *      on the scope of the widget.\n    *   - `edit` - `{object}` - Edit modus of the widget.\n    *      - `controller` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\n    *      - `controllerAs` - `{string=}` - Same as above, but for the edit mode of the widget.\n    *      - `template` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\n    *      - `templateUrl` - `{string=}` - Same as above, but for the edit mode of the widget.\n    *      - `resolve` - `{Object.<string, function>=}` - Same as above, but for the edit mode of the widget.\n    *      - `resolveAs` - `{string=}` - The name under which the resolve map will be available\n    *        on the scope of the widget.\n    *      - `reload` - {boolean} - true if the widget should be reloaded, after the edit mode is closed.\n    *        Default is true.\n    *      - `immediate` - {boolean} - The widget enters the edit mode immediately after creation. Default is false.\n    *      - `apply` - `{function()=}` - The apply function is called, before the widget is saved.\n    *        The function have to return a boolean or an promise which can be resolved to a boolean.\n    *        The function can use injection.\n    *\n    * @returns {Object} self\n    */\n    this.widget = function(name, widget){\n      var w = angular.extend({reload: false, frameless: false}, widget);\n      if ( w.edit ){\n        var edit = {\n          reload: true,\n          immediate: false,\n          apply: defaultApplyFunction\n        };\n        angular.extend(edit, w.edit);\n        w.edit = edit;\n      }\n      widgets[name] = w;\n      return this;\n    };\n\n    /**\n     * @ngdoc method\n     * @name adf.dashboardProvider#widgetsPath\n     * @methodOf adf.dashboardProvider\n     * @description\n     *\n     * Sets the path to the directory which contains the widgets. The widgets\n     * path is used for widgets with a templateUrl which contains the\n     * placeholder {widgetsPath}. The placeholder is replaced with the\n     * configured value, before the template is loaded, but the template is\n     * cached with the unmodified templateUrl (e.g.: {widgetPath}/src/widgets).\n     * The default value of widgetPaths is ''.\n     *\n     *\n     * @param {string} path to the directory which contains the widgets\n     *\n     * @returns {Object} self\n     */\n    this.widgetsPath = function(path){\n      widgetsPath = path;\n      return this;\n    };\n\n   /**\n    * @ngdoc method\n    * @name adf.dashboardProvider#structure\n    * @methodOf adf.dashboardProvider\n    * @description\n    *\n    * Registers a new structure.\n    *\n    * @param {string} name of the structure\n    * @param {object} structure to be registered.\n    *\n    *   Object properties:\n    *\n    *   - `rows` - `{Array.<Object>}` - Rows of the dashboard structure.\n    *     - `styleClass` - `{string}` - CSS Class of the row.\n    *     - `columns` - `{Array.<Object>}` - Columns of the row.\n    *       - `styleClass` - `{string}` - CSS Class of the column.\n    *\n    * @returns {Object} self\n    */\n    this.structure = function(name, structure){\n      structures[name] = structure;\n      return this;\n    };\n\n   /**\n    * @ngdoc method\n    * @name adf.dashboardProvider#messageTemplate\n    * @methodOf adf.dashboardProvider\n    * @description\n    *\n    * Changes the template for messages.\n    *\n    * @param {string} template for messages.\n    *\n    * @returns {Object} self\n    */\n    this.messageTemplate = function(template){\n      messageTemplate = template;\n      return this;\n    };\n\n   /**\n    * @ngdoc method\n    * @name adf.dashboardProvider#loadingTemplate\n    * @methodOf adf.dashboardProvider\n    * @description\n    *\n    * Changes the template which is displayed as\n    * long as the widget resources are not resolved.\n    *\n    * @param {string} template loading template\n    *\n    * @returns {Object} self\n    */\n    this.loadingTemplate = function(template){\n      loadingTemplate = template;\n      return this;\n    };\n\n    /**\n     * @ngdoc method\n     * @name adf.dashboardProvider#customWidgetTemplatePath\n     * @propertyOf adf.dashboardProvider\n     * @description\n     *\n     * Changes the container template for the widgets\n     *\n     * @param {string} path to the custom widget template\n     *\n     * @returns {Object} self\n     */\n    this.customWidgetTemplatePath = function(templatePath) {\n      customWidgetTemplatePath = templatePath;\n      return this;\n    };\n\n    /**\n     * @ngdoc method\n     * @name adf.dashboardProvider#setLocale\n     * @methodOf adf.dashboardProvider\n     * @description\n     *\n     * Changes the locale setting of adf\n     *\n     * @param {string} ISO Language Code\n     *\n     * @returns {Object} self\n     */\n     this.setLocale = function(locale){\n       if(locales[locale]) {\n         activeLocale = locale;\n       } else {\n         throw new Error('Cannot set locale: ' + locale + '. Locale is not defined.');\n       }\n       return this;\n     };\n\n     /**\n      * @ngdoc method\n      * @name adf.dashboardProvider#addLocale\n      * @methodOf adf.dashboardProvider\n      * @description\n      *\n      * Adds a new locale to adf\n      *\n      * @param {string} ISO Language Code for the new locale\n      * @param {object} translations for the locale.\n      *\n      * @returns {Object} self\n      */\n      this.addLocale = function(locale, translations){\n        if(!angular.isString(locale)) {\n          throw new Error('locale must be an string');\n        }\n\n        if(!angular.isObject(translations)) {\n          throw new Error('translations must be an object');\n        }\n\n        locales[locale] = translations;\n        return this;\n      };\n\n   /**\n    * @ngdoc service\n    * @name adf.dashboard\n    * @description\n    *\n    * The dashboard holds all options, structures and widgets.\n    *\n    * @property {Array.<Object>} widgets Array of registered widgets.\n    * @property {string} widgetsPath Default path for widgets.\n    * @property {Array.<Object>} structures Array of registered structures.\n    * @property {string} messageTemplate Template for messages.\n    * @property {string} loadingTemplate Template for widget loading.\n    * @property {method} sets locale of adf.\n    * @property {Array.<Object>} hold all of the locale translations.\n    * @property {string} the active locale setting.\n    * @property {method} translation function passed to templates.\n    *\n    * @returns {Object} self\n    */\n    this.$get = function(){\n      var cid = 0;\n\n      return {\n        widgets: widgets,\n        widgetsPath: widgetsPath,\n        structures: structures,\n        messageTemplate: messageTemplate,\n        loadingTemplate: loadingTemplate,\n        setLocale: this.setLocale,\n        locales: getLocales,\n        activeLocale: getActiveLocale,\n        translate: translate,\n        customWidgetTemplatePath: customWidgetTemplatePath,\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboard#id\n         * @methodOf adf.dashboard\n         * @description\n         *\n         * Creates an ongoing numeric id. The method is used to create ids for\n         * columns and widgets in the dashboard.\n         */\n        id: function(){\n          return new Date().getTime() + '-' + (++cid);\n        },\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboard#idEqual\n         * @methodOf adf.dashboard\n         * @description\n         *\n         * Checks if the given ids are equal.\n         *\n         * @param {string} id widget or column id\n         * @param {string} other widget or column id\n         */\n         idEquals: function(id, other){\n           // use toString, because old ids are numbers\n           return ((id) && (other)) && (id.toString() === other.toString());\n         }\n      };\n    };\n\n  }]);\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\nangular.module('adf.locale', [])\n\n/*\n* The MIT License\n*\n* Copyright (c) 2015, Sebastian Sdorra\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in\n* all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\n\n\n/**\n* @ngdoc object\n* @name adf.locale#adfLocale\n* @description\n*\n* Holds settings and values for framework supported locales\n*/\nangular.module('adf.locale')\n.constant('adfLocale',\n  {\n    defaultLocale: 'en-GB',\n    frameworkLocales: {\n      'en-GB': {\n        ADF_COMMON_CLOSE: 'Close',\n        ADF_COMMON_DELETE: 'Delete',\n        ADF_COMMON_TITLE: 'Title',\n        ADF_COMMON_CANCEL: 'Cancel',\n        ADF_COMMON_APPLY: 'Apply',\n        ADF_COMMON_EDIT_DASHBOARD: 'Edit dashboard',\n        ADF_EDIT_DASHBOARD_STRUCTURE_LABEL: 'Structure',\n        ADF_DASHBOARD_TITLE_TOOLTIP_ADD: 'Add new widget',\n        ADF_DASHBOARD_TITLE_TOOLTIP_SAVE: 'Save changes',\n        ADF_DASHBOARD_TITLE_TOOLTIP_EDIT_MODE: 'Enable edit mode',\n        ADF_DASHBOARD_TITLE_TOOLTIP_UNDO: 'Undo changes',\n        ADF_WIDGET_ADD_HEADER: 'Add new widget',\n        ADF_WIDGET_DELETE_CONFIRM_MESSAGE: 'Are you sure you want to delete this widget ?',\n        ADF_WIDGET_TOOLTIP_REFRESH: 'Reload widget Content',\n        ADF_WIDGET_TOOLTIP_MOVE: 'Change widget location',\n        ADF_WIDGET_TOOLTIP_COLLAPSE: 'Collapse widget',\n        ADF_WIDGET_TOOLTIP_EXPAND: 'Expand widget',\n        ADF_WIDGET_TOOLTIP_EDIT: 'Edit widget configuration',\n        ADF_WIDGET_TOOLTIP_FULLSCREEN: 'Fullscreen widget',\n        ADF_WIDGET_TOOLTIP_REMOVE: 'Remove widget'\n      },\n      'sv-SE': {\n        ADF_COMMON_CLOSE: 'Stäng',\n        ADF_COMMON_DELETE: 'Ta bort',\n        ADF_COMMON_TITLE: 'Titel',\n        ADF_COMMON_CANCEL: 'Avbryt',\n        ADF_COMMON_APPLY: 'Använd',\n        ADF_COMMON_EDIT_DASHBOARD: 'Redigera dashboard',\n        ADF_EDIT_DASHBOARD_STRUCTURE_LABEL: 'Struktur',\n        ADF_DASHBOARD_TITLE_TOOLTIP_ADD: 'Lägg till ny widget',\n        ADF_DASHBOARD_TITLE_TOOLTIP_SAVE: 'Spara förändringar',\n        ADF_DASHBOARD_TITLE_TOOLTIP_EDIT_MODE: 'Slå på redigeringsläge',\n        ADF_DASHBOARD_TITLE_TOOLTIP_UNDO: 'Ångra förändringar',\n        ADF_WIDGET_ADD_HEADER: 'Lägg till ny widget',\n        ADF_WIDGET_DELETE_CONFIRM_MESSAGE: 'Är du säker på att du vill ta bort denna widget ?',\n        ADF_WIDGET_TOOLTIP_REFRESH: 'Ladda om widget',\n        ADF_WIDGET_TOOLTIP_MOVE: 'Ändra widgets position',\n        ADF_WIDGET_TOOLTIP_COLLAPSE: 'Stäng widget',\n        ADF_WIDGET_TOOLTIP_EXPAND: 'Öppna widget',\n        ADF_WIDGET_TOOLTIP_EDIT: 'Ändra widget konfigurering',\n        ADF_WIDGET_TOOLTIP_FULLSCREEN: 'Visa widget i fullskärm',\n        ADF_WIDGET_TOOLTIP_REMOVE: 'Ta bort widget'\n      }\n    }\n  }\n);\n\n})(window);","/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\nangular.module('adf')\n  .directive('adfWidgetContent', function($log, $q, widgetService, $compile, $controller, $injector, dashboard) {\n\n    return {\n      replace: true,\n      restrict: 'EA',\n      transclude: false,\n      scope: {\n        adfModel: '=',\n        model: '=',\n        content: '='\n      },\n      link: link\n    };\n\n    function renderError($element, msg){\n        $log.warn(msg);\n        $element.html(dashboard.messageTemplate.replace(/{}/g, msg));\n    }\n\n    function compileWidget($scope, $element, currentScope) {\n      var model = $scope.model;\n      var content = $scope.content;\n\n      var newScope = currentScope;\n      if (!model){\n        renderError($element, 'model is undefined')\n      } else if (!content){\n        var msg = 'widget content is undefined, please have a look at your browser log';\n        renderError($element, msg);\n      } else {\n        newScope = renderWidget($scope, $element, currentScope, model, content);\n      }\n      return newScope;\n    }\n\n    function renderWidget($scope, $element, currentScope, model, content) {\n      // display loading template\n      $element.html(dashboard.loadingTemplate);\n\n      // create new scope\n      var templateScope = $scope.$new();\n\n      // pass config object to scope\n      if (!model.config) {\n        model.config = {};\n      }\n\n      templateScope.config = model.config;\n\n      // local injections\n      var base = {\n        $scope: templateScope,\n        widget: model,\n        config: model.config\n      };\n\n      // get resolve promises from content object\n      var resolvers = {};\n      resolvers.$tpl = widgetService.getTemplate(content);\n      if (content.resolve) {\n        angular.forEach(content.resolve, function(promise, key) {\n          if (angular.isString(promise)) {\n            resolvers[key] = $injector.get(promise);\n          } else {\n            resolvers[key] = $injector.invoke(promise, promise, base);\n          }\n        });\n      }\n\n      // resolve all resolvers\n      $q.all(resolvers).then(function(locals) {\n        angular.extend(locals, base);\n\n        // pass resolve map to template scope as defined in resolveAs\n        if (content.resolveAs){\n          templateScope[content.resolveAs] = locals;\n        }\n\n        // compile & render template\n        var template = locals.$tpl;\n        $element.html(template);\n        if (content.controller) {\n          var templateCtrl = $controller(content.controller, locals);\n          if (content.controllerAs) {\n            templateScope[content.controllerAs] = templateCtrl;\n          }\n          $element.children().data('$ngControllerController', templateCtrl);\n        }\n        $compile($element.contents())(templateScope);\n      }, function(reason) {\n        // handle promise rejection\n        var msg = 'Could not resolve all promises';\n        if (reason) {\n          msg += ': ' + reason;\n        }\n        renderError($element, msg);\n      });\n\n      // destroy old scope\n      if (currentScope) {\n        currentScope.$destroy();\n      }\n\n      return templateScope;\n    }\n\n    function link($scope, $element) {\n      var currentScope = compileWidget($scope, $element, null);\n      $scope.$on('widgetConfigChanged', function() {\n        currentScope = compileWidget($scope, $element, currentScope);\n      });\n      $scope.$on('widgetReload', function() {\n        currentScope = compileWidget($scope, $element, currentScope);\n      });\n    }\n\n  });\n","/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\n/* global angular */\nangular.module('adf')\n  .directive('adfStructurePreview', function(adfTemplatePath, adfStructurePreviewService) {\n\n    return {\n      restrict: 'E',\n      replace: true,\n      scope: {\n        name: '=',\n        structure: '=',\n        selected: '='\n      },\n      templateUrl: adfTemplatePath + 'structure-preview.html',\n      link: link\n    };\n\n    function link($scope){\n      var structure = angular.copy($scope.structure);\n      adfStructurePreviewService.adjustRowHeight(structure);\n      $scope.preview = structure;\n    }\n\n  });\n","/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/**\n * @ngdoc directive\n * @name adf.directive:adfDashboard\n * @element div\n * @restrict EA\n * @scope\n * @description\n *\n * `adfDashboard` is a directive which renders the dashboard with all its\n * components. The directive requires a name attribute. The name of the\n * dashboard can be used to store the model.\n *\n * @param {string} name name of the dashboard. This attribute is required.\n * @param {boolean=} editable false to disable the editmode of the dashboard.\n * @param {boolean=} collapsible true to make widgets collapsible on the dashboard.\n * @param {boolean=} maximizable true to add a button for open widgets in a large modal panel.\n * @param {boolean=} enableConfirmDelete true to ask before remove an widget from the dashboard.\n * @param {string=} structure the default structure of the dashboard.\n * @param {object=} adfModel model object of the dashboard.\n * @param {object=} adfAddWidgetModalOptions options to provide to the add-widget modal\n * @param {function=} adfWidgetFilter function to filter widgets on the add dialog.\n * @param {boolean=} continuousEditMode enable continuous edit mode, to fire add/change/remove\n *                   events during edit mode not reset it if edit mode is exited.\n * @param {boolean=} categories enable categories for the add widget dialog.\n */\n\nangular.module('adf')\n  .directive('adfDashboard', function ($rootScope, $log, $timeout, $uibModal, dashboard, adfTemplatePath, adfDashboardService, adfUtilsService) {\n    'use strict';\n\n    return {\n      replace: true,\n      restrict: 'EA',\n      transclude : false,\n      scope: {\n        structure: '@',\n        name: '@',\n        collapsible: '@',\n        editable: '@',\n        editMode: '@',\n        continuousEditMode: '=',\n        maximizable: '@',\n        adfModel: '=',\n        adfAddWidgetModalOptions: '=',\n        adfWidgetFilter: '=',\n        categories: '@'\n      },\n      controller: controller,\n      link: link,\n      templateUrl: adfTemplatePath + 'dashboard.html'\n    };\n\n    /**\n     * Opens the edit mode of the specified widget.\n     *\n     * @param dashboard scope\n     * @param widget\n     */\n    function _openEditMode($scope, widget){\n      // wait some time before fire enter edit mode event\n      $timeout(function(){\n        $scope.$broadcast('adfWidgetEnterEditMode', widget);\n      }, 200);\n    }\n\n    /**\n     * Directive controller function.\n     *\n     * @param dashboard scope\n     */\n    function controller($scope){\n      var model = {};\n      var structure = {};\n      var widgetFilter = null;\n      var structureName = {};\n      var name = $scope.name;\n\n      // Watching for changes on adfModel\n      $scope.$watch('adfModel', function(oldVal, newVal) {\n       // has model changed or is the model attribute not set\n       if (newVal !== null || (oldVal === null && newVal === null)) {\n         model = $scope.adfModel;\n         widgetFilter = $scope.adfWidgetFilter;\n         if ( ! model || ! model.rows ){\n           structureName = $scope.structure;\n           structure = dashboard.structures[structureName];\n           if (structure){\n             if (model){\n               model.rows = angular.copy(structure).rows;\n             } else {\n               model = angular.copy(structure);\n             }\n             model.structure = structureName;\n           } else {\n             $log.error( 'could not find structure ' + structureName);\n           }\n         }\n\n         if (model) {\n           if (!model.title){\n             model.title = 'Dashboard';\n           }\n           if (!model.titleTemplateUrl) {\n             model.titleTemplateUrl = adfTemplatePath + 'dashboard-title.html';\n           }\n           $scope.model = model;\n         } else {\n           $log.error('could not find or create model');\n         }\n       }\n      }, true);\n\n      // edit mode\n      $scope.editMode = false;\n      $scope.editClass = '';\n\n      //passs translate function from dashboard so we can translate labels inside html templates\n      $scope.translate = dashboard.translate;\n\n      function getNewModalScope() {\n       var scope = $scope.$new();\n       //pass translate function to the new scope so we can translate the labels inside the modal dialog\n       scope.translate = dashboard.translate;\n       return scope;\n      }\n\n      $scope.toggleEditMode = function(){\n       $scope.editMode = ! $scope.editMode;\n       if ($scope.editMode){\n         if (!$scope.continuousEditMode) {\n           $scope.modelCopy = angular.copy($scope.adfModel, {});\n           $rootScope.$broadcast('adfIsEditMode');\n         }\n       }\n\n       if (!$scope.editMode){\n         $rootScope.$broadcast('adfDashboardChanged', name, model);\n       }\n      };\n\n      $scope.$on('adfToggleEditMode', function() {\n         $scope.toggleEditMode();\n      });\n\n      $scope.collapseAll = function(collapseExpandStatus){\n       $rootScope.$broadcast('adfDashboardCollapseExpand',{collapseExpandStatus : collapseExpandStatus});\n      };\n\n      $scope.cancelEditMode = function(){\n       $scope.editMode = false;\n       if (!$scope.continuousEditMode) {\n         $scope.modelCopy = angular.copy($scope.modelCopy, $scope.adfModel);\n       }\n       $rootScope.$broadcast('adfDashboardEditsCancelled');\n      };\n\n      // edit dashboard settings\n      $scope.editDashboardDialog = function(){\n       var editDashboardScope = getNewModalScope();\n       // create a copy of the title, to avoid changing the title to\n       // \"dashboard\" if the field is empty\n       editDashboardScope.copy = {\n         title: model.title\n       };\n\n       // pass dashboard structure to scope\n       editDashboardScope.structures = dashboard.structures;\n\n       // pass split function to scope, to be able to display structures in multiple columns\n       editDashboardScope.split = adfUtilsService.split;\n\n       var adfEditTemplatePath = adfTemplatePath + 'dashboard-edit.html';\n       if(model.editTemplateUrl) {\n         adfEditTemplatePath = model.editTemplateUrl;\n       }\n       var instance = $uibModal.open({\n         scope: editDashboardScope,\n         templateUrl: adfEditTemplatePath,\n         backdrop: 'static',\n         windowClass: 'adf-edit-dashboard-modal',\n         size: 'lg'\n       });\n       editDashboardScope.changeStructure = function(name, structure){\n         $log.info('change structure to ' + name);\n         adfDashboardService.changeStructure(model, structure);\n         if (model.structure !== name){\n           model.structure = name;\n         }\n         $rootScope.$broadcast('adfDashboardStructureChange');\n       };\n       editDashboardScope.closeDialog = function(){\n         // copy the new title back to the model\n         model.title = editDashboardScope.copy.title;\n         // close modal and destroy the scope\n         instance.close();\n         editDashboardScope.$destroy();\n       };\n      };\n\n      // add widget dialog\n      $scope.addWidgetDialog = function(){\n       var addScope = getNewModalScope();\n       var model = $scope.model;\n       var widgets;\n       if (angular.isFunction(widgetFilter)){\n         widgets = {};\n         angular.forEach(dashboard.widgets, function(widget, type){\n           if (widgetFilter(widget, type, model)){\n             widgets[type] = widget;\n           }\n         });\n       } else {\n         widgets = dashboard.widgets;\n       }\n       addScope.widgets = widgets;\n\n       //pass translate function to the new scope so we can translate the labels inside the modal dialog\n       addScope.translate = $scope.translate;\n\n       // pass createCategories function to scope, if categories option is enabled\n       if ($scope.options.categories){\n         $scope.createCategories = adfDashboardService.createCategories;\n       }\n\n       var adfAddTemplatePath = adfTemplatePath + 'widget-add.html';\n       if(model.addTemplateUrl) {\n         adfAddTemplatePath = model.addTemplateUrl;\n       }\n\n       var opts = {\n         scope: addScope,\n         templateUrl: adfAddTemplatePath,\n         windowClass: 'adf-add-widget-modal',\n         backdrop: 'static'\n       };\n\n       if (angular.isDefined($scope.adfAddWidgetModalOptions)) {\n          opts = angular.merge(opts, $scope.adfAddWidgetModalOptions);\n       }\n\n       var instance = $uibModal.open(opts);\n       addScope.addWidget = function(widget){\n         var w = {\n           type: widget,\n           config: adfDashboardService.createConfiguration(widget)\n         };\n         adfDashboardService.addNewWidgetToModel(model, w, name);\n         // close and destroy\n         instance.close();\n         addScope.$destroy();\n\n         // check for open edit mode immediately\n         if (adfDashboardService.isEditModeImmediate(widget)){\n           _openEditMode($scope, w);\n         }\n       };\n       addScope.closeDialog = function(){\n         // close and destroy\n         instance.close();\n         addScope.$destroy();\n       };\n      };\n\n      $scope.addNewWidgetToModel = adfDashboardService.addNewWidgetToModel;\n    }\n\n    /**\n     * Directive link function.\n     *\n     * @param dashboard scope\n     * @param directive DOM element\n     * @param directive attributes\n     */\n    function link($scope, $element, $attr) {\n      // pass options to scope\n      var options = {\n        name: $attr.name,\n        editable: true,\n        enableConfirmDelete: adfUtilsService.stringToBoolean($attr.enableConfirmDelete),\n        maximizable: adfUtilsService.stringToBoolean($attr.maximizable),\n        collapsible: adfUtilsService.stringToBoolean($attr.collapsible),\n        categories: adfUtilsService.stringToBoolean($attr.categories)\n      };\n      if (angular.isDefined($attr.editable)){\n        options.editable = adfUtilsService.stringToBoolean($attr.editable);\n      }\n      $scope.options = options;\n    }\n  });\n","/*\n* The MIT License\n*\n* Copyright (c) 2015, Sebastian Sdorra\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in\n* all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\n\n/* global angular */\nangular.module('adf')\n  .directive('adfDashboardRow', function ($compile, adfTemplatePath, columnTemplate) {\n    'use strict';\n\n    return {\n      restrict: 'E',\n      replace: true,\n      scope: {\n        row: '=',\n        adfModel: '=',\n        editMode: '=',\n        continuousEditMode: '=',\n        options: '='\n      },\n      templateUrl: adfTemplatePath + 'dashboard-row.html',\n      link: link\n    };\n\n    function link($scope, $element) {\n      if (angular.isDefined($scope.row.columns) && angular.isArray($scope.row.columns)) {\n        $compile(columnTemplate)($scope, function(cloned) {\n          $element.append(cloned);\n        });\n      }\n    }\n  });\n","/*\n* The MIT License\n*\n* Copyright (c) 2015, Sebastian Sdorra\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in\n* all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\n\n/* global angular */\nangular.module('adf')\n  .directive('adfDashboardColumn', function ($log, $compile, $rootScope, adfTemplatePath, rowTemplate, dashboard) {\n    'use strict';\n\n    return {\n      restrict: 'E',\n      replace: true,\n      scope: {\n        column: '=',\n        editMode: '=',\n        continuousEditMode: '=',\n        adfModel: '=',\n        options: '='\n      },\n      templateUrl: adfTemplatePath + 'dashboard-column.html',\n      link: link\n    };\n\n    /**\n     * moves a widget in between a column\n     */\n    function moveWidgetInColumn($scope, column, evt){\n      var widgets = column.widgets;\n      // move widget and apply to scope\n      $scope.$apply(function(){\n        widgets.splice(evt.newIndex, 0, widgets.splice(evt.oldIndex, 1)[0]);\n        $rootScope.$broadcast('adfWidgetMovedInColumn');\n      });\n    }\n\n    /**\n     * finds a widget by its id in the column\n     */\n    function findWidget(column, index){\n      var widget = null;\n      for (var i=0; i<column.widgets.length; i++){\n        var w = column.widgets[i];\n        if (dashboard.idEquals(w.wid,index)){\n          widget = w;\n          break;\n        }\n      }\n      return widget;\n    }\n\n    /**\n     * finds a column by its id in the model\n     */\n    function findColumn(model, index){\n      var column = null;\n      for (var i=0; i<model.rows.length; i++){\n        var r = model.rows[i];\n        for (var j=0; j<r.columns.length; j++){\n          var c = r.columns[j];\n          if (dashboard.idEquals(c.cid, index)){\n            column = c;\n            break;\n          } else if (c.rows){\n            column = findColumn(c, index);\n          }\n        }\n        if (column){\n          break;\n        }\n      }\n      return column;\n    }\n\n    /**\n     * get the adf id from an html element\n     */\n    function getId(el){\n      var id = el.getAttribute('adf-id');\n      return id ? id : '-1';\n    }\n\n    /**\n     * adds a widget to a column\n     */\n    function addWidgetToColumn($scope, model, targetColumn, evt){\n      // find source column\n      var cid = getId(evt.from);\n      var sourceColumn = findColumn(model, cid);\n\n      if (sourceColumn){\n        // find moved widget\n        var wid = getId(evt.item);\n        var widget = findWidget(sourceColumn, wid);\n\n        if (widget){\n          // add new item and apply to scope\n          $scope.$apply(function(){\n            if (!targetColumn.widgets) {\n              targetColumn.widgets = [];\n            }\n            targetColumn.widgets.splice(evt.newIndex, 0, widget);\n\n            $rootScope.$broadcast('adfWidgetAddedToColumn');\n          });\n        } else {\n          $log.warn('could not find widget with id ' + wid);\n        }\n      } else {\n        $log.warn('could not find column with id ' + cid);\n      }\n    }\n\n    /**\n     * removes a widget from a column\n     */\n    function removeWidgetFromColumn($scope, column, evt){\n      // remove old item and apply to scope\n      $scope.$apply(function(){\n        column.widgets.splice(evt.oldIndex, 1);\n        $rootScope.$broadcast('adfWidgetRemovedFromColumn');\n      });\n    }\n\n    /**\n     * enable sortable\n     */\n    function applySortable($scope, $element, model, column){\n      // enable drag and drop\n      var el = $element[0];\n      var sortable = Sortable.create(el, {\n        group: 'widgets',\n        handle: '.adf-move',\n        ghostClass: 'placeholder',\n        animation: 150,\n        onAdd: function(evt){\n          addWidgetToColumn($scope, model, column, evt);\n        },\n        onRemove: function(evt){\n          removeWidgetFromColumn($scope, column, evt);\n        },\n        onUpdate: function(evt){\n          moveWidgetInColumn($scope, column, evt);\n        }\n      });\n\n      // destroy sortable on column destroy event\n      $element.on('$destroy', function () {\n        // check sortable element, before calling destroy\n        // see https://github.com/sdorra/angular-dashboard-framework/issues/118\n        if (sortable.el){\n          sortable.destroy();\n        }\n      });\n    }\n\n    function link($scope, $element) {\n      // set id\n      var col = $scope.column;\n      if (!col.cid){\n        col.cid = dashboard.id();\n      }\n\n      if (angular.isDefined(col.rows) && angular.isArray(col.rows)) {\n        // be sure to tell Angular about the injected directive and push the new row directive to the column\n        $compile(rowTemplate)($scope, function(cloned) {\n          $element.append(cloned);\n        });\n      } else {\n        // enable drag and drop for widget only columns\n        applySortable($scope, $element, $scope.adfModel, col);\n      }\n    }\n\n  });\n","/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\n/**\n * @ngdoc object\n * @name adf.dashboardProvider\n * @description\n *\n * The dashboardProvider can be used to register structures and widgets.\n */\nangular.module('adf.provider', ['adf.locale'])\n  .provider('dashboard', function(adfLocale){\n\n    var widgets = {};\n    var widgetsPath = '';\n    var structures = {};\n    var messageTemplate = '<div class=\"alert alert-danger\">{}</div>';\n    var loadingTemplate = '\\\n      <div class=\"progress progress-striped active\">\\n\\\n        <div class=\"progress-bar\" role=\"progressbar\" style=\"width: 100%\">\\n\\\n          <span class=\"sr-only\">loading ...</span>\\n\\\n        </div>\\n\\\n      </div>';\n    var customWidgetTemplatePath = null;\n\n    // default apply function of widget.edit.apply\n    var defaultApplyFunction = function(){\n      return true;\n    };\n\n    var activeLocale = adfLocale.defaultLocale;\n    var locales = adfLocale.frameworkLocales;\n\n    function getLocales() {\n      return locales;\n    }\n\n    function getActiveLocale() {\n      return activeLocale;\n    }\n\n    function translate(label) {\n      var translation = locales[activeLocale][label];\n      return translation ? translation : label;\n    }\n\n   /**\n    * @ngdoc method\n    * @name adf.dashboardProvider#widget\n    * @methodOf adf.dashboardProvider\n    * @description\n    *\n    * Registers a new widget.\n    *\n    * @param {string} name of the widget\n    * @param {object} widget to be registered.\n    *\n    *   Object properties:\n    *\n    *   - `title` - `{string=}` - The title of the widget.\n    *   - `description` - `{string=}` - Description of the widget.\n    *   - `category` - `{string=}` - Category of the widget.\n    *   - `collapsed` - `{boolean=}` - true if the widget should be in collapsed state. Default is false.\n    *   - `config` - `{object}` - Predefined widget configuration.\n    *   - `controller` - `{string=|function()=}` - Controller fn that should be\n    *      associated with newly created scope of the widget or the name of a\n    *      {@link http://docs.angularjs.org/api/angular.Module#controller registered controller}\n    *      if passed as a string.\n    *   - `controllerAs` - `{string=}` - A controller alias name. If present the controller will be\n    *      published to scope under the `controllerAs` name.\n    *   - `frameless` - `{boolean=}` - false if the widget should be shown in frameless mode. The default is false.\n    *   - `styleClass` - `{object}` - space delimited string or map of classes bound to the widget.\n    *   - `template` - `{string=|function()=}` - html template as a string.\n    *   - `templateUrl` - `{string=}` - path to an html template.\n    *   - `reload` - `{boolean=}` - true if the widget could be reloaded. The default is false.\n    *   - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\n    *      be injected into the controller. If any of these dependencies are promises, the widget\n    *      will wait for them all to be resolved or one to be rejected before the controller is\n    *      instantiated.\n    *      If all the promises are resolved successfully, the values of the resolved promises are\n    *      injected.\n    *\n    *      The map object is:\n    *      - `key` – `{string}`: a name of a dependency to be injected into the controller.\n    *      - `factory` - `{string|function}`: If `string` then it is an alias for a service.\n    *        Otherwise if function, then it is {@link http://docs.angularjs.org/api/AUTO.$injector#invoke injected}\n    *        and the return value is treated as the dependency. If the result is a promise, it is\n    *        resolved before its value is injected into the controller.\n    *   - `resolveAs` - `{string=}` - The name under which the resolve map will be available\n    *      on the scope of the widget.\n    *   - `edit` - `{object}` - Edit modus of the widget.\n    *      - `controller` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\n    *      - `controllerAs` - `{string=}` - Same as above, but for the edit mode of the widget.\n    *      - `template` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\n    *      - `templateUrl` - `{string=}` - Same as above, but for the edit mode of the widget.\n    *      - `resolve` - `{Object.<string, function>=}` - Same as above, but for the edit mode of the widget.\n    *      - `resolveAs` - `{string=}` - The name under which the resolve map will be available\n    *        on the scope of the widget.\n    *      - `reload` - {boolean} - true if the widget should be reloaded, after the edit mode is closed.\n    *        Default is true.\n    *      - `immediate` - {boolean} - The widget enters the edit mode immediately after creation. Default is false.\n    *      - `apply` - `{function()=}` - The apply function is called, before the widget is saved.\n    *        The function have to return a boolean or an promise which can be resolved to a boolean.\n    *        The function can use injection.\n    *\n    * @returns {Object} self\n    */\n    this.widget = function(name, widget){\n      var w = angular.extend({reload: false, frameless: false}, widget);\n      if ( w.edit ){\n        var edit = {\n          reload: true,\n          immediate: false,\n          apply: defaultApplyFunction\n        };\n        angular.extend(edit, w.edit);\n        w.edit = edit;\n      }\n      widgets[name] = w;\n      return this;\n    };\n\n    /**\n     * @ngdoc method\n     * @name adf.dashboardProvider#widgetsPath\n     * @methodOf adf.dashboardProvider\n     * @description\n     *\n     * Sets the path to the directory which contains the widgets. The widgets\n     * path is used for widgets with a templateUrl which contains the\n     * placeholder {widgetsPath}. The placeholder is replaced with the\n     * configured value, before the template is loaded, but the template is\n     * cached with the unmodified templateUrl (e.g.: {widgetPath}/src/widgets).\n     * The default value of widgetPaths is ''.\n     *\n     *\n     * @param {string} path to the directory which contains the widgets\n     *\n     * @returns {Object} self\n     */\n    this.widgetsPath = function(path){\n      widgetsPath = path;\n      return this;\n    };\n\n   /**\n    * @ngdoc method\n    * @name adf.dashboardProvider#structure\n    * @methodOf adf.dashboardProvider\n    * @description\n    *\n    * Registers a new structure.\n    *\n    * @param {string} name of the structure\n    * @param {object} structure to be registered.\n    *\n    *   Object properties:\n    *\n    *   - `rows` - `{Array.<Object>}` - Rows of the dashboard structure.\n    *     - `styleClass` - `{string}` - CSS Class of the row.\n    *     - `columns` - `{Array.<Object>}` - Columns of the row.\n    *       - `styleClass` - `{string}` - CSS Class of the column.\n    *\n    * @returns {Object} self\n    */\n    this.structure = function(name, structure){\n      structures[name] = structure;\n      return this;\n    };\n\n   /**\n    * @ngdoc method\n    * @name adf.dashboardProvider#messageTemplate\n    * @methodOf adf.dashboardProvider\n    * @description\n    *\n    * Changes the template for messages.\n    *\n    * @param {string} template for messages.\n    *\n    * @returns {Object} self\n    */\n    this.messageTemplate = function(template){\n      messageTemplate = template;\n      return this;\n    };\n\n   /**\n    * @ngdoc method\n    * @name adf.dashboardProvider#loadingTemplate\n    * @methodOf adf.dashboardProvider\n    * @description\n    *\n    * Changes the template which is displayed as\n    * long as the widget resources are not resolved.\n    *\n    * @param {string} template loading template\n    *\n    * @returns {Object} self\n    */\n    this.loadingTemplate = function(template){\n      loadingTemplate = template;\n      return this;\n    };\n\n    /**\n     * @ngdoc method\n     * @name adf.dashboardProvider#customWidgetTemplatePath\n     * @propertyOf adf.dashboardProvider\n     * @description\n     *\n     * Changes the container template for the widgets\n     *\n     * @param {string} path to the custom widget template\n     *\n     * @returns {Object} self\n     */\n    this.customWidgetTemplatePath = function(templatePath) {\n      customWidgetTemplatePath = templatePath;\n      return this;\n    };\n\n    /**\n     * @ngdoc method\n     * @name adf.dashboardProvider#setLocale\n     * @methodOf adf.dashboardProvider\n     * @description\n     *\n     * Changes the locale setting of adf\n     *\n     * @param {string} ISO Language Code\n     *\n     * @returns {Object} self\n     */\n     this.setLocale = function(locale){\n       if(locales[locale]) {\n         activeLocale = locale;\n       } else {\n         throw new Error('Cannot set locale: ' + locale + '. Locale is not defined.');\n       }\n       return this;\n     };\n\n     /**\n      * @ngdoc method\n      * @name adf.dashboardProvider#addLocale\n      * @methodOf adf.dashboardProvider\n      * @description\n      *\n      * Adds a new locale to adf\n      *\n      * @param {string} ISO Language Code for the new locale\n      * @param {object} translations for the locale.\n      *\n      * @returns {Object} self\n      */\n      this.addLocale = function(locale, translations){\n        if(!angular.isString(locale)) {\n          throw new Error('locale must be an string');\n        }\n\n        if(!angular.isObject(translations)) {\n          throw new Error('translations must be an object');\n        }\n\n        locales[locale] = translations;\n        return this;\n      };\n\n   /**\n    * @ngdoc service\n    * @name adf.dashboard\n    * @description\n    *\n    * The dashboard holds all options, structures and widgets.\n    *\n    * @property {Array.<Object>} widgets Array of registered widgets.\n    * @property {string} widgetsPath Default path for widgets.\n    * @property {Array.<Object>} structures Array of registered structures.\n    * @property {string} messageTemplate Template for messages.\n    * @property {string} loadingTemplate Template for widget loading.\n    * @property {method} sets locale of adf.\n    * @property {Array.<Object>} hold all of the locale translations.\n    * @property {string} the active locale setting.\n    * @property {method} translation function passed to templates.\n    *\n    * @returns {Object} self\n    */\n    this.$get = function(){\n      var cid = 0;\n\n      return {\n        widgets: widgets,\n        widgetsPath: widgetsPath,\n        structures: structures,\n        messageTemplate: messageTemplate,\n        loadingTemplate: loadingTemplate,\n        setLocale: this.setLocale,\n        locales: getLocales,\n        activeLocale: getActiveLocale,\n        translate: translate,\n        customWidgetTemplatePath: customWidgetTemplatePath,\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboard#id\n         * @methodOf adf.dashboard\n         * @description\n         *\n         * Creates an ongoing numeric id. The method is used to create ids for\n         * columns and widgets in the dashboard.\n         */\n        id: function(){\n          return new Date().getTime() + '-' + (++cid);\n        },\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboard#idEqual\n         * @methodOf adf.dashboard\n         * @description\n         *\n         * Checks if the given ids are equal.\n         *\n         * @param {string} id widget or column id\n         * @param {string} other widget or column id\n         */\n         idEquals: function(id, other){\n           // use toString, because old ids are numbers\n           return ((id) && (other)) && (id.toString() === other.toString());\n         }\n      };\n    };\n\n  });\n","/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\nangular.module('adf.locale', [])\n","/*\n* The MIT License\n*\n* Copyright (c) 2015, Sebastian Sdorra\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in\n* all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\n'use strict';\n\n/**\n* @ngdoc object\n* @name adf.locale#adfLocale\n* @description\n*\n* Holds settings and values for framework supported locales\n*/\nangular.module('adf.locale')\n.constant('adfLocale',\n  {\n    defaultLocale: 'en-GB',\n    frameworkLocales: {\n      'en-GB': {\n        ADF_COMMON_CLOSE: 'Close',\n        ADF_COMMON_DELETE: 'Delete',\n        ADF_COMMON_TITLE: 'Title',\n        ADF_COMMON_CANCEL: 'Cancel',\n        ADF_COMMON_APPLY: 'Apply',\n        ADF_COMMON_EDIT_DASHBOARD: 'Edit dashboard',\n        ADF_EDIT_DASHBOARD_STRUCTURE_LABEL: 'Structure',\n        ADF_DASHBOARD_TITLE_TOOLTIP_ADD: 'Add new widget',\n        ADF_DASHBOARD_TITLE_TOOLTIP_SAVE: 'Save changes',\n        ADF_DASHBOARD_TITLE_TOOLTIP_EDIT_MODE: 'Enable edit mode',\n        ADF_DASHBOARD_TITLE_TOOLTIP_UNDO: 'Undo changes',\n        ADF_WIDGET_ADD_HEADER: 'Add new widget',\n        ADF_WIDGET_DELETE_CONFIRM_MESSAGE: 'Are you sure you want to delete this widget ?',\n        ADF_WIDGET_TOOLTIP_REFRESH: 'Reload widget Content',\n        ADF_WIDGET_TOOLTIP_MOVE: 'Change widget location',\n        ADF_WIDGET_TOOLTIP_COLLAPSE: 'Collapse widget',\n        ADF_WIDGET_TOOLTIP_EXPAND: 'Expand widget',\n        ADF_WIDGET_TOOLTIP_EDIT: 'Edit widget configuration',\n        ADF_WIDGET_TOOLTIP_FULLSCREEN: 'Fullscreen widget',\n        ADF_WIDGET_TOOLTIP_REMOVE: 'Remove widget'\n      },\n      'sv-SE': {\n        ADF_COMMON_CLOSE: 'Stäng',\n        ADF_COMMON_DELETE: 'Ta bort',\n        ADF_COMMON_TITLE: 'Titel',\n        ADF_COMMON_CANCEL: 'Avbryt',\n        ADF_COMMON_APPLY: 'Använd',\n        ADF_COMMON_EDIT_DASHBOARD: 'Redigera dashboard',\n        ADF_EDIT_DASHBOARD_STRUCTURE_LABEL: 'Struktur',\n        ADF_DASHBOARD_TITLE_TOOLTIP_ADD: 'Lägg till ny widget',\n        ADF_DASHBOARD_TITLE_TOOLTIP_SAVE: 'Spara förändringar',\n        ADF_DASHBOARD_TITLE_TOOLTIP_EDIT_MODE: 'Slå på redigeringsläge',\n        ADF_DASHBOARD_TITLE_TOOLTIP_UNDO: 'Ångra förändringar',\n        ADF_WIDGET_ADD_HEADER: 'Lägg till ny widget',\n        ADF_WIDGET_DELETE_CONFIRM_MESSAGE: 'Är du säker på att du vill ta bort denna widget ?',\n        ADF_WIDGET_TOOLTIP_REFRESH: 'Ladda om widget',\n        ADF_WIDGET_TOOLTIP_MOVE: 'Ändra widgets position',\n        ADF_WIDGET_TOOLTIP_COLLAPSE: 'Stäng widget',\n        ADF_WIDGET_TOOLTIP_EXPAND: 'Öppna widget',\n        ADF_WIDGET_TOOLTIP_EDIT: 'Ändra widget konfigurering',\n        ADF_WIDGET_TOOLTIP_FULLSCREEN: 'Visa widget i fullskärm',\n        ADF_WIDGET_TOOLTIP_REMOVE: 'Ta bort widget'\n      }\n    }\n  }\n);\n","(function(window, undefined) {'use strict';\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\nangular.module('adf', ['adf.provider', 'adf.locale', 'ui.bootstrap'])\n  .value('adfTemplatePath', '../src/templates/')\n  .value('rowTemplate', '<adf-dashboard-row row=\"row\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"row in column.rows\" />')\n  .value('columnTemplate', '<adf-dashboard-column column=\"column\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"column in row.columns\" />')\n  .value('adfVersion', '0.13.0-SNAPSHOT');\n\nangular.module(\"adf\").run([\"$templateCache\", function($templateCache) {$templateCache.put(\"../src/templates/dashboard-column.html\",\"<div adf-id={{column.cid}} class=column ng-class=column.styleClass ng-model=column.widgets> <adf-widget ng-repeat=\\\"definition in column.widgets\\\" adf-model=adfModel definition=definition column=column edit-mode=editMode options=options widget-state=widgetState>  </adf-widget></div> \");\n$templateCache.put(\"../src/templates/dashboard-edit.html\",\"<div class=modal-header> <button type=button class=close ng-click=closeDialog() aria-hidden=true>&times;</button> <h4 class=modal-title ng-bind=\\\"translate(\\'ADF_COMMON_EDIT_DASHBOARD\\')\\\">Edit Dashboard</h4> </div> <div class=modal-body> <form role=form> <div class=form-group> <label for=dashboardTitle ng-bind=\\\"translate(\\'ADF_COMMON_TITLE\\')\\\">Title</label> <input type=text class=form-control id=dashboardTitle ng-model=copy.title required> </div> <div class=form-group> <label ng-bind=\\\"translate(\\'ADF_EDIT_DASHBOARD_STRUCTURE_LABEL\\')\\\">Structure</label> <div class=row ng-init=\\\"splitted = split(structures, 3)\\\"> <div class=col-lg-4 ng-repeat=\\\"structureColumn in splitted\\\"> <div class=radio ng-repeat=\\\"(key, structure) in structureColumn\\\"> <div class=row> <div class=col-sm-2> <label> <input type=radio value={{key}} ng-model=model.structure ng-change=\\\"changeStructure(key, structure)\\\"> </label> </div> <div class=col-sm-9 ng-click=\\\"changeStructure(key, structure)\\\"> <adf-structure-preview name=key structure=structure selected=\\\"model.structure == key\\\"> </adf-structure-preview> </div> </div> </div> </div> </div> </div> </form> </div> <div class=modal-footer> <button type=button class=\\\"btn btn-primary\\\" ng-click=closeDialog() ng-bind=\\\"translate(\\'ADF_COMMON_CLOSE\\')\\\">Close</button> </div> \");\n$templateCache.put(\"../src/templates/dashboard-row.html\",\"<div class=row ng-class=row.styleClass ng-style=row.style>  </div> \");\n$templateCache.put(\"../src/templates/dashboard-title.html\",\"<h1> {{model.title}} <span style=\\\"font-size: 16px\\\" class=pull-right> <a href ng-if=editMode title=\\\"{{ translate(\\'ADF_DASHBOARD_TITLE_TOOLTIP_ADD\\') }}\\\" ng-click=addWidgetDialog()> <i class=\\\"glyphicon glyphicon-plus-sign\\\"></i> </a> <a href ng-if=editMode title=\\\"{{ translate(\\'ADF_COMMON_EDIT_DASHBOARD\\') }}\\\" ng-click=editDashboardDialog()> <i class=\\\"glyphicon glyphicon-cog\\\"></i> </a> <a href ng-if=options.editable title=\\\"{{editMode ? translate(\\'ADF_DASHBOARD_TITLE_TOOLTIP_SAVE\\') : translate(\\'ADF_DASHBOARD_TITLE_TOOLTIP_EDIT_MODE\\') }}\\\" ng-click=toggleEditMode()> <i class=glyphicon x-ng-class=\\\"{\\'glyphicon-edit\\' : !editMode, \\'glyphicon-save\\' : editMode}\\\">{{!editMode ? \\'Edit\\' : \\'Save\\' }}</i> </a> <a href ng-if=editMode title=\\\"{{ translate(\\'ADF_DASHBOARD_TITLE_TOOLTIP_UNDO\\') }}\\\" ng-click=cancelEditMode()> <i class=\\\"glyphicon glyphicon-repeat adf-flip\\\"></i> </a> </span> </h1> \");\n$templateCache.put(\"../src/templates/dashboard.html\",\"<div class=dashboard-container> <div ng-include src=model.titleTemplateUrl></div> <div class=dashboard x-ng-class=\\\"{\\'edit\\' : editMode}\\\"> <adf-dashboard-row row=row adf-model=model options=options ng-repeat=\\\"row in model.rows\\\" edit-mode=editMode continuous-edit-mode=continuousEditMode> </adf-dashboard-row></div> </div> \");\n$templateCache.put(\"../src/templates/structure-preview.html\",\"<div class=structure-preview ng-class=\\\"{selected: selected}\\\"> <h4>{{name}}</h4> <adf-dashboard-row ng-repeat=\\\"row in preview.rows\\\" row=row> </adf-dashboard-row></div> \");\n$templateCache.put(\"../src/templates/widget-add.html\",\"<div class=modal-header> <button type=button class=close ng-click=closeDialog() aria-hidden=true>&times;</button> <h4 class=modal-title ng-bind=\\\"translate(\\'ADF_WIDGET_ADD_HEADER\\')\\\">Add new widget</h4> </div> <div class=modal-body>  <div ng-if=createCategories> <uib-accordion ng-init=\\\"categorized = createCategories(widgets)\\\"> <uib-accordion-group heading={{category.name}} ng-repeat=\\\"category in categorized | adfOrderByObjectKey: \\'name\\'\\\"> <dl class=dl-horizontal> <dt ng-repeat-start=\\\"widget in category.widgets | adfOrderByObjectKey: \\'key\\'\\\"> <a href ng-click=addWidget(widget.key)> {{widget.title}} </a> </dt> <dd ng-repeat-end ng-if=widget.description> {{widget.description}} </dd> </dl> </uib-accordion-group> </uib-accordion> </div>  <div style=\\\"display: inline-block;\\\" ng-if=!createCategories> <dl class=dl-horizontal> <dt ng-repeat-start=\\\"widget in widgets | adfOrderByObjectKey: \\'key\\'\\\"> <a href ng-click=addWidget(widget.key)> {{widget.title}} </a> </dt> <dd ng-repeat-end ng-if=widget.description> {{widget.description}} </dd> </dl> </div> </div> <div class=modal-footer> <button type=button class=\\\"btn btn-primary\\\" ng-click=closeDialog() ng-bind=\\\"translate(\\'ADF_COMMON_CLOSE\\')\\\">Close</button> </div> \");\n$templateCache.put(\"../src/templates/widget-delete.html\",\"<div class=modal-header> <h4 class=modal-title><span ng-bind=\\\"translate(\\'ADF_COMMON_DELETE\\')\\\">Delete</span> {{widget.title}}</h4> </div> <div class=modal-body> <form role=form> <div class=form-group> <label for=widgetTitle ng-bind=\\\"translate(\\'ADF_WIDGET_DELETE_CONFIRM_MESSAGE\\')\\\">Are you sure you want to delete this widget ?</label> </div> </form> </div> <div class=modal-footer> <button type=button class=\\\"btn btn-default\\\" ng-click=closeDialog() ng-bind=\\\"translate(\\'ADF_COMMON_CLOSE\\')\\\">Close</button> <button type=button class=\\\"btn btn-primary\\\" ng-click=deleteDialog() ng-bind=\\\"translate(\\'ADF_COMMON_DELETE\\')\\\">Delete</button> </div> \");\n$templateCache.put(\"../src/templates/widget-edit.html\",\"<form name=widgetEditForm novalidate role=form ng-submit=saveDialog()> <div class=modal-header> <button type=button class=close ng-click=closeDialog() aria-hidden=true>&times;</button> <h4 class=modal-title>{{widget.title}}</h4> </div> <div class=modal-body> <div class=\\\"alert alert-danger\\\" role=alert ng-show=validationError> <strong>Apply error:</strong> {{validationError}} </div> <div class=form-group> <label for=widgetTitle ng-bind=\\\"translate(\\'ADF_COMMON_TITLE\\')\\\">Title</label> <input type=text class=form-control id=widgetTitle ng-model=definition.title placeholder=\\\"Enter title\\\" required> </div> <div ng-if=widget.edit> <adf-widget-content adf-model=adfModel model=definition content=widget.edit> </adf-widget-content></div> </div> <div class=modal-footer> <button type=button class=\\\"btn btn-default\\\" ng-click=closeDialog() ng-bind=\\\"translate(\\'ADF_COMMON_CANCEL\\')\\\">Cancel</button> <input type=submit class=\\\"btn btn-primary\\\" ng-disabled=widgetEditForm.$invalid ng-value=\\\"translate(\\'ADF_COMMON_APPLY\\')\\\"> </div> </form> \");\n$templateCache.put(\"../src/templates/widget-fullscreen.html\",\"<div class=modal-header> <div class=\\\"pull-right widget-icons\\\"> <a href title=\\\"{{ translate(\\'ADF_WIDGET_TOOLTIP_REFRESH\\') }}\\\" ng-if=widget.reload ng-click=reload()> <i class=\\\"glyphicon glyphicon-refresh\\\"></i> </a> <a href title=close ng-click=closeDialog()> <i class=\\\"glyphicon glyphicon-remove\\\"></i> </a> </div> <h4 class=modal-title>{{definition.title}}</h4> </div> <div class=modal-body> <adf-widget-content adf-model=adfModel model=definition content=widget> </adf-widget-content></div> <div class=modal-footer> <button type=button class=\\\"btn btn-primary\\\" ng-click=closeDialog() ng-bind=\\\"translate(\\'ADF_COMMON_CLOSE\\')\\\">Close</button> </div> \");\n$templateCache.put(\"../src/templates/widget-title.html\",\"<h3 class=panel-title> {{definition.title}} <span class=pull-right> <a href title=\\\"{{ translate(\\'ADF_WIDGET_TOOLTIP_REFRESH\\') }}\\\" ng-if=widget.reload ng-click=reload()> <i class=\\\"glyphicon glyphicon-refresh\\\"></i> </a>  <a href title=\\\"{{ translate(\\'ADF_WIDGET_TOOLTIP_MOVE\\') }}\\\" class=adf-move ng-if=editMode> <i class=\\\"glyphicon glyphicon-move\\\"></i> </a>  <a href title=\\\"{{ translate(\\'ADF_WIDGET_TOOLTIP_COLLAPSE\\') }}\\\" ng-show=\\\"options.collapsible && !widgetState.isCollapsed\\\" ng-click=\\\"widgetState.isCollapsed = !widgetState.isCollapsed\\\"> <i class=\\\"glyphicon glyphicon-minus\\\"></i> </a>  <a href title=\\\"{{ translate(\\'ADF_WIDGET_TOOLTIP_EXPAND\\') }}\\\" ng-show=\\\"options.collapsible && widgetState.isCollapsed\\\" ng-click=\\\"widgetState.isCollapsed = !widgetState.isCollapsed\\\"> <i class=\\\"glyphicon glyphicon-plus\\\"></i> </a>  <a href title=\\\"{{ translate(\\'ADF_WIDGET_TOOLTIP_EDIT\\') }}\\\" ng-click=edit() ng-if=editMode> <i class=\\\"glyphicon glyphicon-cog\\\"></i> </a> <a href title=\\\"{{ translate(\\'ADF_WIDGET_TOOLTIP_FULLSCREEN\\') }}\\\" ng-click=openFullScreen() ng-show=options.maximizable> <i class=\\\"glyphicon glyphicon-fullscreen\\\"></i> </a>  <a href title=\\\"{{ translate(\\'ADF_WIDGET_TOOLTIP_REMOVE\\') }}\\\" ng-click=remove() ng-if=editMode> <i class=\\\"glyphicon glyphicon-remove\\\"></i> </a> </span> </h3> \");\n$templateCache.put(\"../src/templates/widget.html\",\"<div adf-id={{definition.wid}} adf-widget-type={{definition.type}} ng-class=\\\"widgetClasses(widget, definition)\\\" class=widget> <div class=\\\"panel-heading clearfix\\\" ng-if=\\\"!widget.frameless || editMode\\\"> <div ng-include src=definition.titleTemplateUrl></div> </div> <div ng-class=\\\"{\\'panel-body\\':!widget.frameless || editMode}\\\" uib-collapse=widgetState.isCollapsed> <adf-widget-content adf-model=adfModel model=definition content=widget> </adf-widget-content></div> </div> \");}]);\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n/**\n * The widget service provide helper functions to render widgets and their content.\n */\nangular.module('adf')\n  .factory('widgetService', function($http, $q, $sce, $templateCache, dashboard) {\n    \n\n    function parseUrl(url) {\n      var parsedUrl = url;\n      if (url.indexOf('{widgetsPath}') >= 0) {\n        parsedUrl = url.replace('{widgetsPath}', dashboard.widgetsPath)\n                .replace('//', '/');\n        if (parsedUrl.indexOf('/') === 0) {\n          parsedUrl = parsedUrl.substring(1);\n        }\n      }\n      return parsedUrl;\n    }\n\n    var exposed = {};\n\n    exposed.getTemplate = function(widget){\n      var deferred = $q.defer();\n\n      if (widget.template) {\n        deferred.resolve(widget.template);\n      } else if (widget.templateUrl) {\n        // try to fetch template from cache\n        var tpl = $templateCache.get(widget.templateUrl);\n        if (tpl) {\n          deferred.resolve(tpl);\n        } else {\n          var url = $sce.getTrustedResourceUrl(parseUrl(widget.templateUrl));\n          $http.get(url)\n               .then(function(response) {\n                 return response.data;\n               })\n               .then(function(data) {\n                 // put response to cache, with unmodified url as key\n                 $templateCache.put(widget.templateUrl, data);\n                 deferred.resolve(data);\n               })\n               .catch(function() {\n                 deferred.reject('could not load template');\n               });\n        }\n      }\n\n      return deferred.promise;\n    };\n\n    return exposed;\n  });\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nangular.module('adf')\n  .factory('adfUtilsService', function () {\n    \n\n    var service = {\n      stringToBoolean: stringToBoolean,\n      split: split\n    };\n    return service;\n\n    function stringToBoolean(string){\n      switch(angular.isString(string) ? string.toLowerCase() : null){\n        case 'true': case 'yes': case '1': return true;\n        case 'false': case 'no': case '0': case null: return false;\n        default: return Boolean(string);\n      }\n    }\n\n    /**\n     * Splits an object into an array multiple objects inside.\n     *\n     * @param object source object\n     * @param size size of array\n     *\n     * @return array of splitted objects\n     */\n    function split(object, size) {\n      var arr = [];\n      var i = 0;\n      angular.forEach(object, function(value, key){\n        var index = i++ % size;\n        if (!arr[index]){\n          arr[index] = {};\n        }\n        arr[index][key] = value;\n      });\n      return arr;\n    }\n  });\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nangular.module('adf')\n  .factory('adfStructurePreviewService', function () {\n    \n\n    var service = {\n      adjustRowHeight: adjustRowHeight\n    };\n    return service;\n\n    function adjustRowHeight(container){\n      if (container.rows && container.rows.length > 0){\n        var height = 100 / container.rows.length;\n        angular.forEach(container.rows, function(row){\n          row.style = {\n            height: height + '%'\n          }\n\n          if (row.columns){\n            angular.forEach(row.columns, function(column){\n              adjustRowHeight(column);\n            });\n          }\n        });\n      }\n    }\n  });\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nangular.module('adf')\n  .factory('adfDashboardService', function ($log, dashboard, $rootScope) {\n    \n\n    var service = {\n      changeStructure: changeStructure,\n      createConfiguration: createConfiguration,\n      addNewWidgetToModel: addNewWidgetToModel,\n      isEditModeImmediate: isEditModeImmediate,\n      createCategories: createCategories,\n\n      // expose internal functions for testing purposes\n      // TODO find a nicer way\n      _tests: {\n        _readColumns: _readColumns\n      }\n    };\n    return service;\n\n    function _copyWidgets(source, target) {\n      if ( source.widgets && source.widgets.length > 0 ){\n        var w = source.widgets.shift();\n        while (w){\n          target.widgets.push(w);\n          w = source.widgets.shift();\n        }\n      }\n    }\n\n    /**\n    * Copy widget from old columns to the new model\n    * @param object root the model\n    * @param array of columns\n    * @param counter\n    */\n    function _fillStructure(root, columns, counter) {\n      counter = counter || 0;\n\n      if (angular.isDefined(root.rows)) {\n        angular.forEach(root.rows, function (row) {\n          angular.forEach(row.columns, function (column) {\n            // if the widgets prop doesn't exist, create a new array for it.\n            // this allows ui.sortable to do it's thing without error\n            if (!column.widgets) {\n              column.widgets = [];\n            }\n\n            // if a column exist at the counter index, copy over the column\n            if (angular.isDefined(columns[counter])) {\n              // do not add widgets to a column, which uses nested rows\n              if (angular.isUndefined(column.rows)){\n                _copyWidgets(columns[counter], column);\n                counter++;\n              }\n            }\n\n            // run fillStructure again for any sub rows/columns\n            counter = _fillStructure(column, columns, counter);\n          });\n        });\n      }\n      return counter;\n    }\n\n    /**\n    * Read Columns: recursively searches an object for the 'columns' property\n    * @param object model\n    * @param array  an array of existing columns; used when recursion happens\n    */\n    function _readColumns(root, columns) {\n      columns = columns || [];\n\n      if (angular.isDefined(root.rows)) {\n        angular.forEach(root.rows, function (row) {\n          angular.forEach(row.columns, function (col) {\n            if (!col.hasOwnProperty('rows')) {\n              columns.push(col);\n            }\n            // keep reading columns until we can't any more\n            _readColumns(col, columns);\n          });\n        });\n      }\n\n      return columns;\n    }\n\n    function changeStructure(model, structure){\n      var columns = _readColumns(model);\n      var counter = 0;\n\n      model.rows = angular.copy(structure.rows);\n\n      while ( counter < columns.length ){\n        counter = _fillStructure(model, columns, counter);\n      }\n    }\n\n    function createConfiguration(type){\n      var cfg = {};\n      var config = dashboard.widgets[type].config;\n      if (config){\n        cfg = angular.copy(config);\n      }\n      return cfg;\n    }\n\n    /**\n     * Find first widget column in model.\n     *\n     * @param dashboard model\n     */\n    function _findFirstWidgetColumn(model){\n      var column = null;\n      if (!angular.isArray(model.rows)){\n        $log.error('model does not have any rows');\n        return null;\n      }\n      for (var i=0; i<model.rows.length; i++){\n        var row = model.rows[i];\n        if (angular.isArray(row.columns)){\n          for (var j=0; j<row.columns.length; j++){\n            var col = row.columns[j];\n            if (!col.rows){\n              column = col;\n              break;\n            }\n          }\n        }\n        if (column){\n          break;\n        }\n      }\n      return column;\n    }\n\n    /**\n     * Adds the widget to first column of the model.\n     *\n     * @param dashboard model\n     * @param widget to add to model\n     * @param name name of the dashboard\n     */\n    function addNewWidgetToModel(model, widget, name){\n      if (model){\n        var column = _findFirstWidgetColumn(model);\n        if (column){\n          if (!column.widgets){\n            column.widgets = [];\n          }\n          column.widgets.unshift(widget);\n\n          $rootScope.$broadcast('adfWidgetAdded', name, model, widget);\n        } else {\n          $log.error('could not find first widget column');\n        }\n      } else {\n        $log.error('model is undefined');\n      }\n    }\n\n    /**\n     * Checks if the edit mode of the widget should be opened immediately.\n     *\n     * @param widget type\n     */\n    function isEditModeImmediate(type){\n      var widget = dashboard.widgets[type];\n      return widget && widget.edit && widget.edit.immediate;\n    }\n\n    /**\n     * Creates object with the category name as key and an array of widgets as value.\n     *\n     * @param widgets array of widgets\n     *\n     * @return array of categories\n     */\n    function createCategories(widgets){\n      var categories = {};\n      angular.forEach(widgets, function(widget, key){\n        var category = widget.category;\n        // if the widget has no category use a default one\n        if (!category){\n          category = 'Miscellaneous';\n        }\n        // push widget to category array\n        if (angular.isUndefined(categories[category])){\n          categories[category] = {widgets: {}};\n        }\n        categories[category].widgets[key] = widget;\n      });\n      return categories;\n    }\n  });\n\n/*\n* The MIT License\n*\n* Copyright (c) 2015, Sebastian Sdorra\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in\n* all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\n\n/* global angular */\nangular.module('adf')\n  .filter('adfOrderByObjectKey', function($filter) {\n    \n\n    return function(item, key){\n      var array = [];\n      angular.forEach(item, function(value, objectKey){\n        value[key] = objectKey;\n        array.push(value);\n      });\n      return $filter('orderBy')(array, key);\n    };\n  });\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\nangular.module('adf')\n  .directive('adfWidget', function($injector, $q, $log, $uibModal, $rootScope, dashboard, adfTemplatePath) {\n\n    return {\n      replace: true,\n      restrict: 'EA',\n      transclude: false,\n      templateUrl: dashboard.customWidgetTemplatePath ? dashboard.customWidgetTemplatePath : adfTemplatePath + 'widget.html',\n      scope: {\n        adfModel: '=',\n        definition: '=',\n        col: '=column',\n        editMode: '=',\n        options: '=',\n        widgetState: '='\n      },\n      controller: controller,\n      compile: function() {\n\n        /**\n         * use pre link, because link of widget-content\n         * is executed before post link widget\n         */\n        return {\n          pre: preLink,\n          post: postLink\n        };\n      }\n    };\n\n    function preLink($scope) {\n      var definition = $scope.definition;\n\n      //passs translate function from dashboard so we can translate labels inside html templates\n      $scope.translate = dashboard.translate;\n\n      if (definition) {\n        var w = dashboard.widgets[definition.type];\n        if (w) {\n          // pass title\n          if (!definition.title) {\n            definition.title = w.title;\n          }\n\n          if (!definition.titleTemplateUrl) {\n            definition.titleTemplateUrl = adfTemplatePath + 'widget-title.html';\n            if (w.titleTemplateUrl) {\n              definition.titleTemplateUrl = w.titleTemplateUrl;\n            }\n          }\n\n          if (!definition.editTemplateUrl) {\n            definition.editTemplateUrl = adfTemplatePath + 'widget-edit.html';\n            if (w.editTemplateUrl) {\n              definition.editTemplateUrl = w.editTemplateUrl;\n            }\n          }\n\n          if (!definition.titleTemplateUrl) {\n            definition.frameless = w.frameless;\n          }\n\n          if (!definition.styleClass) {\n            definition.styleClass = w.styleClass;\n          }\n\n          // set id for sortable\n          if (!definition.wid) {\n            definition.wid = dashboard.id();\n          }\n\n          // pass copy of widget to scope\n          $scope.widget = angular.copy(w);\n\n          // create config object\n          var config = definition.config;\n          if (config) {\n            if (angular.isString(config)) {\n              config = angular.fromJson(config);\n            }\n          } else {\n            config = {};\n          }\n\n          // pass config to scope\n          $scope.config = config;\n\n          // collapse exposed $scope.widgetState property\n          if (!$scope.widgetState) {\n            $scope.widgetState = {};\n            $scope.widgetState.isCollapsed= (w.collapsed === true) ? w.collapsed : false;\n          }\n\n        } else {\n          $log.warn('could not find widget ' + definition.type);\n        }\n      } else {\n        $log.debug('definition not specified, widget was probably removed');\n      }\n    }\n\n    function postLink($scope, $element) {\n      var definition = $scope.definition;\n      if (definition) {\n        // bind close function\n\n        var deleteWidget = function() {\n          var column = $scope.col;\n          if (column) {\n            var index = column.widgets.indexOf(definition);\n            if (index >= 0) {\n              column.widgets.splice(index, 1);\n            }\n          }\n          $element.remove();\n          $rootScope.$broadcast('adfWidgetRemovedFromColumn', definition);\n        };\n\n        $scope.remove = function() {\n          if ($scope.options.enableConfirmDelete) {\n            var deleteScope = $scope.$new();\n            deleteScope.translate = dashboard.translate;\n\n            var deleteTemplateUrl = adfTemplatePath + 'widget-delete.html';\n            if (definition.deleteTemplateUrl) {\n              deleteTemplateUrl = definition.deleteTemplateUrl;\n            }\n            var opts = {\n              scope: deleteScope,\n              templateUrl: deleteTemplateUrl,\n              windowClass: 'adf-remove-widget-modal',\n              backdrop: 'static'\n            };\n            var instance = $uibModal.open(opts);\n\n            deleteScope.closeDialog = function() {\n              instance.close();\n              deleteScope.$destroy();\n            };\n            deleteScope.deleteDialog = function() {\n              deleteWidget();\n              deleteScope.closeDialog();\n            };\n          } else {\n            deleteWidget();\n          }\n        };\n\n        // bind reload function\n        $scope.reload = function() {\n          $scope.$broadcast('widgetReload');\n        };\n\n        // bind edit function\n        $scope.edit = function() {\n          var editScope = $scope.$new();\n          editScope.translate = dashboard.translate;\n          editScope.definition = angular.copy(definition);\n\n          var adfEditTemplatePath = adfTemplatePath + 'widget-edit.html';\n          if (definition.editTemplateUrl) {\n            adfEditTemplatePath = definition.editTemplateUrl;\n          }\n\n          var opts = {\n            scope: editScope,\n            templateUrl: adfEditTemplatePath,\n            windowClass: 'adf-edit-widget-modal',\n            backdrop: 'static'\n          };\n\n          var instance = $uibModal.open(opts);\n\n          editScope.closeDialog = function() {\n            instance.close();\n            editScope.$destroy();\n          };\n\n          // TODO create util method\n          function createApplyPromise(result){\n            var promise;\n            if (typeof result === 'boolean'){\n              var deferred = $q.defer();\n              if (result){\n                deferred.resolve();\n              } else {\n                deferred.reject();\n              }\n              promise = deferred.promise;\n            } else {\n              promise = $q.when(result);\n            }\n            return promise;\n          }\n\n          editScope.saveDialog = function() {\n            // clear validation error\n            editScope.validationError = null;\n\n            // build injection locals\n            var widget = $scope.widget;\n\n            // create a default apply method for widgets\n            // without edit mode\n            // see issue https://goo.gl/KHPQLZ\n            var applyFn;\n            if (widget.edit){\n              applyFn = widget.edit.apply;\n            } else {\n              applyFn = function(){\n                return true;\n              };\n            }\n\n            // injection locals\n            var locals = {\n              widget: widget,\n              definition: editScope.definition,\n              config: editScope.definition.config\n            };\n\n            // invoke apply function and apply if success\n            var result = $injector.invoke(applyFn, applyFn, locals);\n            createApplyPromise(result).then(function(){\n              definition.title = editScope.definition.title;\n              angular.extend(definition.config, editScope.definition.config);\n              if (widget.edit && widget.edit.reload) {\n                // reload content after edit dialog is closed\n                $scope.$broadcast('widgetConfigChanged');\n              }\n              editScope.closeDialog();\n            }, function(err){\n              if (err){\n                editScope.validationError = err;\n              } else {\n                editScope.validationError = 'Validation durring apply failed';\n              }\n            });\n          };\n\n        };\n      } else {\n        $log.debug('widget not found');\n      }\n    }\n\n    function controller($scope){\n\n      $scope.$on('adfDashboardCollapseExpand', function(event, args) {\n        $scope.widgetState.isCollapsed = args.collapseExpandStatus;\n      });\n\n      $scope.$on('adfWidgetEnterEditMode', function(event, widget){\n        if (dashboard.idEquals($scope.definition.wid, widget.wid)){\n          $scope.edit();\n        }\n      });\n\n      $scope.widgetClasses = function(w, definition){\n        var classes = definition.styleClass || '';\n        // w is undefined, if the type of the widget is unknown\n        // see issue #216\n        if (!w || !w.frameless || $scope.editMode){\n          classes += ' panel panel-default';\n        }\n        return classes;\n      };\n\n      $scope.openFullScreen = function() {\n        var definition = $scope.definition;\n        var fullScreenScope = $scope.$new();\n        var opts = {\n          scope: fullScreenScope,\n          templateUrl: adfTemplatePath + 'widget-fullscreen.html',\n          size: definition.modalSize || 'lg', // 'sm', 'lg'\n          backdrop: 'static',\n          windowClass: (definition.fullScreen) ? 'dashboard-modal widget-fullscreen' : 'dashboard-modal'\n        };\n\n        var instance = $uibModal.open(opts);\n        fullScreenScope.closeDialog = function() {\n          instance.close();\n          fullScreenScope.$destroy();\n        };\n      };\n    }\n\n  });\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\nangular.module('adf')\n  .directive('adfWidgetContent', function($log, $q, widgetService, $compile, $controller, $injector, dashboard) {\n\n    return {\n      replace: true,\n      restrict: 'EA',\n      transclude: false,\n      scope: {\n        adfModel: '=',\n        model: '=',\n        content: '='\n      },\n      link: link\n    };\n\n    function renderError($element, msg){\n        $log.warn(msg);\n        $element.html(dashboard.messageTemplate.replace(/{}/g, msg));\n    }\n\n    function compileWidget($scope, $element, currentScope) {\n      var model = $scope.model;\n      var content = $scope.content;\n\n      var newScope = currentScope;\n      if (!model){\n        renderError($element, 'model is undefined')\n      } else if (!content){\n        var msg = 'widget content is undefined, please have a look at your browser log';\n        renderError($element, msg);\n      } else {\n        newScope = renderWidget($scope, $element, currentScope, model, content);\n      }\n      return newScope;\n    }\n\n    function renderWidget($scope, $element, currentScope, model, content) {\n      // display loading template\n      $element.html(dashboard.loadingTemplate);\n\n      // create new scope\n      var templateScope = $scope.$new();\n\n      // pass config object to scope\n      if (!model.config) {\n        model.config = {};\n      }\n\n      templateScope.config = model.config;\n\n      // local injections\n      var base = {\n        $scope: templateScope,\n        widget: model,\n        config: model.config\n      };\n\n      // get resolve promises from content object\n      var resolvers = {};\n      resolvers.$tpl = widgetService.getTemplate(content);\n      if (content.resolve) {\n        angular.forEach(content.resolve, function(promise, key) {\n          if (angular.isString(promise)) {\n            resolvers[key] = $injector.get(promise);\n          } else {\n            resolvers[key] = $injector.invoke(promise, promise, base);\n          }\n        });\n      }\n\n      // resolve all resolvers\n      $q.all(resolvers).then(function(locals) {\n        angular.extend(locals, base);\n\n        // pass resolve map to template scope as defined in resolveAs\n        if (content.resolveAs){\n          templateScope[content.resolveAs] = locals;\n        }\n\n        // compile & render template\n        var template = locals.$tpl;\n        $element.html(template);\n        if (content.controller) {\n          var templateCtrl = $controller(content.controller, locals);\n          if (content.controllerAs) {\n            templateScope[content.controllerAs] = templateCtrl;\n          }\n          $element.children().data('$ngControllerController', templateCtrl);\n        }\n        $compile($element.contents())(templateScope);\n      }, function(reason) {\n        // handle promise rejection\n        var msg = 'Could not resolve all promises';\n        if (reason) {\n          msg += ': ' + reason;\n        }\n        renderError($element, msg);\n      });\n\n      // destroy old scope\n      if (currentScope) {\n        currentScope.$destroy();\n      }\n\n      return templateScope;\n    }\n\n    function link($scope, $element) {\n      var currentScope = compileWidget($scope, $element, null);\n      $scope.$on('widgetConfigChanged', function() {\n        currentScope = compileWidget($scope, $element, currentScope);\n      });\n      $scope.$on('widgetReload', function() {\n        currentScope = compileWidget($scope, $element, currentScope);\n      });\n    }\n\n  });\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\n/* global angular */\nangular.module('adf')\n  .directive('adfStructurePreview', function(adfTemplatePath, adfStructurePreviewService) {\n\n    return {\n      restrict: 'E',\n      replace: true,\n      scope: {\n        name: '=',\n        structure: '=',\n        selected: '='\n      },\n      templateUrl: adfTemplatePath + 'structure-preview.html',\n      link: link\n    };\n\n    function link($scope){\n      var structure = angular.copy($scope.structure);\n      adfStructurePreviewService.adjustRowHeight(structure);\n      $scope.preview = structure;\n    }\n\n  });\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/**\n * @ngdoc directive\n * @name adf.directive:adfDashboard\n * @element div\n * @restrict EA\n * @scope\n * @description\n *\n * `adfDashboard` is a directive which renders the dashboard with all its\n * components. The directive requires a name attribute. The name of the\n * dashboard can be used to store the model.\n *\n * @param {string} name name of the dashboard. This attribute is required.\n * @param {boolean=} editable false to disable the editmode of the dashboard.\n * @param {boolean=} collapsible true to make widgets collapsible on the dashboard.\n * @param {boolean=} maximizable true to add a button for open widgets in a large modal panel.\n * @param {boolean=} enableConfirmDelete true to ask before remove an widget from the dashboard.\n * @param {string=} structure the default structure of the dashboard.\n * @param {object=} adfModel model object of the dashboard.\n * @param {object=} adfAddWidgetModalOptions options to provide to the add-widget modal\n * @param {function=} adfWidgetFilter function to filter widgets on the add dialog.\n * @param {boolean=} continuousEditMode enable continuous edit mode, to fire add/change/remove\n *                   events during edit mode not reset it if edit mode is exited.\n * @param {boolean=} categories enable categories for the add widget dialog.\n */\n\nangular.module('adf')\n  .directive('adfDashboard', function ($rootScope, $log, $timeout, $uibModal, dashboard, adfTemplatePath, adfDashboardService, adfUtilsService) {\n    \n\n    return {\n      replace: true,\n      restrict: 'EA',\n      transclude : false,\n      scope: {\n        structure: '@',\n        name: '@',\n        collapsible: '@',\n        editable: '@',\n        editMode: '@',\n        continuousEditMode: '=',\n        maximizable: '@',\n        adfModel: '=',\n        adfAddWidgetModalOptions: '=',\n        adfWidgetFilter: '=',\n        categories: '@'\n      },\n      controller: controller,\n      link: link,\n      templateUrl: adfTemplatePath + 'dashboard.html'\n    };\n\n    /**\n     * Opens the edit mode of the specified widget.\n     *\n     * @param dashboard scope\n     * @param widget\n     */\n    function _openEditMode($scope, widget){\n      // wait some time before fire enter edit mode event\n      $timeout(function(){\n        $scope.$broadcast('adfWidgetEnterEditMode', widget);\n      }, 200);\n    }\n\n    /**\n     * Directive controller function.\n     *\n     * @param dashboard scope\n     */\n    function controller($scope){\n      var model = {};\n      var structure = {};\n      var widgetFilter = null;\n      var structureName = {};\n      var name = $scope.name;\n\n      // Watching for changes on adfModel\n      $scope.$watch('adfModel', function(oldVal, newVal) {\n       // has model changed or is the model attribute not set\n       if (newVal !== null || (oldVal === null && newVal === null)) {\n         model = $scope.adfModel;\n         widgetFilter = $scope.adfWidgetFilter;\n         if ( ! model || ! model.rows ){\n           structureName = $scope.structure;\n           structure = dashboard.structures[structureName];\n           if (structure){\n             if (model){\n               model.rows = angular.copy(structure).rows;\n             } else {\n               model = angular.copy(structure);\n             }\n             model.structure = structureName;\n           } else {\n             $log.error( 'could not find structure ' + structureName);\n           }\n         }\n\n         if (model) {\n           if (!model.title){\n             model.title = 'Dashboard';\n           }\n           if (!model.titleTemplateUrl) {\n             model.titleTemplateUrl = adfTemplatePath + 'dashboard-title.html';\n           }\n           $scope.model = model;\n         } else {\n           $log.error('could not find or create model');\n         }\n       }\n      }, true);\n\n      // edit mode\n      $scope.editMode = false;\n      $scope.editClass = '';\n\n      //passs translate function from dashboard so we can translate labels inside html templates\n      $scope.translate = dashboard.translate;\n\n      function getNewModalScope() {\n       var scope = $scope.$new();\n       //pass translate function to the new scope so we can translate the labels inside the modal dialog\n       scope.translate = dashboard.translate;\n       return scope;\n      }\n\n      $scope.toggleEditMode = function(){\n       $scope.editMode = ! $scope.editMode;\n       if ($scope.editMode){\n         if (!$scope.continuousEditMode) {\n           $scope.modelCopy = angular.copy($scope.adfModel, {});\n           $rootScope.$broadcast('adfIsEditMode');\n         }\n       }\n\n       if (!$scope.editMode){\n         $rootScope.$broadcast('adfDashboardChanged', name, model);\n       }\n      };\n\n      $scope.$on('adfToggleEditMode', function() {\n         $scope.toggleEditMode();\n      });\n\n      $scope.collapseAll = function(collapseExpandStatus){\n       $rootScope.$broadcast('adfDashboardCollapseExpand',{collapseExpandStatus : collapseExpandStatus});\n      };\n\n      $scope.cancelEditMode = function(){\n       $scope.editMode = false;\n       if (!$scope.continuousEditMode) {\n         $scope.modelCopy = angular.copy($scope.modelCopy, $scope.adfModel);\n       }\n       $rootScope.$broadcast('adfDashboardEditsCancelled');\n      };\n\n      // edit dashboard settings\n      $scope.editDashboardDialog = function(){\n       var editDashboardScope = getNewModalScope();\n       // create a copy of the title, to avoid changing the title to\n       // \"dashboard\" if the field is empty\n       editDashboardScope.copy = {\n         title: model.title\n       };\n\n       // pass dashboard structure to scope\n       editDashboardScope.structures = dashboard.structures;\n\n       // pass split function to scope, to be able to display structures in multiple columns\n       editDashboardScope.split = adfUtilsService.split;\n\n       var adfEditTemplatePath = adfTemplatePath + 'dashboard-edit.html';\n       if(model.editTemplateUrl) {\n         adfEditTemplatePath = model.editTemplateUrl;\n       }\n       var instance = $uibModal.open({\n         scope: editDashboardScope,\n         templateUrl: adfEditTemplatePath,\n         backdrop: 'static',\n         windowClass: 'adf-edit-dashboard-modal',\n         size: 'lg'\n       });\n       editDashboardScope.changeStructure = function(name, structure){\n         $log.info('change structure to ' + name);\n         adfDashboardService.changeStructure(model, structure);\n         if (model.structure !== name){\n           model.structure = name;\n         }\n         $rootScope.$broadcast('adfDashboardStructureChange');\n       };\n       editDashboardScope.closeDialog = function(){\n         // copy the new title back to the model\n         model.title = editDashboardScope.copy.title;\n         // close modal and destroy the scope\n         instance.close();\n         editDashboardScope.$destroy();\n       };\n      };\n\n      // add widget dialog\n      $scope.addWidgetDialog = function(){\n       var addScope = getNewModalScope();\n       var model = $scope.model;\n       var widgets;\n       if (angular.isFunction(widgetFilter)){\n         widgets = {};\n         angular.forEach(dashboard.widgets, function(widget, type){\n           if (widgetFilter(widget, type, model)){\n             widgets[type] = widget;\n           }\n         });\n       } else {\n         widgets = dashboard.widgets;\n       }\n       addScope.widgets = widgets;\n\n       //pass translate function to the new scope so we can translate the labels inside the modal dialog\n       addScope.translate = $scope.translate;\n\n       // pass createCategories function to scope, if categories option is enabled\n       if ($scope.options.categories){\n         $scope.createCategories = adfDashboardService.createCategories;\n       }\n\n       var adfAddTemplatePath = adfTemplatePath + 'widget-add.html';\n       if(model.addTemplateUrl) {\n         adfAddTemplatePath = model.addTemplateUrl;\n       }\n\n       var opts = {\n         scope: addScope,\n         templateUrl: adfAddTemplatePath,\n         windowClass: 'adf-add-widget-modal',\n         backdrop: 'static'\n       };\n\n       if (angular.isDefined($scope.adfAddWidgetModalOptions)) {\n          opts = angular.merge(opts, $scope.adfAddWidgetModalOptions);\n       }\n\n       var instance = $uibModal.open(opts);\n       addScope.addWidget = function(widget){\n         var w = {\n           type: widget,\n           config: adfDashboardService.createConfiguration(widget)\n         };\n         adfDashboardService.addNewWidgetToModel(model, w, name);\n         // close and destroy\n         instance.close();\n         addScope.$destroy();\n\n         // check for open edit mode immediately\n         if (adfDashboardService.isEditModeImmediate(widget)){\n           _openEditMode($scope, w);\n         }\n       };\n       addScope.closeDialog = function(){\n         // close and destroy\n         instance.close();\n         addScope.$destroy();\n       };\n      };\n\n      $scope.addNewWidgetToModel = adfDashboardService.addNewWidgetToModel;\n    }\n\n    /**\n     * Directive link function.\n     *\n     * @param dashboard scope\n     * @param directive DOM element\n     * @param directive attributes\n     */\n    function link($scope, $element, $attr) {\n      // pass options to scope\n      var options = {\n        name: $attr.name,\n        editable: true,\n        enableConfirmDelete: adfUtilsService.stringToBoolean($attr.enableConfirmDelete),\n        maximizable: adfUtilsService.stringToBoolean($attr.maximizable),\n        collapsible: adfUtilsService.stringToBoolean($attr.collapsible),\n        categories: adfUtilsService.stringToBoolean($attr.categories)\n      };\n      if (angular.isDefined($attr.editable)){\n        options.editable = adfUtilsService.stringToBoolean($attr.editable);\n      }\n      $scope.options = options;\n    }\n  });\n\n/*\n* The MIT License\n*\n* Copyright (c) 2015, Sebastian Sdorra\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in\n* all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\n\n/* global angular */\nangular.module('adf')\n  .directive('adfDashboardRow', function ($compile, adfTemplatePath, columnTemplate) {\n    \n\n    return {\n      restrict: 'E',\n      replace: true,\n      scope: {\n        row: '=',\n        adfModel: '=',\n        editMode: '=',\n        continuousEditMode: '=',\n        options: '='\n      },\n      templateUrl: adfTemplatePath + 'dashboard-row.html',\n      link: link\n    };\n\n    function link($scope, $element) {\n      if (angular.isDefined($scope.row.columns) && angular.isArray($scope.row.columns)) {\n        $compile(columnTemplate)($scope, function(cloned) {\n          $element.append(cloned);\n        });\n      }\n    }\n  });\n\n/*\n* The MIT License\n*\n* Copyright (c) 2015, Sebastian Sdorra\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in\n* all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\n\n/* global angular */\nangular.module('adf')\n  .directive('adfDashboardColumn', function ($log, $compile, $rootScope, adfTemplatePath, rowTemplate, dashboard) {\n    \n\n    return {\n      restrict: 'E',\n      replace: true,\n      scope: {\n        column: '=',\n        editMode: '=',\n        continuousEditMode: '=',\n        adfModel: '=',\n        options: '='\n      },\n      templateUrl: adfTemplatePath + 'dashboard-column.html',\n      link: link\n    };\n\n    /**\n     * moves a widget in between a column\n     */\n    function moveWidgetInColumn($scope, column, evt){\n      var widgets = column.widgets;\n      // move widget and apply to scope\n      $scope.$apply(function(){\n        widgets.splice(evt.newIndex, 0, widgets.splice(evt.oldIndex, 1)[0]);\n        $rootScope.$broadcast('adfWidgetMovedInColumn');\n      });\n    }\n\n    /**\n     * finds a widget by its id in the column\n     */\n    function findWidget(column, index){\n      var widget = null;\n      for (var i=0; i<column.widgets.length; i++){\n        var w = column.widgets[i];\n        if (dashboard.idEquals(w.wid,index)){\n          widget = w;\n          break;\n        }\n      }\n      return widget;\n    }\n\n    /**\n     * finds a column by its id in the model\n     */\n    function findColumn(model, index){\n      var column = null;\n      for (var i=0; i<model.rows.length; i++){\n        var r = model.rows[i];\n        for (var j=0; j<r.columns.length; j++){\n          var c = r.columns[j];\n          if (dashboard.idEquals(c.cid, index)){\n            column = c;\n            break;\n          } else if (c.rows){\n            column = findColumn(c, index);\n          }\n        }\n        if (column){\n          break;\n        }\n      }\n      return column;\n    }\n\n    /**\n     * get the adf id from an html element\n     */\n    function getId(el){\n      var id = el.getAttribute('adf-id');\n      return id ? id : '-1';\n    }\n\n    /**\n     * adds a widget to a column\n     */\n    function addWidgetToColumn($scope, model, targetColumn, evt){\n      // find source column\n      var cid = getId(evt.from);\n      var sourceColumn = findColumn(model, cid);\n\n      if (sourceColumn){\n        // find moved widget\n        var wid = getId(evt.item);\n        var widget = findWidget(sourceColumn, wid);\n\n        if (widget){\n          // add new item and apply to scope\n          $scope.$apply(function(){\n            if (!targetColumn.widgets) {\n              targetColumn.widgets = [];\n            }\n            targetColumn.widgets.splice(evt.newIndex, 0, widget);\n\n            $rootScope.$broadcast('adfWidgetAddedToColumn');\n          });\n        } else {\n          $log.warn('could not find widget with id ' + wid);\n        }\n      } else {\n        $log.warn('could not find column with id ' + cid);\n      }\n    }\n\n    /**\n     * removes a widget from a column\n     */\n    function removeWidgetFromColumn($scope, column, evt){\n      // remove old item and apply to scope\n      $scope.$apply(function(){\n        column.widgets.splice(evt.oldIndex, 1);\n        $rootScope.$broadcast('adfWidgetRemovedFromColumn');\n      });\n    }\n\n    /**\n     * enable sortable\n     */\n    function applySortable($scope, $element, model, column){\n      // enable drag and drop\n      var el = $element[0];\n      var sortable = Sortable.create(el, {\n        group: 'widgets',\n        handle: '.adf-move',\n        ghostClass: 'placeholder',\n        animation: 150,\n        onAdd: function(evt){\n          addWidgetToColumn($scope, model, column, evt);\n        },\n        onRemove: function(evt){\n          removeWidgetFromColumn($scope, column, evt);\n        },\n        onUpdate: function(evt){\n          moveWidgetInColumn($scope, column, evt);\n        }\n      });\n\n      // destroy sortable on column destroy event\n      $element.on('$destroy', function () {\n        // check sortable element, before calling destroy\n        // see https://github.com/sdorra/angular-dashboard-framework/issues/118\n        if (sortable.el){\n          sortable.destroy();\n        }\n      });\n    }\n\n    function link($scope, $element) {\n      // set id\n      var col = $scope.column;\n      if (!col.cid){\n        col.cid = dashboard.id();\n      }\n\n      if (angular.isDefined(col.rows) && angular.isArray(col.rows)) {\n        // be sure to tell Angular about the injected directive and push the new row directive to the column\n        $compile(rowTemplate)($scope, function(cloned) {\n          $element.append(cloned);\n        });\n      } else {\n        // enable drag and drop for widget only columns\n        applySortable($scope, $element, $scope.adfModel, col);\n      }\n    }\n\n  });\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\n/**\n * @ngdoc object\n * @name adf.dashboardProvider\n * @description\n *\n * The dashboardProvider can be used to register structures and widgets.\n */\nangular.module('adf.provider', ['adf.locale'])\n  .provider('dashboard', function(adfLocale){\n\n    var widgets = {};\n    var widgetsPath = '';\n    var structures = {};\n    var messageTemplate = '<div class=\"alert alert-danger\">{}</div>';\n    var loadingTemplate = '\\\n      <div class=\"progress progress-striped active\">\\n\\\n        <div class=\"progress-bar\" role=\"progressbar\" style=\"width: 100%\">\\n\\\n          <span class=\"sr-only\">loading ...</span>\\n\\\n        </div>\\n\\\n      </div>';\n    var customWidgetTemplatePath = null;\n\n    // default apply function of widget.edit.apply\n    var defaultApplyFunction = function(){\n      return true;\n    };\n\n    var activeLocale = adfLocale.defaultLocale;\n    var locales = adfLocale.frameworkLocales;\n\n    function getLocales() {\n      return locales;\n    }\n\n    function getActiveLocale() {\n      return activeLocale;\n    }\n\n    function translate(label) {\n      var translation = locales[activeLocale][label];\n      return translation ? translation : label;\n    }\n\n   /**\n    * @ngdoc method\n    * @name adf.dashboardProvider#widget\n    * @methodOf adf.dashboardProvider\n    * @description\n    *\n    * Registers a new widget.\n    *\n    * @param {string} name of the widget\n    * @param {object} widget to be registered.\n    *\n    *   Object properties:\n    *\n    *   - `title` - `{string=}` - The title of the widget.\n    *   - `description` - `{string=}` - Description of the widget.\n    *   - `category` - `{string=}` - Category of the widget.\n    *   - `collapsed` - `{boolean=}` - true if the widget should be in collapsed state. Default is false.\n    *   - `config` - `{object}` - Predefined widget configuration.\n    *   - `controller` - `{string=|function()=}` - Controller fn that should be\n    *      associated with newly created scope of the widget or the name of a\n    *      {@link http://docs.angularjs.org/api/angular.Module#controller registered controller}\n    *      if passed as a string.\n    *   - `controllerAs` - `{string=}` - A controller alias name. If present the controller will be\n    *      published to scope under the `controllerAs` name.\n    *   - `frameless` - `{boolean=}` - false if the widget should be shown in frameless mode. The default is false.\n    *   - `styleClass` - `{object}` - space delimited string or map of classes bound to the widget.\n    *   - `template` - `{string=|function()=}` - html template as a string.\n    *   - `templateUrl` - `{string=}` - path to an html template.\n    *   - `reload` - `{boolean=}` - true if the widget could be reloaded. The default is false.\n    *   - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\n    *      be injected into the controller. If any of these dependencies are promises, the widget\n    *      will wait for them all to be resolved or one to be rejected before the controller is\n    *      instantiated.\n    *      If all the promises are resolved successfully, the values of the resolved promises are\n    *      injected.\n    *\n    *      The map object is:\n    *      - `key` – `{string}`: a name of a dependency to be injected into the controller.\n    *      - `factory` - `{string|function}`: If `string` then it is an alias for a service.\n    *        Otherwise if function, then it is {@link http://docs.angularjs.org/api/AUTO.$injector#invoke injected}\n    *        and the return value is treated as the dependency. If the result is a promise, it is\n    *        resolved before its value is injected into the controller.\n    *   - `resolveAs` - `{string=}` - The name under which the resolve map will be available\n    *      on the scope of the widget.\n    *   - `edit` - `{object}` - Edit modus of the widget.\n    *      - `controller` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\n    *      - `controllerAs` - `{string=}` - Same as above, but for the edit mode of the widget.\n    *      - `template` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\n    *      - `templateUrl` - `{string=}` - Same as above, but for the edit mode of the widget.\n    *      - `resolve` - `{Object.<string, function>=}` - Same as above, but for the edit mode of the widget.\n    *      - `resolveAs` - `{string=}` - The name under which the resolve map will be available\n    *        on the scope of the widget.\n    *      - `reload` - {boolean} - true if the widget should be reloaded, after the edit mode is closed.\n    *        Default is true.\n    *      - `immediate` - {boolean} - The widget enters the edit mode immediately after creation. Default is false.\n    *      - `apply` - `{function()=}` - The apply function is called, before the widget is saved.\n    *        The function have to return a boolean or an promise which can be resolved to a boolean.\n    *        The function can use injection.\n    *\n    * @returns {Object} self\n    */\n    this.widget = function(name, widget){\n      var w = angular.extend({reload: false, frameless: false}, widget);\n      if ( w.edit ){\n        var edit = {\n          reload: true,\n          immediate: false,\n          apply: defaultApplyFunction\n        };\n        angular.extend(edit, w.edit);\n        w.edit = edit;\n      }\n      widgets[name] = w;\n      return this;\n    };\n\n    /**\n     * @ngdoc method\n     * @name adf.dashboardProvider#widgetsPath\n     * @methodOf adf.dashboardProvider\n     * @description\n     *\n     * Sets the path to the directory which contains the widgets. The widgets\n     * path is used for widgets with a templateUrl which contains the\n     * placeholder {widgetsPath}. The placeholder is replaced with the\n     * configured value, before the template is loaded, but the template is\n     * cached with the unmodified templateUrl (e.g.: {widgetPath}/src/widgets).\n     * The default value of widgetPaths is ''.\n     *\n     *\n     * @param {string} path to the directory which contains the widgets\n     *\n     * @returns {Object} self\n     */\n    this.widgetsPath = function(path){\n      widgetsPath = path;\n      return this;\n    };\n\n   /**\n    * @ngdoc method\n    * @name adf.dashboardProvider#structure\n    * @methodOf adf.dashboardProvider\n    * @description\n    *\n    * Registers a new structure.\n    *\n    * @param {string} name of the structure\n    * @param {object} structure to be registered.\n    *\n    *   Object properties:\n    *\n    *   - `rows` - `{Array.<Object>}` - Rows of the dashboard structure.\n    *     - `styleClass` - `{string}` - CSS Class of the row.\n    *     - `columns` - `{Array.<Object>}` - Columns of the row.\n    *       - `styleClass` - `{string}` - CSS Class of the column.\n    *\n    * @returns {Object} self\n    */\n    this.structure = function(name, structure){\n      structures[name] = structure;\n      return this;\n    };\n\n   /**\n    * @ngdoc method\n    * @name adf.dashboardProvider#messageTemplate\n    * @methodOf adf.dashboardProvider\n    * @description\n    *\n    * Changes the template for messages.\n    *\n    * @param {string} template for messages.\n    *\n    * @returns {Object} self\n    */\n    this.messageTemplate = function(template){\n      messageTemplate = template;\n      return this;\n    };\n\n   /**\n    * @ngdoc method\n    * @name adf.dashboardProvider#loadingTemplate\n    * @methodOf adf.dashboardProvider\n    * @description\n    *\n    * Changes the template which is displayed as\n    * long as the widget resources are not resolved.\n    *\n    * @param {string} template loading template\n    *\n    * @returns {Object} self\n    */\n    this.loadingTemplate = function(template){\n      loadingTemplate = template;\n      return this;\n    };\n\n    /**\n     * @ngdoc method\n     * @name adf.dashboardProvider#customWidgetTemplatePath\n     * @propertyOf adf.dashboardProvider\n     * @description\n     *\n     * Changes the container template for the widgets\n     *\n     * @param {string} path to the custom widget template\n     *\n     * @returns {Object} self\n     */\n    this.customWidgetTemplatePath = function(templatePath) {\n      customWidgetTemplatePath = templatePath;\n      return this;\n    };\n\n    /**\n     * @ngdoc method\n     * @name adf.dashboardProvider#setLocale\n     * @methodOf adf.dashboardProvider\n     * @description\n     *\n     * Changes the locale setting of adf\n     *\n     * @param {string} ISO Language Code\n     *\n     * @returns {Object} self\n     */\n     this.setLocale = function(locale){\n       if(locales[locale]) {\n         activeLocale = locale;\n       } else {\n         throw new Error('Cannot set locale: ' + locale + '. Locale is not defined.');\n       }\n       return this;\n     };\n\n     /**\n      * @ngdoc method\n      * @name adf.dashboardProvider#addLocale\n      * @methodOf adf.dashboardProvider\n      * @description\n      *\n      * Adds a new locale to adf\n      *\n      * @param {string} ISO Language Code for the new locale\n      * @param {object} translations for the locale.\n      *\n      * @returns {Object} self\n      */\n      this.addLocale = function(locale, translations){\n        if(!angular.isString(locale)) {\n          throw new Error('locale must be an string');\n        }\n\n        if(!angular.isObject(translations)) {\n          throw new Error('translations must be an object');\n        }\n\n        locales[locale] = translations;\n        return this;\n      };\n\n   /**\n    * @ngdoc service\n    * @name adf.dashboard\n    * @description\n    *\n    * The dashboard holds all options, structures and widgets.\n    *\n    * @property {Array.<Object>} widgets Array of registered widgets.\n    * @property {string} widgetsPath Default path for widgets.\n    * @property {Array.<Object>} structures Array of registered structures.\n    * @property {string} messageTemplate Template for messages.\n    * @property {string} loadingTemplate Template for widget loading.\n    * @property {method} sets locale of adf.\n    * @property {Array.<Object>} hold all of the locale translations.\n    * @property {string} the active locale setting.\n    * @property {method} translation function passed to templates.\n    *\n    * @returns {Object} self\n    */\n    this.$get = function(){\n      var cid = 0;\n\n      return {\n        widgets: widgets,\n        widgetsPath: widgetsPath,\n        structures: structures,\n        messageTemplate: messageTemplate,\n        loadingTemplate: loadingTemplate,\n        setLocale: this.setLocale,\n        locales: getLocales,\n        activeLocale: getActiveLocale,\n        translate: translate,\n        customWidgetTemplatePath: customWidgetTemplatePath,\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboard#id\n         * @methodOf adf.dashboard\n         * @description\n         *\n         * Creates an ongoing numeric id. The method is used to create ids for\n         * columns and widgets in the dashboard.\n         */\n        id: function(){\n          return new Date().getTime() + '-' + (++cid);\n        },\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboard#idEqual\n         * @methodOf adf.dashboard\n         * @description\n         *\n         * Checks if the given ids are equal.\n         *\n         * @param {string} id widget or column id\n         * @param {string} other widget or column id\n         */\n         idEquals: function(id, other){\n           // use toString, because old ids are numbers\n           return ((id) && (other)) && (id.toString() === other.toString());\n         }\n      };\n    };\n\n  });\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\nangular.module('adf.locale', [])\n\n/*\n* The MIT License\n*\n* Copyright (c) 2015, Sebastian Sdorra\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in\n* all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\n\n\n/**\n* @ngdoc object\n* @name adf.locale#adfLocale\n* @description\n*\n* Holds settings and values for framework supported locales\n*/\nangular.module('adf.locale')\n.constant('adfLocale',\n  {\n    defaultLocale: 'en-GB',\n    frameworkLocales: {\n      'en-GB': {\n        ADF_COMMON_CLOSE: 'Close',\n        ADF_COMMON_DELETE: 'Delete',\n        ADF_COMMON_TITLE: 'Title',\n        ADF_COMMON_CANCEL: 'Cancel',\n        ADF_COMMON_APPLY: 'Apply',\n        ADF_COMMON_EDIT_DASHBOARD: 'Edit dashboard',\n        ADF_EDIT_DASHBOARD_STRUCTURE_LABEL: 'Structure',\n        ADF_DASHBOARD_TITLE_TOOLTIP_ADD: 'Add new widget',\n        ADF_DASHBOARD_TITLE_TOOLTIP_SAVE: 'Save changes',\n        ADF_DASHBOARD_TITLE_TOOLTIP_EDIT_MODE: 'Enable edit mode',\n        ADF_DASHBOARD_TITLE_TOOLTIP_UNDO: 'Undo changes',\n        ADF_WIDGET_ADD_HEADER: 'Add new widget',\n        ADF_WIDGET_DELETE_CONFIRM_MESSAGE: 'Are you sure you want to delete this widget ?',\n        ADF_WIDGET_TOOLTIP_REFRESH: 'Reload widget Content',\n        ADF_WIDGET_TOOLTIP_MOVE: 'Change widget location',\n        ADF_WIDGET_TOOLTIP_COLLAPSE: 'Collapse widget',\n        ADF_WIDGET_TOOLTIP_EXPAND: 'Expand widget',\n        ADF_WIDGET_TOOLTIP_EDIT: 'Edit widget configuration',\n        ADF_WIDGET_TOOLTIP_FULLSCREEN: 'Fullscreen widget',\n        ADF_WIDGET_TOOLTIP_REMOVE: 'Remove widget'\n      },\n      'sv-SE': {\n        ADF_COMMON_CLOSE: 'Stäng',\n        ADF_COMMON_DELETE: 'Ta bort',\n        ADF_COMMON_TITLE: 'Titel',\n        ADF_COMMON_CANCEL: 'Avbryt',\n        ADF_COMMON_APPLY: 'Använd',\n        ADF_COMMON_EDIT_DASHBOARD: 'Redigera dashboard',\n        ADF_EDIT_DASHBOARD_STRUCTURE_LABEL: 'Struktur',\n        ADF_DASHBOARD_TITLE_TOOLTIP_ADD: 'Lägg till ny widget',\n        ADF_DASHBOARD_TITLE_TOOLTIP_SAVE: 'Spara förändringar',\n        ADF_DASHBOARD_TITLE_TOOLTIP_EDIT_MODE: 'Slå på redigeringsläge',\n        ADF_DASHBOARD_TITLE_TOOLTIP_UNDO: 'Ångra förändringar',\n        ADF_WIDGET_ADD_HEADER: 'Lägg till ny widget',\n        ADF_WIDGET_DELETE_CONFIRM_MESSAGE: 'Är du säker på att du vill ta bort denna widget ?',\n        ADF_WIDGET_TOOLTIP_REFRESH: 'Ladda om widget',\n        ADF_WIDGET_TOOLTIP_MOVE: 'Ändra widgets position',\n        ADF_WIDGET_TOOLTIP_COLLAPSE: 'Stäng widget',\n        ADF_WIDGET_TOOLTIP_EXPAND: 'Öppna widget',\n        ADF_WIDGET_TOOLTIP_EDIT: 'Ändra widget konfigurering',\n        ADF_WIDGET_TOOLTIP_FULLSCREEN: 'Visa widget i fullskärm',\n        ADF_WIDGET_TOOLTIP_REMOVE: 'Ta bort widget'\n      }\n    }\n  }\n);\n\n})(window);"]}