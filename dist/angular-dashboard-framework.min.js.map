{"version":3,"sources":["adf.js","column.js","dashboard.js","order-by-object-key.js","provider.js","angular-dashboard-framework.min.js","row.js","structure-preview.js","widget-content.js","widget-service.js","widget.js"],"names":["window","undefined","angular","module","value","directive","$log","$compile","$rootScope","adfTemplatePath","rowTemplate","dashboard","moveWidgetInColumn","$scope","column","evt","widgets","$apply","splice","newIndex","oldIndex","$broadcast","findWidget","index","widget","i","length","w","idEquals","wid","findColumn","model","rows","r","j","columns","c","cid","getId","el","id","getAttribute","addWidgetToColumn","targetColumn","from","sourceColumn","item","warn","removeWidgetFromColumn","applySortable","$element","sortable","Sortable","create","group","handle","ghostClass","animation","onAdd","onRemove","onUpdate","on","destroy","restrict","replace","scope","editMode","continuousEditMode","adfModel","options","templateUrl","link","col","isDefined","isArray","cloned","append","$timeout","$uibModal","stringToBoolean","string","toLowerCase","Boolean","copyWidgets","source","target","shift","push","fillStructure","root","counter","forEach","row","isUndefined","readColumns","changeStructure","structure","copy","createConfiguration","type","cfg","config","findFirstWidgetColumn","error","addNewWidgetToModel","name","unshift","isEditModeImmediate","edit","immediate","openEditMode","split","object","size","arr","key","createCategories","categories","category","transclude","collapsible","editable","maximizable","adfWidgetFilter","controller","widgetFilter","structureName","$watch","oldVal","newVal","structures","title","titleTemplateUrl","editClass","toggleEditMode","modelCopy","$on","collapseAll","collapseExpandStatus","cancelEditMode","editDashboardDialog","editDashboardScope","$new","adfEditTemplatePath","editTemplateUrl","instance","open","backdrop","info","closeDialog","close","$destroy","addWidgetDialog","addScope","isFunction","adfAddTemplatePath","addTemplateUrl","opts","addWidget","$attr","enableConfirmDelete","enableconfirmdelete","filter","$filter","array","objectKey","provider","widgetsPath","messageTemplate","loadingTemplate","defaultApplyFunction","this","extend","reload","frameless","apply","path","template","widgetCustomTemplateUrl","$get","Date","getTime","other","toString","columnTemplate","adjustRowHeight","container","height","style","prepareStructure","preview","selected","$q","widgetService","$controller","$injector","compileWidget","currentScope","content","html","templateScope","base","resolvers","$tpl","getTemplate","resolve","promise","isString","get","invoke","all","then","locals","resolveAs","templateCtrl","controllerAs","children","data","contents","reason","msg","factory","$http","$sce","$templateCache","parseUrl","url","parsedUrl","indexOf","substring","exposed","deferred","defer","tpl","getTrustedResourceUrl","success","response","put","reject","getWidgetTemplateUrl","preLink","definition","styleClass","fromJson","widgetState","isCollapsed","collapsed","debug","postLink","deleteWidget","remove","deleteScope","deleteTemplateUrl","deleteDialog","createApplyPromise","result","when","editScope","saveDialog","validationError","applyFn","err","event","args","widgetClasses","classes","openFullScreen","fullScreenScope","modalSize","windowClass","compile","pre","post"],"mappings":"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","file":"angular-dashboard-framework.min.js","sourcesContent":["/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n'use strict';\r\n\r\nangular.module('adf', ['adf.provider', 'ui.bootstrap'])\r\n  .value('adfTemplatePath', '../src/templates/')\r\n  .value('rowTemplate', '<adf-dashboard-row row=\"row\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"row in column.rows\" />')\r\n  .value('columnTemplate', '<adf-dashboard-column column=\"column\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"column in row.columns\" />')\r\n  .value('adfVersion', '<<adfVersion>>');\r\n","/*\r\n* The MIT License\r\n*\r\n* Copyright (c) 2015, Sebastian Sdorra\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in\r\n* all copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n* SOFTWARE.\r\n*/\r\n\r\n\r\n/* global angular */\r\nangular.module('adf')\r\n  .directive('adfDashboardColumn', function ($log, $compile, $rootScope, adfTemplatePath, rowTemplate, dashboard) {\r\n    'use strict';\r\n\r\n    /**\r\n     * moves a widget in between a column\r\n     */\r\n    function moveWidgetInColumn($scope, column, evt){\r\n      var widgets = column.widgets;\r\n      // move widget and apply to scope\r\n      $scope.$apply(function(){\r\n        widgets.splice(evt.newIndex, 0, widgets.splice(evt.oldIndex, 1)[0]);\r\n        $rootScope.$broadcast('adfWidgetMovedInColumn');\r\n      });\r\n    }\r\n\r\n    /**\r\n     * finds a widget by its id in the column\r\n     */\r\n    function findWidget(column, index){\r\n      var widget = null;\r\n      for (var i=0; i<column.widgets.length; i++){\r\n        var w = column.widgets[i];\r\n        if (dashboard.idEquals(w.wid,index)){\r\n          widget = w;\r\n          break;\r\n        }\r\n      }\r\n      return widget;\r\n    }\r\n\r\n    /**\r\n     * finds a column by its id in the model\r\n     */\r\n    function findColumn(model, index){\r\n      var column = null;\r\n      for (var i=0; i<model.rows.length; i++){\r\n        var r = model.rows[i];\r\n        for (var j=0; j<r.columns.length; j++){\r\n          var c = r.columns[j];\r\n          if (dashboard.idEquals(c.cid, index)){\r\n            column = c;\r\n            break;\r\n          } else if (c.rows){\r\n            column = findColumn(c, index);\r\n          }\r\n        }\r\n        if (column){\r\n          break;\r\n        }\r\n      }\r\n      return column;\r\n    }\r\n\r\n    /**\r\n     * get the adf id from an html element\r\n     */\r\n    function getId(el){\r\n      var id = el.getAttribute('adf-id');\r\n      return id ? id : '-1';\r\n    }\r\n\r\n    /**\r\n     * adds a widget to a column\r\n     */\r\n    function addWidgetToColumn($scope, model, targetColumn, evt){\r\n      // find source column\r\n      var cid = getId(evt.from);\r\n      var sourceColumn = findColumn(model, cid);\r\n\r\n      if (sourceColumn){\r\n        // find moved widget\r\n        var wid = getId(evt.item);\r\n        var widget = findWidget(sourceColumn, wid);\r\n\r\n        if (widget){\r\n          // add new item and apply to scope\r\n          $scope.$apply(function(){\r\n            if (!targetColumn.widgets) {\r\n              targetColumn.widgets = [];\r\n            }\r\n            targetColumn.widgets.splice(evt.newIndex, 0, widget);\r\n\r\n            $rootScope.$broadcast('adfWidgetAddedToColumn');\r\n          });\r\n        } else {\r\n          $log.warn('could not find widget with id ' + wid);\r\n        }\r\n      } else {\r\n        $log.warn('could not find column with id ' + cid);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * removes a widget from a column\r\n     */\r\n    function removeWidgetFromColumn($scope, column, evt){\r\n      // remove old item and apply to scope\r\n      $scope.$apply(function(){\r\n        column.widgets.splice(evt.oldIndex, 1);\r\n        $rootScope.$broadcast('adfWidgetRemovedFromColumn');\r\n      });\r\n    }\r\n\r\n    /**\r\n     * enable sortable\r\n     */\r\n    function applySortable($scope, $element, model, column){\r\n      // enable drag and drop\r\n      var el = $element[0];\r\n      var sortable = Sortable.create(el, {\r\n        group: 'widgets',\r\n        handle: '.adf-move',\r\n        ghostClass: 'placeholder',\r\n        animation: 150,\r\n        onAdd: function(evt){\r\n          addWidgetToColumn($scope, model, column, evt);\r\n        },\r\n        onRemove: function(evt){\r\n          removeWidgetFromColumn($scope, column, evt);\r\n        },\r\n        onUpdate: function(evt){\r\n          moveWidgetInColumn($scope, column, evt);\r\n        }\r\n      });\r\n\r\n      // destroy sortable on column destroy event\r\n      $element.on('$destroy', function () {\r\n        // check sortable element, before calling destroy\r\n        // see https://github.com/sdorra/angular-dashboard-framework/issues/118\r\n        if (sortable.el){\r\n          sortable.destroy();\r\n        }\r\n      });\r\n    }\r\n\r\n    return {\r\n      restrict: 'E',\r\n      replace: true,\r\n      scope: {\r\n        column: '=',\r\n        editMode: '=',\r\n        continuousEditMode: '=',\r\n        adfModel: '=',\r\n        options: '='\r\n      },\r\n      templateUrl: adfTemplatePath + 'dashboard-column.html',\r\n      link: function ($scope, $element) {\r\n        // set id\r\n        var col = $scope.column;\r\n        if (!col.cid){\r\n          col.cid = dashboard.id();\r\n        }\r\n\r\n        if (angular.isDefined(col.rows) && angular.isArray(col.rows)) {\r\n          // be sure to tell Angular about the injected directive and push the new row directive to the column\r\n          $compile(rowTemplate)($scope, function(cloned) {\r\n            $element.append(cloned);\r\n          });\r\n        } else {\r\n          // enable drag and drop for widget only columns\r\n          applySortable($scope, $element, $scope.adfModel, col);\r\n        }\r\n      }\r\n    };\r\n  });\r\n","/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n/**\r\n * @ngdoc directive\r\n * @name adf.directive:adfDashboard\r\n * @element div\r\n * @restrict EA\r\n * @scope\r\n * @description\r\n *\r\n * `adfDashboard` is a directive which renders the dashboard with all its\r\n * components. The directive requires a name attribute. The name of the\r\n * dashboard can be used to store the model.\r\n *\r\n * @param {string} name name of the dashboard. This attribute is required.\r\n * @param {boolean=} editable false to disable the editmode of the dashboard.\r\n * @param {boolean=} collapsible true to make widgets collapsible on the dashboard.\r\n * @param {boolean=} maximizable true to add a button for open widgets in a large modal panel.\r\n * @param {boolean=} enableConfirmDelete true to ask before remove an widget from the dashboard.\r\n * @param {string=} structure the default structure of the dashboard.\r\n * @param {object=} adfModel model object of the dashboard.\r\n * @param {function=} adfWidgetFilter function to filter widgets on the add dialog.\r\n * @param {boolean=} continuousEditMode enable continuous edit mode, to fire add/change/remove\r\n *                   events during edit mode not reset it if edit mode is exited.\r\n * @param {boolean=} categories enable categories for the add widget dialog.\r\n */\r\n\r\nangular.module('adf')\r\n  .directive('adfDashboard', function ($rootScope, $log, $timeout, $uibModal, dashboard, adfTemplatePath) {\r\n    'use strict';\r\n\r\n    function stringToBoolean(string){\r\n      switch(angular.isDefined(string) ? string.toLowerCase() : null){\r\n        case 'true': case 'yes': case '1': return true;\r\n        case 'false': case 'no': case '0': case null: return false;\r\n        default: return Boolean(string);\r\n      }\r\n    }\r\n\r\n    function copyWidgets(source, target) {\r\n      if ( source.widgets && source.widgets.length > 0 ){\r\n        var w = source.widgets.shift();\r\n        while (w){\r\n          target.widgets.push(w);\r\n          w = source.widgets.shift();\r\n        }\r\n      }\r\n    }\r\n\r\n    /**\r\n    * Copy widget from old columns to the new model\r\n    * @param object root the model\r\n    * @param array of columns\r\n    * @param counter\r\n    */\r\n    function fillStructure(root, columns, counter) {\r\n      counter = counter || 0;\r\n\r\n      if (angular.isDefined(root.rows)) {\r\n        angular.forEach(root.rows, function (row) {\r\n          angular.forEach(row.columns, function (column) {\r\n            // if the widgets prop doesn't exist, create a new array for it.\r\n            // this allows ui.sortable to do it's thing without error\r\n            if (!column.widgets) {\r\n              column.widgets = [];\r\n            }\r\n\r\n            // if a column exist at the counter index, copy over the column\r\n            if (angular.isDefined(columns[counter])) {\r\n              // do not add widgets to a column, which uses nested rows\r\n              if (angular.isUndefined(column.rows)){\r\n                copyWidgets(columns[counter], column);\r\n                counter++;\r\n              }\r\n            }\r\n\r\n            // run fillStructure again for any sub rows/columns\r\n            counter = fillStructure(column, columns, counter);\r\n          });\r\n        });\r\n      }\r\n      return counter;\r\n    }\r\n\r\n    /**\r\n    * Read Columns: recursively searches an object for the 'columns' property\r\n    * @param object model\r\n    * @param array  an array of existing columns; used when recursion happens\r\n    */\r\n    function readColumns(root, columns) {\r\n      columns = columns || [];\r\n\r\n      if (angular.isDefined(root.rows)) {\r\n        angular.forEach(root.rows, function (row) {\r\n          angular.forEach(row.columns, function (col) {\r\n            columns.push(col);\r\n            // keep reading columns until we can't any more\r\n            readColumns(col, columns);\r\n          });\r\n        });\r\n      }\r\n\r\n      return columns;\r\n    }\r\n\r\n    function changeStructure(model, structure){\r\n      var columns = readColumns(model);\r\n      var counter = 0;\r\n\r\n      model.rows = angular.copy(structure.rows);\r\n\r\n      while ( counter < columns.length ){\r\n        counter = fillStructure(model, columns, counter);\r\n      }\r\n    }\r\n\r\n    function createConfiguration(type){\r\n      var cfg = {};\r\n      var config = dashboard.widgets[type].config;\r\n      if (config){\r\n        cfg = angular.copy(config);\r\n      }\r\n      return cfg;\r\n    }\r\n\r\n    /**\r\n     * Find first widget column in model.\r\n     *\r\n     * @param dashboard model\r\n     */\r\n    function findFirstWidgetColumn(model){\r\n      var column = null;\r\n      if (!angular.isArray(model.rows)){\r\n        $log.error('model does not have any rows');\r\n        return null;\r\n      }\r\n      for (var i=0; i<model.rows.length; i++){\r\n        var row = model.rows[i];\r\n        if (angular.isArray(row.columns)){\r\n          for (var j=0; j<row.columns.length; j++){\r\n            var col = row.columns[j];\r\n            if (!col.rows){\r\n              column = col;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n        if (column){\r\n          break;\r\n        }\r\n      }\r\n      return column;\r\n    }\r\n\r\n    /**\r\n     * Adds the widget to first column of the model.\r\n     *\r\n     * @param dashboard model\r\n     * @param widget to add to model\r\n     * @param name name of the dashboard\r\n     */\r\n    function addNewWidgetToModel(model, widget, name){\r\n      if (model){\r\n        var column = findFirstWidgetColumn(model);\r\n        if (column){\r\n          if (!column.widgets){\r\n            column.widgets = [];\r\n          }\r\n          column.widgets.unshift(widget);\r\n\r\n          // broadcast added event\r\n          $rootScope.$broadcast('adfWidgetAdded', name, model, widget);\r\n        } else {\r\n          $log.error('could not find first widget column');\r\n        }\r\n      } else {\r\n        $log.error('model is undefined');\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Checks if the edit mode of the widget should be opened immediately.\r\n     *\r\n     * @param widget type\r\n     */\r\n    function isEditModeImmediate(type){\r\n      var widget = dashboard.widgets[type];\r\n      return widget && widget.edit && widget.edit.immediate;\r\n    }\r\n\r\n    /**\r\n     * Opens the edit mode of the specified widget.\r\n     *\r\n     * @param dashboard scope\r\n     * @param widget\r\n     */\r\n    function openEditMode($scope, widget){\r\n      // wait some time before fire enter edit mode event\r\n      $timeout(function(){\r\n        $scope.$broadcast('adfWidgetEnterEditMode', widget);\r\n      }, 200);\r\n    }\r\n\r\n    /**\r\n     * Splits an object into an array multiple objects inside.\r\n     *\r\n     * @param object source object\r\n     * @param size size of array\r\n     *\r\n     * @return array of splitted objects\r\n     */\r\n    function split(object, size) {\r\n      var arr = [];\r\n      var i = 0;\r\n      angular.forEach(object, function(value, key){\r\n        var index = i++ % size;\r\n        if (!arr[index]){\r\n          arr[index] = {};\r\n        }\r\n        arr[index][key] = value;\r\n      });\r\n      return arr;\r\n    }\r\n\r\n    /**\r\n     * Creates object with the category name as key and an array of widgets as value.\r\n     *\r\n     * @param widgets array of widgets\r\n     *\r\n     * @return array of categories\r\n     */\r\n    function createCategories(widgets){\r\n      var categories = {};\r\n      angular.forEach(widgets, function(widget){\r\n        var category = widget.category;\r\n        // if the widget has no category use a default one\r\n        if (!category){\r\n          category = 'Miscellaneous';\r\n        }\r\n        // push widget to category array\r\n        if (!categories[category]){\r\n          categories[category] = [];\r\n        }\r\n        categories[category].push(widget);\r\n      });\r\n      return categories;\r\n    }\r\n\r\n    return {\r\n      replace: true,\r\n      restrict: 'EA',\r\n      transclude : false,\r\n      scope: {\r\n        structure: '@',\r\n        name: '@',\r\n        collapsible: '@',\r\n        editable: '@',\r\n        editMode: '@',\r\n        continuousEditMode: '=',\r\n        maximizable: '@',\r\n        adfModel: '=',\r\n        adfWidgetFilter: '=',\r\n        categories: '@'\r\n      },\r\n      controller: function($scope){\r\n        var model = {};\r\n        var structure = {};\r\n        var widgetFilter = null;\r\n        var structureName = {};\r\n        var name = $scope.name;\r\n\r\n        // Watching for changes on adfModel\r\n        $scope.$watch('adfModel', function(oldVal, newVal) {\r\n          // has model changed or is the model attribute not set\r\n          if (newVal !== null || (oldVal === null && newVal === null)) {\r\n            model = $scope.adfModel;\r\n            widgetFilter = $scope.adfWidgetFilter;\r\n            if ( ! model || ! model.rows ){\r\n              structureName = $scope.structure;\r\n              structure = dashboard.structures[structureName];\r\n              if (structure){\r\n                if (model){\r\n                  model.rows = angular.copy(structure).rows;\r\n                } else {\r\n                  model = angular.copy(structure);\r\n                }\r\n                model.structure = structureName;\r\n              } else {\r\n                $log.error( 'could not find structure ' + structureName);\r\n              }\r\n            }\r\n\r\n            if (model) {\r\n              if (!model.title){\r\n                model.title = 'Dashboard';\r\n              }\r\n              if (!model.titleTemplateUrl) {\r\n                model.titleTemplateUrl = adfTemplatePath + 'dashboard-title.html';\r\n              }\r\n              $scope.model = model;\r\n            } else {\r\n              $log.error('could not find or create model');\r\n            }\r\n          }\r\n        }, true);\r\n\r\n        // edit mode\r\n        $scope.editMode = false;\r\n        $scope.editClass = '';\r\n\r\n        $scope.toggleEditMode = function(){\r\n          $scope.editMode = ! $scope.editMode;\r\n          if ($scope.editMode){\r\n            if (!$scope.continuousEditMode) {\r\n              $scope.modelCopy = angular.copy($scope.adfModel, {});\r\n              $rootScope.$broadcast('adfIsEditMode');\r\n            }\r\n          }\r\n\r\n          if (!$scope.editMode){\r\n            $rootScope.$broadcast('adfDashboardChanged', name, model);\r\n          }\r\n        };\r\n\r\n        $scope.$on('adfToggleEditMode', function() {\r\n            $scope.toggleEditMode();\r\n        });\r\n\r\n        $scope.collapseAll = function(collapseExpandStatus){\r\n          $rootScope.$broadcast('adfDashboardCollapseExpand',{collapseExpandStatus : collapseExpandStatus});\r\n        };\r\n\r\n        $scope.cancelEditMode = function(){\r\n          $scope.editMode = false;\r\n          if (!$scope.continuousEditMode) {\r\n            $scope.modelCopy = angular.copy($scope.modelCopy, $scope.adfModel);\r\n          }\r\n          $rootScope.$broadcast('adfDashboardEditsCancelled');\r\n        };\r\n\r\n        // edit dashboard settings\r\n        $scope.editDashboardDialog = function(){\r\n          var editDashboardScope = $scope.$new();\r\n          // create a copy of the title, to avoid changing the title to\r\n          // \"dashboard\" if the field is empty\r\n          editDashboardScope.copy = {\r\n            title: model.title\r\n          };\r\n\r\n          // pass dashboard structure to scope\r\n          editDashboardScope.structures = dashboard.structures;\r\n\r\n          // pass split function to scope, to be able to display structures in multiple columns\r\n          editDashboardScope.split = split;\r\n\r\n          var adfEditTemplatePath = adfTemplatePath + 'dashboard-edit.html';\r\n          if(model.editTemplateUrl) {\r\n            adfEditTemplatePath = model.editTemplateUrl;\r\n          }\r\n          var instance = $uibModal.open({\r\n            scope: editDashboardScope,\r\n            templateUrl: adfEditTemplatePath,\r\n            backdrop: 'static',\r\n            size: 'lg'\r\n          });\r\n          editDashboardScope.changeStructure = function(name, structure){\r\n            $log.info('change structure to ' + name);\r\n            changeStructure(model, structure);\r\n            if (model.structure !== name){\r\n              model.structure = name;\r\n            }\r\n          };\r\n          editDashboardScope.closeDialog = function(){\r\n            // copy the new title back to the model\r\n            model.title = editDashboardScope.copy.title;\r\n            // close modal and destroy the scope\r\n            instance.close();\r\n            editDashboardScope.$destroy();\r\n          };\r\n        };\r\n\r\n        // add widget dialog\r\n        $scope.addWidgetDialog = function(){\r\n          var addScope = $scope.$new();\r\n          var model = $scope.model;\r\n          var widgets;\r\n          if (angular.isFunction(widgetFilter)){\r\n            widgets = {};\r\n            angular.forEach(dashboard.widgets, function(widget, type){\r\n              if (widgetFilter(widget, type, model)){\r\n                widgets[type] = widget;\r\n              }\r\n            });\r\n          } else {\r\n            widgets = dashboard.widgets;\r\n          }\r\n          addScope.widgets = widgets;\r\n\r\n          // pass createCategories function to scope, if categories option is enabled\r\n          if ($scope.options.categories){\r\n            $scope.createCategories = createCategories;\r\n          }\r\n\r\n          var adfAddTemplatePath = adfTemplatePath + 'widget-add.html';\r\n          if(model.addTemplateUrl) {\r\n            adfAddTemplatePath = model.addTemplateUrl;\r\n          }\r\n\r\n          var opts = {\r\n            scope: addScope,\r\n            templateUrl: adfAddTemplatePath,\r\n            backdrop: 'static'\r\n          };\r\n\r\n          var instance = $uibModal.open(opts);\r\n          addScope.addWidget = function(widget){\r\n            var w = {\r\n              type: widget,\r\n              config: createConfiguration(widget)\r\n            };\r\n            addNewWidgetToModel(model, w, name);\r\n            // close and destroy\r\n            instance.close();\r\n            addScope.$destroy();\r\n\r\n            // check for open edit mode immediately\r\n            if (isEditModeImmediate(widget)){\r\n              openEditMode($scope, w);\r\n            }\r\n          };\r\n          addScope.closeDialog = function(){\r\n            // close and destroy\r\n            instance.close();\r\n            addScope.$destroy();\r\n          };\r\n        };\r\n\r\n        $scope.addNewWidgetToModel = addNewWidgetToModel;\r\n      },\r\n      link: function ($scope, $element, $attr) {\r\n        // pass options to scope\r\n        var options = {\r\n          name: $attr.name,\r\n          editable: true,\r\n          enableConfirmDelete: stringToBoolean($attr.enableconfirmdelete),\r\n          maximizable: stringToBoolean($attr.maximizable),\r\n          collapsible: stringToBoolean($attr.collapsible),\r\n          categories: stringToBoolean($attr.categories)\r\n        };\r\n        if (angular.isDefined($attr.editable)){\r\n          options.editable = stringToBoolean($attr.editable);\r\n        }\r\n        $scope.options = options;\r\n      },\r\n      templateUrl: adfTemplatePath + 'dashboard.html'\r\n    };\r\n  });\r\n","/*\r\n* The MIT License\r\n*\r\n* Copyright (c) 2015, Sebastian Sdorra\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in\r\n* all copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n* SOFTWARE.\r\n*/\r\n\r\n\r\n/* global angular */\r\nangular.module('adf')\r\n  .filter('adfOrderByObjectKey', function($filter) {\r\n    'use strict';\r\n\r\n    return function(item, key){\r\n      var array = [];\r\n      angular.forEach(item, function(value, objectKey){\r\n        value[key] = objectKey;\r\n        array.push(value);\r\n      });\r\n      return $filter('orderBy')(array, key);\r\n    };\r\n  });\r\n","/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n'use strict';\r\n\r\n/**\r\n * @ngdoc object\r\n * @name adf.dashboardProvider\r\n * @description\r\n *\r\n * The dashboardProvider can be used to register structures and widgets.\r\n */\r\nangular.module('adf.provider', [])\r\n  .provider('dashboard', function(){\r\n\r\n    var widgets = {};\r\n    var widgetsPath = '';\r\n    var structures = {};\r\n    var messageTemplate = '<div class=\"alert alert-danger\">{}</div>';\r\n    var loadingTemplate = '\\\r\n      <div class=\"progress progress-striped active\">\\n\\\r\n        <div class=\"progress-bar\" role=\"progressbar\" style=\"width: 100%\">\\n\\\r\n          <span class=\"sr-only\">loading ...</span>\\n\\\r\n        </div>\\n\\\r\n      </div>';\r\n\r\n    // default apply function of widget.edit.apply\r\n    var defaultApplyFunction = function(){\r\n      return true;\r\n    };\r\n\r\n   /**\r\n    * @ngdoc method\r\n    * @name adf.dashboardProvider#widget\r\n    * @methodOf adf.dashboardProvider\r\n    * @description\r\n    *\r\n    * Registers a new widget.\r\n    *\r\n    * @param {string} name of the widget\r\n    * @param {object} widget to be registered.\r\n    *\r\n    *   Object properties:\r\n    *\r\n    *   - `title` - `{string=}` - The title of the widget.\r\n    *   - `description` - `{string=}` - Description of the widget.\r\n    *   - `category` - `{string=}` - Category of the widget.\r\n    *   - `collapsed` - `{boolean=}` - true if the widget should be in collapsed state. Default is false.\r\n    *   - `config` - `{object}` - Predefined widget configuration.\r\n    *   - `controller` - `{string=|function()=}` - Controller fn that should be\r\n    *      associated with newly created scope of the widget or the name of a\r\n    *      {@link http://docs.angularjs.org/api/angular.Module#controller registered controller}\r\n    *      if passed as a string.\r\n    *   - `controllerAs` - `{string=}` - A controller alias name. If present the controller will be\r\n    *      published to scope under the `controllerAs` name.\r\n    *   - `frameless` - `{boolean=}` - false if the widget should be shown in frameless mode. The default is false.\r\n    *   - `styleClass` - `{object}` - space delimited string or map of classes bound to the widget.\r\n    *   - `template` - `{string=|function()=}` - html template as a string.\r\n    *   - `templateUrl` - `{string=}` - path to an html template.\r\n    *   - `reload` - `{boolean=}` - true if the widget could be reloaded. The default is false.\r\n    *   - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\r\n    *      be injected into the controller. If any of these dependencies are promises, the widget\r\n    *      will wait for them all to be resolved or one to be rejected before the controller is\r\n    *      instantiated.\r\n    *      If all the promises are resolved successfully, the values of the resolved promises are\r\n    *      injected.\r\n    *\r\n    *      The map object is:\r\n    *      - `key` – `{string}`: a name of a dependency to be injected into the controller.\r\n    *      - `factory` - `{string|function}`: If `string` then it is an alias for a service.\r\n    *        Otherwise if function, then it is {@link http://docs.angularjs.org/api/AUTO.$injector#invoke injected}\r\n    *        and the return value is treated as the dependency. If the result is a promise, it is\r\n    *        resolved before its value is injected into the controller.\r\n    *   - `resolveAs` - `{string=}` - The name under which the resolve map will be available\r\n    *      on the scope of the widget.\r\n    *   - `edit` - `{object}` - Edit modus of the widget.\r\n    *      - `controller` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\r\n    *      - `controllerAs` - `{string=}` - Same as above, but for the edit mode of the widget.\r\n    *      - `template` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\r\n    *      - `templateUrl` - `{string=}` - Same as above, but for the edit mode of the widget.\r\n    *      - `resolve` - `{Object.<string, function>=}` - Same as above, but for the edit mode of the widget.\r\n    *      - `resolveAs` - `{string=}` - The name under which the resolve map will be available\r\n    *        on the scope of the widget.\r\n    *      - `reload` - {boolean} - true if the widget should be reloaded, after the edit mode is closed.\r\n    *        Default is true.\r\n    *      - `immediate` - {boolean} - The widget enters the edit mode immediately after creation. Default is false.\r\n    *      - `apply` - `{function()=}` - The apply function is called, before the widget is saved.\r\n    *        The function have to return a boolean or an promise which can be resolved to a boolean.\r\n    *        The function can use injection.\r\n    *\r\n    * @returns {Object} self\r\n    */\r\n    this.widget = function(name, widget){\r\n      var w = angular.extend({reload: false, frameless: false}, widget);\r\n      if ( w.edit ){\r\n        var edit = {\r\n          reload: true,\r\n          immediate: false,\r\n          apply: defaultApplyFunction\r\n        };\r\n        angular.extend(edit, w.edit);\r\n        w.edit = edit;\r\n      }\r\n      widgets[name] = w;\r\n      return this;\r\n    };\r\n\r\n    /**\r\n     * @ngdoc method\r\n     * @name adf.dashboardProvider#widgetsPath\r\n     * @methodOf adf.dashboardProvider\r\n     * @description\r\n     *\r\n     * Sets the path to the directory which contains the widgets. The widgets\r\n     * path is used for widgets with a templateUrl which contains the\r\n     * placeholder {widgetsPath}. The placeholder is replaced with the\r\n     * configured value, before the template is loaded, but the template is\r\n     * cached with the unmodified templateUrl (e.g.: {widgetPath}/src/widgets).\r\n     * The default value of widgetPaths is ''.\r\n     *\r\n     *\r\n     * @param {string} path to the directory which contains the widgets\r\n     *\r\n     * @returns {Object} self\r\n     */\r\n    this.widgetsPath = function(path){\r\n      widgetsPath = path;\r\n      return this;\r\n    };\r\n\r\n   /**\r\n    * @ngdoc method\r\n    * @name adf.dashboardProvider#structure\r\n    * @methodOf adf.dashboardProvider\r\n    * @description\r\n    *\r\n    * Registers a new structure.\r\n    *\r\n    * @param {string} name of the structure\r\n    * @param {object} structure to be registered.\r\n    *\r\n    *   Object properties:\r\n    *\r\n    *   - `rows` - `{Array.<Object>}` - Rows of the dashboard structure.\r\n    *     - `styleClass` - `{string}` - CSS Class of the row.\r\n    *     - `columns` - `{Array.<Object>}` - Columns of the row.\r\n    *       - `styleClass` - `{string}` - CSS Class of the column.\r\n    *\r\n    * @returns {Object} self\r\n    */\r\n    this.structure = function(name, structure){\r\n      structures[name] = structure;\r\n      return this;\r\n    };\r\n\r\n   /**\r\n    * @ngdoc method\r\n    * @name adf.dashboardProvider#messageTemplate\r\n    * @methodOf adf.dashboardProvider\r\n    * @description\r\n    *\r\n    * Changes the template for messages.\r\n    *\r\n    * @param {string} template for messages.\r\n    *\r\n    * @returns {Object} self\r\n    */\r\n    this.messageTemplate = function(template){\r\n      messageTemplate = template;\r\n      return this;\r\n    };\r\n\r\n   /**\r\n    * @ngdoc method\r\n    * @name adf.dashboardProvider#loadingTemplate\r\n    * @methodOf adf.dashboardProvider\r\n    * @description\r\n    *\r\n    * Changes the template which is displayed as\r\n    * long as the widget resources are not resolved.\r\n    *\r\n    * @param {string} template loading template\r\n    *\r\n    * @returns {Object} self\r\n    */\r\n    this.loadingTemplate = function(template){\r\n      loadingTemplate = template;\r\n      return this;\r\n    };\r\n\r\n    /**\r\n     * @ngdoc property\r\n     * @name adf.dashboardProvider#widgetCustomTemplatePath\r\n     * @propertyOf adf.dashboardProvider\r\n     * @description\r\n     *\r\n     * Changes the container template for the widgets\r\n     *\r\n     * @param {string} template loading template\r\n     *\r\n     */\r\n    this.widgetCustomTemplateUrl = null;\r\n\r\n   /**\r\n    * @ngdoc service\r\n    * @name adf.dashboard\r\n    * @description\r\n    *\r\n    * The dashboard holds all options, structures and widgets.\r\n    *\r\n    * @property {Array.<Object>} widgets Array of registered widgets.\r\n    * @property {string} widgetsPath Default path for widgets.\r\n    * @property {Array.<Object>} structures Array of registered structures.\r\n    * @property {string} messageTemplate Template for messages.\r\n    * @property {string} loadingTemplate Template for widget loading.\r\n    *\r\n    * @returns {Object} self\r\n    */\r\n    this.$get = function(){\r\n      var cid = 0;\r\n\r\n      return {\r\n        widgets: widgets,\r\n        widgetsPath: widgetsPath,\r\n        structures: structures,\r\n        messageTemplate: messageTemplate,\r\n        loadingTemplate: loadingTemplate,\r\n        widgetCustomTemplateUrl: this.widgetCustomTemplateUrl,\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboard#id\r\n         * @methodOf adf.dashboard\r\n         * @description\r\n         *\r\n         * Creates an ongoing numeric id. The method is used to create ids for\r\n         * columns and widgets in the dashboard.\r\n         */\r\n        id: function(){\r\n          return new Date().getTime() + '-' + (++cid);\r\n        },\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboard#idEqual\r\n         * @methodOf adf.dashboard\r\n         * @description\r\n         *\r\n         * Checks if the given ids are equal.\r\n         *\r\n         * @param {string} id widget or column id\r\n         * @param {string} other widget or column id\r\n         */\r\n         idEquals: function(id, other){\r\n           // use toString, because old ids are numbers\r\n           return ((id) && (other)) && (id.toString() === other.toString());\r\n         }\r\n      };\r\n    };\r\n\r\n  });\r\n","(function(window, undefined) {'use strict';\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n\r\nangular.module('adf', ['adf.provider', 'ui.bootstrap'])\r\n  .value('adfTemplatePath', '../src/templates/')\r\n  .value('rowTemplate', '<adf-dashboard-row row=\"row\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"row in column.rows\" />')\r\n  .value('columnTemplate', '<adf-dashboard-column column=\"column\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"column in row.columns\" />')\r\n  .value('adfVersion', '0.12.0-SNAPSHOT');\r\n\n/*\r\n* The MIT License\r\n*\r\n* Copyright (c) 2015, Sebastian Sdorra\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in\r\n* all copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n* SOFTWARE.\r\n*/\r\n\r\n\r\n/* global angular */\r\nangular.module('adf')\r\n  .directive('adfDashboardColumn', [\"$log\", \"$compile\", \"$rootScope\", \"adfTemplatePath\", \"rowTemplate\", \"dashboard\", function ($log, $compile, $rootScope, adfTemplatePath, rowTemplate, dashboard) {\r\n    \r\n\r\n    /**\r\n     * moves a widget in between a column\r\n     */\r\n    function moveWidgetInColumn($scope, column, evt){\r\n      var widgets = column.widgets;\r\n      // move widget and apply to scope\r\n      $scope.$apply(function(){\r\n        widgets.splice(evt.newIndex, 0, widgets.splice(evt.oldIndex, 1)[0]);\r\n        $rootScope.$broadcast('adfWidgetMovedInColumn');\r\n      });\r\n    }\r\n\r\n    /**\r\n     * finds a widget by its id in the column\r\n     */\r\n    function findWidget(column, index){\r\n      var widget = null;\r\n      for (var i=0; i<column.widgets.length; i++){\r\n        var w = column.widgets[i];\r\n        if (dashboard.idEquals(w.wid,index)){\r\n          widget = w;\r\n          break;\r\n        }\r\n      }\r\n      return widget;\r\n    }\r\n\r\n    /**\r\n     * finds a column by its id in the model\r\n     */\r\n    function findColumn(model, index){\r\n      var column = null;\r\n      for (var i=0; i<model.rows.length; i++){\r\n        var r = model.rows[i];\r\n        for (var j=0; j<r.columns.length; j++){\r\n          var c = r.columns[j];\r\n          if (dashboard.idEquals(c.cid, index)){\r\n            column = c;\r\n            break;\r\n          } else if (c.rows){\r\n            column = findColumn(c, index);\r\n          }\r\n        }\r\n        if (column){\r\n          break;\r\n        }\r\n      }\r\n      return column;\r\n    }\r\n\r\n    /**\r\n     * get the adf id from an html element\r\n     */\r\n    function getId(el){\r\n      var id = el.getAttribute('adf-id');\r\n      return id ? id : '-1';\r\n    }\r\n\r\n    /**\r\n     * adds a widget to a column\r\n     */\r\n    function addWidgetToColumn($scope, model, targetColumn, evt){\r\n      // find source column\r\n      var cid = getId(evt.from);\r\n      var sourceColumn = findColumn(model, cid);\r\n\r\n      if (sourceColumn){\r\n        // find moved widget\r\n        var wid = getId(evt.item);\r\n        var widget = findWidget(sourceColumn, wid);\r\n\r\n        if (widget){\r\n          // add new item and apply to scope\r\n          $scope.$apply(function(){\r\n            if (!targetColumn.widgets) {\r\n              targetColumn.widgets = [];\r\n            }\r\n            targetColumn.widgets.splice(evt.newIndex, 0, widget);\r\n\r\n            $rootScope.$broadcast('adfWidgetAddedToColumn');\r\n          });\r\n        } else {\r\n          $log.warn('could not find widget with id ' + wid);\r\n        }\r\n      } else {\r\n        $log.warn('could not find column with id ' + cid);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * removes a widget from a column\r\n     */\r\n    function removeWidgetFromColumn($scope, column, evt){\r\n      // remove old item and apply to scope\r\n      $scope.$apply(function(){\r\n        column.widgets.splice(evt.oldIndex, 1);\r\n        $rootScope.$broadcast('adfWidgetRemovedFromColumn');\r\n      });\r\n    }\r\n\r\n    /**\r\n     * enable sortable\r\n     */\r\n    function applySortable($scope, $element, model, column){\r\n      // enable drag and drop\r\n      var el = $element[0];\r\n      var sortable = Sortable.create(el, {\r\n        group: 'widgets',\r\n        handle: '.adf-move',\r\n        ghostClass: 'placeholder',\r\n        animation: 150,\r\n        onAdd: function(evt){\r\n          addWidgetToColumn($scope, model, column, evt);\r\n        },\r\n        onRemove: function(evt){\r\n          removeWidgetFromColumn($scope, column, evt);\r\n        },\r\n        onUpdate: function(evt){\r\n          moveWidgetInColumn($scope, column, evt);\r\n        }\r\n      });\r\n\r\n      // destroy sortable on column destroy event\r\n      $element.on('$destroy', function () {\r\n        // check sortable element, before calling destroy\r\n        // see https://github.com/sdorra/angular-dashboard-framework/issues/118\r\n        if (sortable.el){\r\n          sortable.destroy();\r\n        }\r\n      });\r\n    }\r\n\r\n    return {\r\n      restrict: 'E',\r\n      replace: true,\r\n      scope: {\r\n        column: '=',\r\n        editMode: '=',\r\n        continuousEditMode: '=',\r\n        adfModel: '=',\r\n        options: '='\r\n      },\r\n      templateUrl: adfTemplatePath + 'dashboard-column.html',\r\n      link: function ($scope, $element) {\r\n        // set id\r\n        var col = $scope.column;\r\n        if (!col.cid){\r\n          col.cid = dashboard.id();\r\n        }\r\n\r\n        if (angular.isDefined(col.rows) && angular.isArray(col.rows)) {\r\n          // be sure to tell Angular about the injected directive and push the new row directive to the column\r\n          $compile(rowTemplate)($scope, function(cloned) {\r\n            $element.append(cloned);\r\n          });\r\n        } else {\r\n          // enable drag and drop for widget only columns\r\n          applySortable($scope, $element, $scope.adfModel, col);\r\n        }\r\n      }\r\n    };\r\n  }]);\r\n\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n/**\r\n * @ngdoc directive\r\n * @name adf.directive:adfDashboard\r\n * @element div\r\n * @restrict EA\r\n * @scope\r\n * @description\r\n *\r\n * `adfDashboard` is a directive which renders the dashboard with all its\r\n * components. The directive requires a name attribute. The name of the\r\n * dashboard can be used to store the model.\r\n *\r\n * @param {string} name name of the dashboard. This attribute is required.\r\n * @param {boolean=} editable false to disable the editmode of the dashboard.\r\n * @param {boolean=} collapsible true to make widgets collapsible on the dashboard.\r\n * @param {boolean=} maximizable true to add a button for open widgets in a large modal panel.\r\n * @param {boolean=} enableConfirmDelete true to ask before remove an widget from the dashboard.\r\n * @param {string=} structure the default structure of the dashboard.\r\n * @param {object=} adfModel model object of the dashboard.\r\n * @param {function=} adfWidgetFilter function to filter widgets on the add dialog.\r\n * @param {boolean=} continuousEditMode enable continuous edit mode, to fire add/change/remove\r\n *                   events during edit mode not reset it if edit mode is exited.\r\n * @param {boolean=} categories enable categories for the add widget dialog.\r\n */\r\n\r\nangular.module('adf')\r\n  .directive('adfDashboard', [\"$rootScope\", \"$log\", \"$timeout\", \"$uibModal\", \"dashboard\", \"adfTemplatePath\", function ($rootScope, $log, $timeout, $uibModal, dashboard, adfTemplatePath) {\r\n    \r\n\r\n    function stringToBoolean(string){\r\n      switch(angular.isDefined(string) ? string.toLowerCase() : null){\r\n        case 'true': case 'yes': case '1': return true;\r\n        case 'false': case 'no': case '0': case null: return false;\r\n        default: return Boolean(string);\r\n      }\r\n    }\r\n\r\n    function copyWidgets(source, target) {\r\n      if ( source.widgets && source.widgets.length > 0 ){\r\n        var w = source.widgets.shift();\r\n        while (w){\r\n          target.widgets.push(w);\r\n          w = source.widgets.shift();\r\n        }\r\n      }\r\n    }\r\n\r\n    /**\r\n    * Copy widget from old columns to the new model\r\n    * @param object root the model\r\n    * @param array of columns\r\n    * @param counter\r\n    */\r\n    function fillStructure(root, columns, counter) {\r\n      counter = counter || 0;\r\n\r\n      if (angular.isDefined(root.rows)) {\r\n        angular.forEach(root.rows, function (row) {\r\n          angular.forEach(row.columns, function (column) {\r\n            // if the widgets prop doesn't exist, create a new array for it.\r\n            // this allows ui.sortable to do it's thing without error\r\n            if (!column.widgets) {\r\n              column.widgets = [];\r\n            }\r\n\r\n            // if a column exist at the counter index, copy over the column\r\n            if (angular.isDefined(columns[counter])) {\r\n              // do not add widgets to a column, which uses nested rows\r\n              if (angular.isUndefined(column.rows)){\r\n                copyWidgets(columns[counter], column);\r\n                counter++;\r\n              }\r\n            }\r\n\r\n            // run fillStructure again for any sub rows/columns\r\n            counter = fillStructure(column, columns, counter);\r\n          });\r\n        });\r\n      }\r\n      return counter;\r\n    }\r\n\r\n    /**\r\n    * Read Columns: recursively searches an object for the 'columns' property\r\n    * @param object model\r\n    * @param array  an array of existing columns; used when recursion happens\r\n    */\r\n    function readColumns(root, columns) {\r\n      columns = columns || [];\r\n\r\n      if (angular.isDefined(root.rows)) {\r\n        angular.forEach(root.rows, function (row) {\r\n          angular.forEach(row.columns, function (col) {\r\n            columns.push(col);\r\n            // keep reading columns until we can't any more\r\n            readColumns(col, columns);\r\n          });\r\n        });\r\n      }\r\n\r\n      return columns;\r\n    }\r\n\r\n    function changeStructure(model, structure){\r\n      var columns = readColumns(model);\r\n      var counter = 0;\r\n\r\n      model.rows = angular.copy(structure.rows);\r\n\r\n      while ( counter < columns.length ){\r\n        counter = fillStructure(model, columns, counter);\r\n      }\r\n    }\r\n\r\n    function createConfiguration(type){\r\n      var cfg = {};\r\n      var config = dashboard.widgets[type].config;\r\n      if (config){\r\n        cfg = angular.copy(config);\r\n      }\r\n      return cfg;\r\n    }\r\n\r\n    /**\r\n     * Find first widget column in model.\r\n     *\r\n     * @param dashboard model\r\n     */\r\n    function findFirstWidgetColumn(model){\r\n      var column = null;\r\n      if (!angular.isArray(model.rows)){\r\n        $log.error('model does not have any rows');\r\n        return null;\r\n      }\r\n      for (var i=0; i<model.rows.length; i++){\r\n        var row = model.rows[i];\r\n        if (angular.isArray(row.columns)){\r\n          for (var j=0; j<row.columns.length; j++){\r\n            var col = row.columns[j];\r\n            if (!col.rows){\r\n              column = col;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n        if (column){\r\n          break;\r\n        }\r\n      }\r\n      return column;\r\n    }\r\n\r\n    /**\r\n     * Adds the widget to first column of the model.\r\n     *\r\n     * @param dashboard model\r\n     * @param widget to add to model\r\n     * @param name name of the dashboard\r\n     */\r\n    function addNewWidgetToModel(model, widget, name){\r\n      if (model){\r\n        var column = findFirstWidgetColumn(model);\r\n        if (column){\r\n          if (!column.widgets){\r\n            column.widgets = [];\r\n          }\r\n          column.widgets.unshift(widget);\r\n\r\n          // broadcast added event\r\n          $rootScope.$broadcast('adfWidgetAdded', name, model, widget);\r\n        } else {\r\n          $log.error('could not find first widget column');\r\n        }\r\n      } else {\r\n        $log.error('model is undefined');\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Checks if the edit mode of the widget should be opened immediately.\r\n     *\r\n     * @param widget type\r\n     */\r\n    function isEditModeImmediate(type){\r\n      var widget = dashboard.widgets[type];\r\n      return widget && widget.edit && widget.edit.immediate;\r\n    }\r\n\r\n    /**\r\n     * Opens the edit mode of the specified widget.\r\n     *\r\n     * @param dashboard scope\r\n     * @param widget\r\n     */\r\n    function openEditMode($scope, widget){\r\n      // wait some time before fire enter edit mode event\r\n      $timeout(function(){\r\n        $scope.$broadcast('adfWidgetEnterEditMode', widget);\r\n      }, 200);\r\n    }\r\n\r\n    /**\r\n     * Splits an object into an array multiple objects inside.\r\n     *\r\n     * @param object source object\r\n     * @param size size of array\r\n     *\r\n     * @return array of splitted objects\r\n     */\r\n    function split(object, size) {\r\n      var arr = [];\r\n      var i = 0;\r\n      angular.forEach(object, function(value, key){\r\n        var index = i++ % size;\r\n        if (!arr[index]){\r\n          arr[index] = {};\r\n        }\r\n        arr[index][key] = value;\r\n      });\r\n      return arr;\r\n    }\r\n\r\n    /**\r\n     * Creates object with the category name as key and an array of widgets as value.\r\n     *\r\n     * @param widgets array of widgets\r\n     *\r\n     * @return array of categories\r\n     */\r\n    function createCategories(widgets){\r\n      var categories = {};\r\n      angular.forEach(widgets, function(widget){\r\n        var category = widget.category;\r\n        // if the widget has no category use a default one\r\n        if (!category){\r\n          category = 'Miscellaneous';\r\n        }\r\n        // push widget to category array\r\n        if (!categories[category]){\r\n          categories[category] = [];\r\n        }\r\n        categories[category].push(widget);\r\n      });\r\n      return categories;\r\n    }\r\n\r\n    return {\r\n      replace: true,\r\n      restrict: 'EA',\r\n      transclude : false,\r\n      scope: {\r\n        structure: '@',\r\n        name: '@',\r\n        collapsible: '@',\r\n        editable: '@',\r\n        editMode: '@',\r\n        continuousEditMode: '=',\r\n        maximizable: '@',\r\n        adfModel: '=',\r\n        adfWidgetFilter: '=',\r\n        categories: '@'\r\n      },\r\n      controller: [\"$scope\", function($scope){\r\n        var model = {};\r\n        var structure = {};\r\n        var widgetFilter = null;\r\n        var structureName = {};\r\n        var name = $scope.name;\r\n\r\n        // Watching for changes on adfModel\r\n        $scope.$watch('adfModel', function(oldVal, newVal) {\r\n          // has model changed or is the model attribute not set\r\n          if (newVal !== null || (oldVal === null && newVal === null)) {\r\n            model = $scope.adfModel;\r\n            widgetFilter = $scope.adfWidgetFilter;\r\n            if ( ! model || ! model.rows ){\r\n              structureName = $scope.structure;\r\n              structure = dashboard.structures[structureName];\r\n              if (structure){\r\n                if (model){\r\n                  model.rows = angular.copy(structure).rows;\r\n                } else {\r\n                  model = angular.copy(structure);\r\n                }\r\n                model.structure = structureName;\r\n              } else {\r\n                $log.error( 'could not find structure ' + structureName);\r\n              }\r\n            }\r\n\r\n            if (model) {\r\n              if (!model.title){\r\n                model.title = 'Dashboard';\r\n              }\r\n              if (!model.titleTemplateUrl) {\r\n                model.titleTemplateUrl = adfTemplatePath + 'dashboard-title.html';\r\n              }\r\n              $scope.model = model;\r\n            } else {\r\n              $log.error('could not find or create model');\r\n            }\r\n          }\r\n        }, true);\r\n\r\n        // edit mode\r\n        $scope.editMode = false;\r\n        $scope.editClass = '';\r\n\r\n        $scope.toggleEditMode = function(){\r\n          $scope.editMode = ! $scope.editMode;\r\n          if ($scope.editMode){\r\n            if (!$scope.continuousEditMode) {\r\n              $scope.modelCopy = angular.copy($scope.adfModel, {});\r\n              $rootScope.$broadcast('adfIsEditMode');\r\n            }\r\n          }\r\n\r\n          if (!$scope.editMode){\r\n            $rootScope.$broadcast('adfDashboardChanged', name, model);\r\n          }\r\n        };\r\n\r\n        $scope.$on('adfToggleEditMode', function() {\r\n            $scope.toggleEditMode();\r\n        });\r\n\r\n        $scope.collapseAll = function(collapseExpandStatus){\r\n          $rootScope.$broadcast('adfDashboardCollapseExpand',{collapseExpandStatus : collapseExpandStatus});\r\n        };\r\n\r\n        $scope.cancelEditMode = function(){\r\n          $scope.editMode = false;\r\n          if (!$scope.continuousEditMode) {\r\n            $scope.modelCopy = angular.copy($scope.modelCopy, $scope.adfModel);\r\n          }\r\n          $rootScope.$broadcast('adfDashboardEditsCancelled');\r\n        };\r\n\r\n        // edit dashboard settings\r\n        $scope.editDashboardDialog = function(){\r\n          var editDashboardScope = $scope.$new();\r\n          // create a copy of the title, to avoid changing the title to\r\n          // \"dashboard\" if the field is empty\r\n          editDashboardScope.copy = {\r\n            title: model.title\r\n          };\r\n\r\n          // pass dashboard structure to scope\r\n          editDashboardScope.structures = dashboard.structures;\r\n\r\n          // pass split function to scope, to be able to display structures in multiple columns\r\n          editDashboardScope.split = split;\r\n\r\n          var adfEditTemplatePath = adfTemplatePath + 'dashboard-edit.html';\r\n          if(model.editTemplateUrl) {\r\n            adfEditTemplatePath = model.editTemplateUrl;\r\n          }\r\n          var instance = $uibModal.open({\r\n            scope: editDashboardScope,\r\n            templateUrl: adfEditTemplatePath,\r\n            backdrop: 'static',\r\n            size: 'lg'\r\n          });\r\n          editDashboardScope.changeStructure = function(name, structure){\r\n            $log.info('change structure to ' + name);\r\n            changeStructure(model, structure);\r\n            if (model.structure !== name){\r\n              model.structure = name;\r\n            }\r\n          };\r\n          editDashboardScope.closeDialog = function(){\r\n            // copy the new title back to the model\r\n            model.title = editDashboardScope.copy.title;\r\n            // close modal and destroy the scope\r\n            instance.close();\r\n            editDashboardScope.$destroy();\r\n          };\r\n        };\r\n\r\n        // add widget dialog\r\n        $scope.addWidgetDialog = function(){\r\n          var addScope = $scope.$new();\r\n          var model = $scope.model;\r\n          var widgets;\r\n          if (angular.isFunction(widgetFilter)){\r\n            widgets = {};\r\n            angular.forEach(dashboard.widgets, function(widget, type){\r\n              if (widgetFilter(widget, type, model)){\r\n                widgets[type] = widget;\r\n              }\r\n            });\r\n          } else {\r\n            widgets = dashboard.widgets;\r\n          }\r\n          addScope.widgets = widgets;\r\n\r\n          // pass createCategories function to scope, if categories option is enabled\r\n          if ($scope.options.categories){\r\n            $scope.createCategories = createCategories;\r\n          }\r\n\r\n          var adfAddTemplatePath = adfTemplatePath + 'widget-add.html';\r\n          if(model.addTemplateUrl) {\r\n            adfAddTemplatePath = model.addTemplateUrl;\r\n          }\r\n\r\n          var opts = {\r\n            scope: addScope,\r\n            templateUrl: adfAddTemplatePath,\r\n            backdrop: 'static'\r\n          };\r\n\r\n          var instance = $uibModal.open(opts);\r\n          addScope.addWidget = function(widget){\r\n            var w = {\r\n              type: widget,\r\n              config: createConfiguration(widget)\r\n            };\r\n            addNewWidgetToModel(model, w, name);\r\n            // close and destroy\r\n            instance.close();\r\n            addScope.$destroy();\r\n\r\n            // check for open edit mode immediately\r\n            if (isEditModeImmediate(widget)){\r\n              openEditMode($scope, w);\r\n            }\r\n          };\r\n          addScope.closeDialog = function(){\r\n            // close and destroy\r\n            instance.close();\r\n            addScope.$destroy();\r\n          };\r\n        };\r\n\r\n        $scope.addNewWidgetToModel = addNewWidgetToModel;\r\n      }],\r\n      link: function ($scope, $element, $attr) {\r\n        // pass options to scope\r\n        var options = {\r\n          name: $attr.name,\r\n          editable: true,\r\n          enableConfirmDelete: stringToBoolean($attr.enableconfirmdelete),\r\n          maximizable: stringToBoolean($attr.maximizable),\r\n          collapsible: stringToBoolean($attr.collapsible),\r\n          categories: stringToBoolean($attr.categories)\r\n        };\r\n        if (angular.isDefined($attr.editable)){\r\n          options.editable = stringToBoolean($attr.editable);\r\n        }\r\n        $scope.options = options;\r\n      },\r\n      templateUrl: adfTemplatePath + 'dashboard.html'\r\n    };\r\n  }]);\r\n\n/*\r\n* The MIT License\r\n*\r\n* Copyright (c) 2015, Sebastian Sdorra\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in\r\n* all copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n* SOFTWARE.\r\n*/\r\n\r\n\r\n/* global angular */\r\nangular.module('adf')\r\n  .filter('adfOrderByObjectKey', [\"$filter\", function($filter) {\r\n    \r\n\r\n    return function(item, key){\r\n      var array = [];\r\n      angular.forEach(item, function(value, objectKey){\r\n        value[key] = objectKey;\r\n        array.push(value);\r\n      });\r\n      return $filter('orderBy')(array, key);\r\n    };\r\n  }]);\r\n\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n\r\n/**\r\n * @ngdoc object\r\n * @name adf.dashboardProvider\r\n * @description\r\n *\r\n * The dashboardProvider can be used to register structures and widgets.\r\n */\r\nangular.module('adf.provider', [])\r\n  .provider('dashboard', function(){\r\n\r\n    var widgets = {};\r\n    var widgetsPath = '';\r\n    var structures = {};\r\n    var messageTemplate = '<div class=\"alert alert-danger\">{}</div>';\r\n    var loadingTemplate = '\\\r\n      <div class=\"progress progress-striped active\">\\n\\\r\n        <div class=\"progress-bar\" role=\"progressbar\" style=\"width: 100%\">\\n\\\r\n          <span class=\"sr-only\">loading ...</span>\\n\\\r\n        </div>\\n\\\r\n      </div>';\r\n\r\n    // default apply function of widget.edit.apply\r\n    var defaultApplyFunction = function(){\r\n      return true;\r\n    };\r\n\r\n   /**\r\n    * @ngdoc method\r\n    * @name adf.dashboardProvider#widget\r\n    * @methodOf adf.dashboardProvider\r\n    * @description\r\n    *\r\n    * Registers a new widget.\r\n    *\r\n    * @param {string} name of the widget\r\n    * @param {object} widget to be registered.\r\n    *\r\n    *   Object properties:\r\n    *\r\n    *   - `title` - `{string=}` - The title of the widget.\r\n    *   - `description` - `{string=}` - Description of the widget.\r\n    *   - `category` - `{string=}` - Category of the widget.\r\n    *   - `collapsed` - `{boolean=}` - true if the widget should be in collapsed state. Default is false.\r\n    *   - `config` - `{object}` - Predefined widget configuration.\r\n    *   - `controller` - `{string=|function()=}` - Controller fn that should be\r\n    *      associated with newly created scope of the widget or the name of a\r\n    *      {@link http://docs.angularjs.org/api/angular.Module#controller registered controller}\r\n    *      if passed as a string.\r\n    *   - `controllerAs` - `{string=}` - A controller alias name. If present the controller will be\r\n    *      published to scope under the `controllerAs` name.\r\n    *   - `frameless` - `{boolean=}` - false if the widget should be shown in frameless mode. The default is false.\r\n    *   - `styleClass` - `{object}` - space delimited string or map of classes bound to the widget.\r\n    *   - `template` - `{string=|function()=}` - html template as a string.\r\n    *   - `templateUrl` - `{string=}` - path to an html template.\r\n    *   - `reload` - `{boolean=}` - true if the widget could be reloaded. The default is false.\r\n    *   - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\r\n    *      be injected into the controller. If any of these dependencies are promises, the widget\r\n    *      will wait for them all to be resolved or one to be rejected before the controller is\r\n    *      instantiated.\r\n    *      If all the promises are resolved successfully, the values of the resolved promises are\r\n    *      injected.\r\n    *\r\n    *      The map object is:\r\n    *      - `key` – `{string}`: a name of a dependency to be injected into the controller.\r\n    *      - `factory` - `{string|function}`: If `string` then it is an alias for a service.\r\n    *        Otherwise if function, then it is {@link http://docs.angularjs.org/api/AUTO.$injector#invoke injected}\r\n    *        and the return value is treated as the dependency. If the result is a promise, it is\r\n    *        resolved before its value is injected into the controller.\r\n    *   - `resolveAs` - `{string=}` - The name under which the resolve map will be available\r\n    *      on the scope of the widget.\r\n    *   - `edit` - `{object}` - Edit modus of the widget.\r\n    *      - `controller` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\r\n    *      - `controllerAs` - `{string=}` - Same as above, but for the edit mode of the widget.\r\n    *      - `template` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\r\n    *      - `templateUrl` - `{string=}` - Same as above, but for the edit mode of the widget.\r\n    *      - `resolve` - `{Object.<string, function>=}` - Same as above, but for the edit mode of the widget.\r\n    *      - `resolveAs` - `{string=}` - The name under which the resolve map will be available\r\n    *        on the scope of the widget.\r\n    *      - `reload` - {boolean} - true if the widget should be reloaded, after the edit mode is closed.\r\n    *        Default is true.\r\n    *      - `immediate` - {boolean} - The widget enters the edit mode immediately after creation. Default is false.\r\n    *      - `apply` - `{function()=}` - The apply function is called, before the widget is saved.\r\n    *        The function have to return a boolean or an promise which can be resolved to a boolean.\r\n    *        The function can use injection.\r\n    *\r\n    * @returns {Object} self\r\n    */\r\n    this.widget = function(name, widget){\r\n      var w = angular.extend({reload: false, frameless: false}, widget);\r\n      if ( w.edit ){\r\n        var edit = {\r\n          reload: true,\r\n          immediate: false,\r\n          apply: defaultApplyFunction\r\n        };\r\n        angular.extend(edit, w.edit);\r\n        w.edit = edit;\r\n      }\r\n      widgets[name] = w;\r\n      return this;\r\n    };\r\n\r\n    /**\r\n     * @ngdoc method\r\n     * @name adf.dashboardProvider#widgetsPath\r\n     * @methodOf adf.dashboardProvider\r\n     * @description\r\n     *\r\n     * Sets the path to the directory which contains the widgets. The widgets\r\n     * path is used for widgets with a templateUrl which contains the\r\n     * placeholder {widgetsPath}. The placeholder is replaced with the\r\n     * configured value, before the template is loaded, but the template is\r\n     * cached with the unmodified templateUrl (e.g.: {widgetPath}/src/widgets).\r\n     * The default value of widgetPaths is ''.\r\n     *\r\n     *\r\n     * @param {string} path to the directory which contains the widgets\r\n     *\r\n     * @returns {Object} self\r\n     */\r\n    this.widgetsPath = function(path){\r\n      widgetsPath = path;\r\n      return this;\r\n    };\r\n\r\n   /**\r\n    * @ngdoc method\r\n    * @name adf.dashboardProvider#structure\r\n    * @methodOf adf.dashboardProvider\r\n    * @description\r\n    *\r\n    * Registers a new structure.\r\n    *\r\n    * @param {string} name of the structure\r\n    * @param {object} structure to be registered.\r\n    *\r\n    *   Object properties:\r\n    *\r\n    *   - `rows` - `{Array.<Object>}` - Rows of the dashboard structure.\r\n    *     - `styleClass` - `{string}` - CSS Class of the row.\r\n    *     - `columns` - `{Array.<Object>}` - Columns of the row.\r\n    *       - `styleClass` - `{string}` - CSS Class of the column.\r\n    *\r\n    * @returns {Object} self\r\n    */\r\n    this.structure = function(name, structure){\r\n      structures[name] = structure;\r\n      return this;\r\n    };\r\n\r\n   /**\r\n    * @ngdoc method\r\n    * @name adf.dashboardProvider#messageTemplate\r\n    * @methodOf adf.dashboardProvider\r\n    * @description\r\n    *\r\n    * Changes the template for messages.\r\n    *\r\n    * @param {string} template for messages.\r\n    *\r\n    * @returns {Object} self\r\n    */\r\n    this.messageTemplate = function(template){\r\n      messageTemplate = template;\r\n      return this;\r\n    };\r\n\r\n   /**\r\n    * @ngdoc method\r\n    * @name adf.dashboardProvider#loadingTemplate\r\n    * @methodOf adf.dashboardProvider\r\n    * @description\r\n    *\r\n    * Changes the template which is displayed as\r\n    * long as the widget resources are not resolved.\r\n    *\r\n    * @param {string} template loading template\r\n    *\r\n    * @returns {Object} self\r\n    */\r\n    this.loadingTemplate = function(template){\r\n      loadingTemplate = template;\r\n      return this;\r\n    };\r\n\r\n    /**\r\n     * @ngdoc property\r\n     * @name adf.dashboardProvider#widgetCustomTemplatePath\r\n     * @propertyOf adf.dashboardProvider\r\n     * @description\r\n     *\r\n     * Changes the container template for the widgets\r\n     *\r\n     * @param {string} template loading template\r\n     *\r\n     */\r\n    this.widgetCustomTemplateUrl = null;\r\n\r\n   /**\r\n    * @ngdoc service\r\n    * @name adf.dashboard\r\n    * @description\r\n    *\r\n    * The dashboard holds all options, structures and widgets.\r\n    *\r\n    * @property {Array.<Object>} widgets Array of registered widgets.\r\n    * @property {string} widgetsPath Default path for widgets.\r\n    * @property {Array.<Object>} structures Array of registered structures.\r\n    * @property {string} messageTemplate Template for messages.\r\n    * @property {string} loadingTemplate Template for widget loading.\r\n    *\r\n    * @returns {Object} self\r\n    */\r\n    this.$get = function(){\r\n      var cid = 0;\r\n\r\n      return {\r\n        widgets: widgets,\r\n        widgetsPath: widgetsPath,\r\n        structures: structures,\r\n        messageTemplate: messageTemplate,\r\n        loadingTemplate: loadingTemplate,\r\n        widgetCustomTemplateUrl: this.widgetCustomTemplateUrl,\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboard#id\r\n         * @methodOf adf.dashboard\r\n         * @description\r\n         *\r\n         * Creates an ongoing numeric id. The method is used to create ids for\r\n         * columns and widgets in the dashboard.\r\n         */\r\n        id: function(){\r\n          return new Date().getTime() + '-' + (++cid);\r\n        },\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboard#idEqual\r\n         * @methodOf adf.dashboard\r\n         * @description\r\n         *\r\n         * Checks if the given ids are equal.\r\n         *\r\n         * @param {string} id widget or column id\r\n         * @param {string} other widget or column id\r\n         */\r\n         idEquals: function(id, other){\r\n           // use toString, because old ids are numbers\r\n           return ((id) && (other)) && (id.toString() === other.toString());\r\n         }\r\n      };\r\n    };\r\n\r\n  });\r\n\n/*\r\n* The MIT License\r\n*\r\n* Copyright (c) 2015, Sebastian Sdorra\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in\r\n* all copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n* SOFTWARE.\r\n*/\r\n\r\n\r\n/* global angular */\r\nangular.module('adf')\r\n  .directive('adfDashboardRow', [\"$compile\", \"adfTemplatePath\", \"columnTemplate\", function ($compile, adfTemplatePath, columnTemplate) {\r\n    \r\n\r\n    return {\r\n      restrict: 'E',\r\n      replace: true,\r\n      scope: {\r\n        row: '=',\r\n        adfModel: '=',\r\n        editMode: '=',\r\n        continuousEditMode: '=',\r\n        options: '='\r\n      },\r\n      templateUrl: adfTemplatePath + 'dashboard-row.html',\r\n      link: function($scope, $element) {\r\n        if (angular.isDefined($scope.row.columns) && angular.isArray($scope.row.columns)) {\r\n          $compile(columnTemplate)($scope, function(cloned) {\r\n            $element.append(cloned);\r\n          });\r\n        }\r\n      }\r\n    };\r\n  }]);\r\n\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n\r\n/* global angular */\r\nangular.module('adf')\r\n  .directive('adfStructurePreview', [\"adfTemplatePath\", function(adfTemplatePath) {\r\n\r\n    function adjustRowHeight(container){\r\n      if (container.rows && container.rows.length > 0){\r\n        var height = 100 / container.rows.length;\r\n        angular.forEach(container.rows, function(row){\r\n          row.style = {\r\n            height: height + '%'\r\n          }\r\n\r\n          if (row.columns){\r\n            angular.forEach(row.columns, function(column){\r\n              adjustRowHeight(column);\r\n            });\r\n          }\r\n        });\r\n      }\r\n    }\r\n\r\n    function prepareStructure($scope){\r\n      var structure = angular.copy($scope.structure);\r\n      adjustRowHeight(structure);\r\n      $scope.preview = structure;\r\n    }\r\n\r\n    return {\r\n      restrict: 'E',\r\n      replace: true,\r\n      scope: {\r\n        name: '=',\r\n        structure: '=',\r\n        selected: '='\r\n      },\r\n      templateUrl: adfTemplatePath + 'structure-preview.html',\r\n      link: prepareStructure\r\n    };\r\n  }]);\r\n\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n\r\nangular.module('adf')\r\n  .directive('adfWidgetContent', [\"$log\", \"$q\", \"widgetService\", \"$compile\", \"$controller\", \"$injector\", \"dashboard\", function($log, $q, widgetService,\r\n          $compile, $controller, $injector, dashboard) {\r\n\r\n    function compileWidget($scope, $element, currentScope) {\r\n      var model = $scope.model;\r\n      var content = $scope.content;\r\n\r\n      // display loading template\r\n      $element.html(dashboard.loadingTemplate);\r\n\r\n      // create new scope\r\n      var templateScope = $scope.$new();\r\n\r\n      // pass config object to scope\r\n      if (!model.config) {\r\n        model.config = {};\r\n      }\r\n\r\n      templateScope.config = model.config;\r\n\r\n      // local injections\r\n      var base = {\r\n        $scope: templateScope,\r\n        widget: model,\r\n        config: model.config\r\n      };\r\n\r\n      // get resolve promises from content object\r\n      var resolvers = {};\r\n      resolvers.$tpl = widgetService.getTemplate(content);\r\n      if (content.resolve) {\r\n        angular.forEach(content.resolve, function(promise, key) {\r\n          if (angular.isString(promise)) {\r\n            resolvers[key] = $injector.get(promise);\r\n          } else {\r\n            resolvers[key] = $injector.invoke(promise, promise, base);\r\n          }\r\n        });\r\n      }\r\n\r\n      // resolve all resolvers\r\n      $q.all(resolvers).then(function(locals) {\r\n        angular.extend(locals, base);\r\n\r\n        // pass resolve map to template scope as defined in resolveAs\r\n        if (content.resolveAs){\r\n          templateScope[content.resolveAs] = locals;\r\n        }\r\n\r\n        // compile & render template\r\n        var template = locals.$tpl;\r\n        $element.html(template);\r\n        if (content.controller) {\r\n          var templateCtrl = $controller(content.controller, locals);\r\n          if (content.controllerAs) {\r\n            templateScope[content.controllerAs] = templateCtrl;\r\n          }\r\n          $element.children().data('$ngControllerController', templateCtrl);\r\n        }\r\n        $compile($element.contents())(templateScope);\r\n      }, function(reason) {\r\n        // handle promise rejection\r\n        var msg = 'Could not resolve all promises';\r\n        if (reason) {\r\n          msg += ': ' + reason;\r\n        }\r\n        $log.warn(msg);\r\n        $element.html(dashboard.messageTemplate.replace(/{}/g, msg));\r\n      });\r\n\r\n      // destroy old scope\r\n      if (currentScope) {\r\n        currentScope.$destroy();\r\n      }\r\n\r\n      return templateScope;\r\n    }\r\n\r\n    return {\r\n      replace: true,\r\n      restrict: 'EA',\r\n      transclude: false,\r\n      scope: {\r\n        model: '=',\r\n        content: '='\r\n      },\r\n      link: function($scope, $element) {\r\n        var currentScope = compileWidget($scope, $element, null);\r\n        $scope.$on('widgetConfigChanged', function() {\r\n          currentScope = compileWidget($scope, $element, currentScope);\r\n        });\r\n        $scope.$on('widgetReload', function() {\r\n          currentScope = compileWidget($scope, $element, currentScope);\r\n        });\r\n      }\r\n    };\r\n\r\n  }]);\r\n\n\r\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n/**\r\n * The widget service provide helper functions to render widgets and their content.\r\n */\r\nangular.module('adf')\r\n  .factory('widgetService', [\"$http\", \"$q\", \"$sce\", \"$templateCache\", \"dashboard\", function($http, $q, $sce, $templateCache, dashboard) {\r\n    \r\n\r\n    function parseUrl(url) {\r\n      var parsedUrl = url;\r\n      if (url.indexOf('{widgetsPath}') >= 0) {\r\n        parsedUrl = url.replace('{widgetsPath}', dashboard.widgetsPath)\r\n                .replace('//', '/');\r\n        if (parsedUrl.indexOf('/') === 0) {\r\n          parsedUrl = parsedUrl.substring(1);\r\n        }\r\n      }\r\n      return parsedUrl;\r\n    }\r\n\r\n    var exposed = {};\r\n\r\n    exposed.getTemplate = function(widget){\r\n      var deferred = $q.defer();\r\n\r\n      if (widget.template) {\r\n        deferred.resolve(widget.template);\r\n      } else if (widget.templateUrl) {\r\n        // try to fetch template from cache\r\n        var tpl = $templateCache.get(widget.templateUrl);\r\n        if (tpl) {\r\n          deferred.resolve(tpl);\r\n        } else {\r\n          var url = $sce.getTrustedResourceUrl(parseUrl(widget.templateUrl));\r\n          $http.get(url)\r\n               .success(function(response) {\r\n                 // put response to cache, with unmodified url as key\r\n                 $templateCache.put(widget.templateUrl, response);\r\n                 deferred.resolve(response);\r\n               })\r\n               .error(function() {\r\n                 deferred.reject('could not load template');\r\n               });\r\n        }\r\n      }\r\n\r\n      return deferred.promise;\r\n    };\r\n\r\n    return exposed;\r\n  }]);\r\n\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n\r\nangular.module('adf')\r\n  .directive('adfWidget', [\"$injector\", \"$q\", \"$log\", \"$uibModal\", \"$rootScope\", \"dashboard\", \"adfTemplatePath\", function($injector, $q, $log, $uibModal, $rootScope, dashboard, adfTemplatePath) {\r\n\r\n    function getWidgetTemplateUrl() {\r\n        var templateUrl = adfTemplatePath + 'widget.html';\r\n        if (dashboard.widgetCustomTemplateUrl) {\r\n            templateUrl = dashboard.widgetCustomTemplateUrl;\r\n        }\r\n\r\n        return templateUrl;\r\n    }\r\n\r\n    function preLink($scope) {\r\n      var definition = $scope.definition;\r\n      if (definition) {\r\n        var w = dashboard.widgets[definition.type];\r\n        if (w) {\r\n          // pass title\r\n          if (!definition.title) {\r\n            definition.title = w.title;\r\n          }\r\n\r\n          if (!definition.titleTemplateUrl) {\r\n            definition.titleTemplateUrl = adfTemplatePath + 'widget-title.html';\r\n            if (w.titleTemplateUrl) {\r\n              definition.titleTemplateUrl = w.titleTemplateUrl;\r\n            }\r\n          }\r\n\r\n          if (!definition.editTemplateUrl) {\r\n            definition.editTemplateUrl = adfTemplatePath + 'widget-edit.html';\r\n            if (w.editTemplateUrl) {\r\n              definition.editTemplateUrl = w.editTemplateUrl;\r\n            }\r\n          }\r\n\r\n          if (!definition.titleTemplateUrl) {\r\n            definition.frameless = w.frameless;\r\n          }\r\n\r\n          if (!definition.styleClass) {\r\n            definition.styleClass = w.styleClass;\r\n          }\r\n\r\n          // set id for sortable\r\n          if (!definition.wid) {\r\n            definition.wid = dashboard.id();\r\n          }\r\n\r\n          // pass copy of widget to scope\r\n          $scope.widget = angular.copy(w);\r\n\r\n          // create config object\r\n          var config = definition.config;\r\n          if (config) {\r\n            if (angular.isString(config)) {\r\n              config = angular.fromJson(config);\r\n            }\r\n          } else {\r\n            config = {};\r\n          }\r\n\r\n          // pass config to scope\r\n          $scope.config = config;\r\n\r\n          // collapse exposed $scope.widgetState property\r\n          if (!$scope.widgetState) {\r\n            $scope.widgetState = {};\r\n            $scope.widgetState.isCollapsed= (w.collapsed === true) ? w.collapsed : false;\r\n          }\r\n\r\n        } else {\r\n          $log.warn('could not find widget ' + definition.type);\r\n        }\r\n      } else {\r\n        $log.debug('definition not specified, widget was probably removed');\r\n      }\r\n    }\r\n\r\n    function postLink($scope, $element) {\r\n      var definition = $scope.definition;\r\n      if (definition) {\r\n        // bind close function\r\n\r\n        var deleteWidget = function() {\r\n          var column = $scope.col;\r\n          if (column) {\r\n            var index = column.widgets.indexOf(definition);\r\n            if (index >= 0) {\r\n              column.widgets.splice(index, 1);\r\n            }\r\n          }\r\n          $element.remove();\r\n          $rootScope.$broadcast('adfWidgetRemovedFromColumn');\r\n        };\r\n\r\n        $scope.remove = function() {\r\n          if ($scope.options.enableConfirmDelete) {\r\n            var deleteScope = $scope.$new();\r\n            var deleteTemplateUrl = adfTemplatePath + 'widget-delete.html';\r\n            if (definition.deleteTemplateUrl) {\r\n              deleteTemplateUrl = definition.deleteTemplateUrl;\r\n            }\r\n            var opts = {\r\n              scope: deleteScope,\r\n              templateUrl: deleteTemplateUrl,\r\n              backdrop: 'static'\r\n            };\r\n            var instance = $uibModal.open(opts);\r\n\r\n            deleteScope.closeDialog = function() {\r\n              instance.close();\r\n              deleteScope.$destroy();\r\n            };\r\n            deleteScope.deleteDialog = function() {\r\n              deleteWidget();\r\n              deleteScope.closeDialog();\r\n            };\r\n          } else {\r\n            deleteWidget();\r\n          }\r\n        };\r\n\r\n        // bind reload function\r\n        $scope.reload = function() {\r\n          $scope.$broadcast('widgetReload');\r\n        };\r\n\r\n        // bind edit function\r\n        $scope.edit = function() {\r\n          var editScope = $scope.$new();\r\n          editScope.definition = angular.copy(definition);\r\n\r\n          var adfEditTemplatePath = adfTemplatePath + 'widget-edit.html';\r\n          if (definition.editTemplateUrl) {\r\n            adfEditTemplatePath = definition.editTemplateUrl;\r\n          }\r\n\r\n          var opts = {\r\n            scope: editScope,\r\n            templateUrl: adfEditTemplatePath,\r\n            backdrop: 'static'\r\n          };\r\n\r\n          var instance = $uibModal.open(opts);\r\n\r\n          editScope.closeDialog = function() {\r\n            instance.close();\r\n            editScope.$destroy();\r\n          };\r\n\r\n          // TODO create util method\r\n          function createApplyPromise(result){\r\n            var promise;\r\n            if (typeof result === 'boolean'){\r\n              var deferred = $q.defer();\r\n              if (result){\r\n                deferred.resolve();\r\n              } else {\r\n                deferred.reject();\r\n              }\r\n              promise = deferred.promise;\r\n            } else {\r\n              promise = $q.when(result);\r\n            }\r\n            return promise;\r\n          }\r\n\r\n          editScope.saveDialog = function() {\r\n            // clear validation error\r\n            editScope.validationError = null;\r\n\r\n            // build injection locals\r\n            var widget = $scope.widget;\r\n\r\n            // create a default apply method for widgets\r\n            // without edit mode\r\n            // see issue https://goo.gl/KHPQLZ\r\n            var applyFn;\r\n            if (widget.edit){\r\n              applyFn = widget.edit.apply;\r\n            } else {\r\n              applyFn = function(){\r\n                return true;\r\n              };\r\n            }\r\n\r\n            // injection locals\r\n            var locals = {\r\n              widget: widget,\r\n              definition: editScope.definition,\r\n              config: editScope.definition.config\r\n            };\r\n\r\n            // invoke apply function and apply if success\r\n            var result = $injector.invoke(applyFn, applyFn, locals);\r\n            createApplyPromise(result).then(function(){\r\n              definition.title = editScope.definition.title;\r\n              angular.extend(definition.config, editScope.definition.config);\r\n              if (widget.edit && widget.edit.reload) {\r\n                // reload content after edit dialog is closed\r\n                $scope.$broadcast('widgetConfigChanged');\r\n              }\r\n              editScope.closeDialog();\r\n            }, function(err){\r\n              if (err){\r\n                editScope.validationError = err;\r\n              } else {\r\n                editScope.validationError = 'Validation durring apply failed';\r\n              }\r\n            });\r\n          };\r\n\r\n        };\r\n      } else {\r\n        $log.debug('widget not found');\r\n      }\r\n    }\r\n\r\n    return {\r\n      replace: true,\r\n      restrict: 'EA',\r\n      transclude: false,\r\n      templateUrl: getWidgetTemplateUrl(),\r\n      scope: {\r\n        definition: '=',\r\n        col: '=column',\r\n        editMode: '=',\r\n        options: '=',\r\n        widgetState: '='\r\n      },\r\n      controller: [\"$scope\", function($scope) {\r\n\r\n        $scope.$on('adfDashboardCollapseExpand', function(event, args) {\r\n          $scope.widgetState.isCollapsed = args.collapseExpandStatus;\r\n        });\r\n\r\n        $scope.$on('adfWidgetEnterEditMode', function(event, widget){\r\n          if (dashboard.idEquals($scope.definition.wid, widget.wid)){\r\n            $scope.edit();\r\n          }\r\n        });\r\n\r\n        $scope.widgetClasses = function(w, definition){\r\n          var classes = definition.styleClass || '';\r\n          if (!w.frameless || $scope.editMode){\r\n            classes += ' panel panel-default';\r\n          }\r\n          return classes;\r\n        };\r\n\r\n        $scope.openFullScreen = function() {\r\n          var definition = $scope.definition;\r\n          var fullScreenScope = $scope.$new();\r\n          var opts = {\r\n            scope: fullScreenScope,\r\n            templateUrl: adfTemplatePath + 'widget-fullscreen.html',\r\n            size: definition.modalSize || 'lg', // 'sm', 'lg'\r\n            backdrop: 'static',\r\n            windowClass: (definition.fullScreen) ? 'dashboard-modal widget-fullscreen' : 'dashboard-modal'\r\n          };\r\n\r\n          var instance = $uibModal.open(opts);\r\n          fullScreenScope.closeDialog = function() {\r\n            instance.close();\r\n            fullScreenScope.$destroy();\r\n          };\r\n        };\r\n      }],\r\n      compile: function() {\r\n\r\n        /**\r\n         * use pre link, because link of widget-content\r\n         * is executed before post link widget\r\n         */\r\n        return {\r\n          pre: preLink,\r\n          post: postLink\r\n        };\r\n      }\r\n    };\r\n\r\n  }]);\r\n\n})(window);","/*\r\n* The MIT License\r\n*\r\n* Copyright (c) 2015, Sebastian Sdorra\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in\r\n* all copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n* SOFTWARE.\r\n*/\r\n\r\n\r\n/* global angular */\r\nangular.module('adf')\r\n  .directive('adfDashboardRow', function ($compile, adfTemplatePath, columnTemplate) {\r\n    'use strict';\r\n\r\n    return {\r\n      restrict: 'E',\r\n      replace: true,\r\n      scope: {\r\n        row: '=',\r\n        adfModel: '=',\r\n        editMode: '=',\r\n        continuousEditMode: '=',\r\n        options: '='\r\n      },\r\n      templateUrl: adfTemplatePath + 'dashboard-row.html',\r\n      link: function($scope, $element) {\r\n        if (angular.isDefined($scope.row.columns) && angular.isArray($scope.row.columns)) {\r\n          $compile(columnTemplate)($scope, function(cloned) {\r\n            $element.append(cloned);\r\n          });\r\n        }\r\n      }\r\n    };\r\n  });\r\n","/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n'use strict';\r\n\r\n/* global angular */\r\nangular.module('adf')\r\n  .directive('adfStructurePreview', function(adfTemplatePath) {\r\n\r\n    function adjustRowHeight(container){\r\n      if (container.rows && container.rows.length > 0){\r\n        var height = 100 / container.rows.length;\r\n        angular.forEach(container.rows, function(row){\r\n          row.style = {\r\n            height: height + '%'\r\n          }\r\n\r\n          if (row.columns){\r\n            angular.forEach(row.columns, function(column){\r\n              adjustRowHeight(column);\r\n            });\r\n          }\r\n        });\r\n      }\r\n    }\r\n\r\n    function prepareStructure($scope){\r\n      var structure = angular.copy($scope.structure);\r\n      adjustRowHeight(structure);\r\n      $scope.preview = structure;\r\n    }\r\n\r\n    return {\r\n      restrict: 'E',\r\n      replace: true,\r\n      scope: {\r\n        name: '=',\r\n        structure: '=',\r\n        selected: '='\r\n      },\r\n      templateUrl: adfTemplatePath + 'structure-preview.html',\r\n      link: prepareStructure\r\n    };\r\n  });\r\n","/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n'use strict';\r\n\r\nangular.module('adf')\r\n  .directive('adfWidgetContent', function($log, $q, widgetService,\r\n          $compile, $controller, $injector, dashboard) {\r\n\r\n    function compileWidget($scope, $element, currentScope) {\r\n      var model = $scope.model;\r\n      var content = $scope.content;\r\n\r\n      // display loading template\r\n      $element.html(dashboard.loadingTemplate);\r\n\r\n      // create new scope\r\n      var templateScope = $scope.$new();\r\n\r\n      // pass config object to scope\r\n      if (!model.config) {\r\n        model.config = {};\r\n      }\r\n\r\n      templateScope.config = model.config;\r\n\r\n      // local injections\r\n      var base = {\r\n        $scope: templateScope,\r\n        widget: model,\r\n        config: model.config\r\n      };\r\n\r\n      // get resolve promises from content object\r\n      var resolvers = {};\r\n      resolvers.$tpl = widgetService.getTemplate(content);\r\n      if (content.resolve) {\r\n        angular.forEach(content.resolve, function(promise, key) {\r\n          if (angular.isString(promise)) {\r\n            resolvers[key] = $injector.get(promise);\r\n          } else {\r\n            resolvers[key] = $injector.invoke(promise, promise, base);\r\n          }\r\n        });\r\n      }\r\n\r\n      // resolve all resolvers\r\n      $q.all(resolvers).then(function(locals) {\r\n        angular.extend(locals, base);\r\n\r\n        // pass resolve map to template scope as defined in resolveAs\r\n        if (content.resolveAs){\r\n          templateScope[content.resolveAs] = locals;\r\n        }\r\n\r\n        // compile & render template\r\n        var template = locals.$tpl;\r\n        $element.html(template);\r\n        if (content.controller) {\r\n          var templateCtrl = $controller(content.controller, locals);\r\n          if (content.controllerAs) {\r\n            templateScope[content.controllerAs] = templateCtrl;\r\n          }\r\n          $element.children().data('$ngControllerController', templateCtrl);\r\n        }\r\n        $compile($element.contents())(templateScope);\r\n      }, function(reason) {\r\n        // handle promise rejection\r\n        var msg = 'Could not resolve all promises';\r\n        if (reason) {\r\n          msg += ': ' + reason;\r\n        }\r\n        $log.warn(msg);\r\n        $element.html(dashboard.messageTemplate.replace(/{}/g, msg));\r\n      });\r\n\r\n      // destroy old scope\r\n      if (currentScope) {\r\n        currentScope.$destroy();\r\n      }\r\n\r\n      return templateScope;\r\n    }\r\n\r\n    return {\r\n      replace: true,\r\n      restrict: 'EA',\r\n      transclude: false,\r\n      scope: {\r\n        model: '=',\r\n        content: '='\r\n      },\r\n      link: function($scope, $element) {\r\n        var currentScope = compileWidget($scope, $element, null);\r\n        $scope.$on('widgetConfigChanged', function() {\r\n          currentScope = compileWidget($scope, $element, currentScope);\r\n        });\r\n        $scope.$on('widgetReload', function() {\r\n          currentScope = compileWidget($scope, $element, currentScope);\r\n        });\r\n      }\r\n    };\r\n\r\n  });\r\n","\r\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n/**\r\n * The widget service provide helper functions to render widgets and their content.\r\n */\r\nangular.module('adf')\r\n  .factory('widgetService', function($http, $q, $sce, $templateCache, dashboard) {\r\n    'use strict';\r\n\r\n    function parseUrl(url) {\r\n      var parsedUrl = url;\r\n      if (url.indexOf('{widgetsPath}') >= 0) {\r\n        parsedUrl = url.replace('{widgetsPath}', dashboard.widgetsPath)\r\n                .replace('//', '/');\r\n        if (parsedUrl.indexOf('/') === 0) {\r\n          parsedUrl = parsedUrl.substring(1);\r\n        }\r\n      }\r\n      return parsedUrl;\r\n    }\r\n\r\n    var exposed = {};\r\n\r\n    exposed.getTemplate = function(widget){\r\n      var deferred = $q.defer();\r\n\r\n      if (widget.template) {\r\n        deferred.resolve(widget.template);\r\n      } else if (widget.templateUrl) {\r\n        // try to fetch template from cache\r\n        var tpl = $templateCache.get(widget.templateUrl);\r\n        if (tpl) {\r\n          deferred.resolve(tpl);\r\n        } else {\r\n          var url = $sce.getTrustedResourceUrl(parseUrl(widget.templateUrl));\r\n          $http.get(url)\r\n               .success(function(response) {\r\n                 // put response to cache, with unmodified url as key\r\n                 $templateCache.put(widget.templateUrl, response);\r\n                 deferred.resolve(response);\r\n               })\r\n               .error(function() {\r\n                 deferred.reject('could not load template');\r\n               });\r\n        }\r\n      }\r\n\r\n      return deferred.promise;\r\n    };\r\n\r\n    return exposed;\r\n  });\r\n","/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n'use strict';\r\n\r\nangular.module('adf')\r\n  .directive('adfWidget', function($injector, $q, $log, $uibModal, $rootScope, dashboard, adfTemplatePath) {\r\n\r\n    function getWidgetTemplateUrl() {\r\n        var templateUrl = adfTemplatePath + 'widget.html';\r\n        if (dashboard.widgetCustomTemplateUrl) {\r\n            templateUrl = dashboard.widgetCustomTemplateUrl;\r\n        }\r\n\r\n        return templateUrl;\r\n    }\r\n\r\n    function preLink($scope) {\r\n      var definition = $scope.definition;\r\n      if (definition) {\r\n        var w = dashboard.widgets[definition.type];\r\n        if (w) {\r\n          // pass title\r\n          if (!definition.title) {\r\n            definition.title = w.title;\r\n          }\r\n\r\n          if (!definition.titleTemplateUrl) {\r\n            definition.titleTemplateUrl = adfTemplatePath + 'widget-title.html';\r\n            if (w.titleTemplateUrl) {\r\n              definition.titleTemplateUrl = w.titleTemplateUrl;\r\n            }\r\n          }\r\n\r\n          if (!definition.editTemplateUrl) {\r\n            definition.editTemplateUrl = adfTemplatePath + 'widget-edit.html';\r\n            if (w.editTemplateUrl) {\r\n              definition.editTemplateUrl = w.editTemplateUrl;\r\n            }\r\n          }\r\n\r\n          if (!definition.titleTemplateUrl) {\r\n            definition.frameless = w.frameless;\r\n          }\r\n\r\n          if (!definition.styleClass) {\r\n            definition.styleClass = w.styleClass;\r\n          }\r\n\r\n          // set id for sortable\r\n          if (!definition.wid) {\r\n            definition.wid = dashboard.id();\r\n          }\r\n\r\n          // pass copy of widget to scope\r\n          $scope.widget = angular.copy(w);\r\n\r\n          // create config object\r\n          var config = definition.config;\r\n          if (config) {\r\n            if (angular.isString(config)) {\r\n              config = angular.fromJson(config);\r\n            }\r\n          } else {\r\n            config = {};\r\n          }\r\n\r\n          // pass config to scope\r\n          $scope.config = config;\r\n\r\n          // collapse exposed $scope.widgetState property\r\n          if (!$scope.widgetState) {\r\n            $scope.widgetState = {};\r\n            $scope.widgetState.isCollapsed= (w.collapsed === true) ? w.collapsed : false;\r\n          }\r\n\r\n        } else {\r\n          $log.warn('could not find widget ' + definition.type);\r\n        }\r\n      } else {\r\n        $log.debug('definition not specified, widget was probably removed');\r\n      }\r\n    }\r\n\r\n    function postLink($scope, $element) {\r\n      var definition = $scope.definition;\r\n      if (definition) {\r\n        // bind close function\r\n\r\n        var deleteWidget = function() {\r\n          var column = $scope.col;\r\n          if (column) {\r\n            var index = column.widgets.indexOf(definition);\r\n            if (index >= 0) {\r\n              column.widgets.splice(index, 1);\r\n            }\r\n          }\r\n          $element.remove();\r\n          $rootScope.$broadcast('adfWidgetRemovedFromColumn');\r\n        };\r\n\r\n        $scope.remove = function() {\r\n          if ($scope.options.enableConfirmDelete) {\r\n            var deleteScope = $scope.$new();\r\n            var deleteTemplateUrl = adfTemplatePath + 'widget-delete.html';\r\n            if (definition.deleteTemplateUrl) {\r\n              deleteTemplateUrl = definition.deleteTemplateUrl;\r\n            }\r\n            var opts = {\r\n              scope: deleteScope,\r\n              templateUrl: deleteTemplateUrl,\r\n              backdrop: 'static'\r\n            };\r\n            var instance = $uibModal.open(opts);\r\n\r\n            deleteScope.closeDialog = function() {\r\n              instance.close();\r\n              deleteScope.$destroy();\r\n            };\r\n            deleteScope.deleteDialog = function() {\r\n              deleteWidget();\r\n              deleteScope.closeDialog();\r\n            };\r\n          } else {\r\n            deleteWidget();\r\n          }\r\n        };\r\n\r\n        // bind reload function\r\n        $scope.reload = function() {\r\n          $scope.$broadcast('widgetReload');\r\n        };\r\n\r\n        // bind edit function\r\n        $scope.edit = function() {\r\n          var editScope = $scope.$new();\r\n          editScope.definition = angular.copy(definition);\r\n\r\n          var adfEditTemplatePath = adfTemplatePath + 'widget-edit.html';\r\n          if (definition.editTemplateUrl) {\r\n            adfEditTemplatePath = definition.editTemplateUrl;\r\n          }\r\n\r\n          var opts = {\r\n            scope: editScope,\r\n            templateUrl: adfEditTemplatePath,\r\n            backdrop: 'static'\r\n          };\r\n\r\n          var instance = $uibModal.open(opts);\r\n\r\n          editScope.closeDialog = function() {\r\n            instance.close();\r\n            editScope.$destroy();\r\n          };\r\n\r\n          // TODO create util method\r\n          function createApplyPromise(result){\r\n            var promise;\r\n            if (typeof result === 'boolean'){\r\n              var deferred = $q.defer();\r\n              if (result){\r\n                deferred.resolve();\r\n              } else {\r\n                deferred.reject();\r\n              }\r\n              promise = deferred.promise;\r\n            } else {\r\n              promise = $q.when(result);\r\n            }\r\n            return promise;\r\n          }\r\n\r\n          editScope.saveDialog = function() {\r\n            // clear validation error\r\n            editScope.validationError = null;\r\n\r\n            // build injection locals\r\n            var widget = $scope.widget;\r\n\r\n            // create a default apply method for widgets\r\n            // without edit mode\r\n            // see issue https://goo.gl/KHPQLZ\r\n            var applyFn;\r\n            if (widget.edit){\r\n              applyFn = widget.edit.apply;\r\n            } else {\r\n              applyFn = function(){\r\n                return true;\r\n              };\r\n            }\r\n\r\n            // injection locals\r\n            var locals = {\r\n              widget: widget,\r\n              definition: editScope.definition,\r\n              config: editScope.definition.config\r\n            };\r\n\r\n            // invoke apply function and apply if success\r\n            var result = $injector.invoke(applyFn, applyFn, locals);\r\n            createApplyPromise(result).then(function(){\r\n              definition.title = editScope.definition.title;\r\n              angular.extend(definition.config, editScope.definition.config);\r\n              if (widget.edit && widget.edit.reload) {\r\n                // reload content after edit dialog is closed\r\n                $scope.$broadcast('widgetConfigChanged');\r\n              }\r\n              editScope.closeDialog();\r\n            }, function(err){\r\n              if (err){\r\n                editScope.validationError = err;\r\n              } else {\r\n                editScope.validationError = 'Validation durring apply failed';\r\n              }\r\n            });\r\n          };\r\n\r\n        };\r\n      } else {\r\n        $log.debug('widget not found');\r\n      }\r\n    }\r\n\r\n    return {\r\n      replace: true,\r\n      restrict: 'EA',\r\n      transclude: false,\r\n      templateUrl: getWidgetTemplateUrl(),\r\n      scope: {\r\n        definition: '=',\r\n        col: '=column',\r\n        editMode: '=',\r\n        options: '=',\r\n        widgetState: '='\r\n      },\r\n      controller: function($scope) {\r\n\r\n        $scope.$on('adfDashboardCollapseExpand', function(event, args) {\r\n          $scope.widgetState.isCollapsed = args.collapseExpandStatus;\r\n        });\r\n\r\n        $scope.$on('adfWidgetEnterEditMode', function(event, widget){\r\n          if (dashboard.idEquals($scope.definition.wid, widget.wid)){\r\n            $scope.edit();\r\n          }\r\n        });\r\n\r\n        $scope.widgetClasses = function(w, definition){\r\n          var classes = definition.styleClass || '';\r\n          if (!w.frameless || $scope.editMode){\r\n            classes += ' panel panel-default';\r\n          }\r\n          return classes;\r\n        };\r\n\r\n        $scope.openFullScreen = function() {\r\n          var definition = $scope.definition;\r\n          var fullScreenScope = $scope.$new();\r\n          var opts = {\r\n            scope: fullScreenScope,\r\n            templateUrl: adfTemplatePath + 'widget-fullscreen.html',\r\n            size: definition.modalSize || 'lg', // 'sm', 'lg'\r\n            backdrop: 'static',\r\n            windowClass: (definition.fullScreen) ? 'dashboard-modal widget-fullscreen' : 'dashboard-modal'\r\n          };\r\n\r\n          var instance = $uibModal.open(opts);\r\n          fullScreenScope.closeDialog = function() {\r\n            instance.close();\r\n            fullScreenScope.$destroy();\r\n          };\r\n        };\r\n      },\r\n      compile: function() {\r\n\r\n        /**\r\n         * use pre link, because link of widget-content\r\n         * is executed before post link widget\r\n         */\r\n        return {\r\n          pre: preLink,\r\n          post: postLink\r\n        };\r\n      }\r\n    };\r\n\r\n  });\r\n"],"sourceRoot":"/source/"}